
nixieWithFeather.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a134  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000025c  0800a2c4  0800a2c4  0001a2c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a520  0800a520  00020228  2**0
                  CONTENTS
  4 .ARM          00000008  0800a520  0800a520  0001a520  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a528  0800a528  00020228  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a528  0800a528  0001a528  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a52c  0800a52c  0001a52c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000228  20000000  0800a530  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020228  2**0
                  CONTENTS
 10 .bss          00001f84  20000228  20000228  00020228  2**2
                  ALLOC
 11 ._user_heap_stack 00000c04  200021ac  200021ac  00020228  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020228  2**0
                  CONTENTS, READONLY
 13 .debug_info   00017a05  00000000  00000000  00020258  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000034f6  00000000  00000000  00037c5d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001430  00000000  00000000  0003b158  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000012c0  00000000  00000000  0003c588  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023277  00000000  00000000  0003d848  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000192cd  00000000  00000000  00060abf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c5a0b  00000000  00000000  00079d8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0013f797  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005f3c  00000000  00000000  0013f7e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000228 	.word	0x20000228
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a2ac 	.word	0x0800a2ac

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000022c 	.word	0x2000022c
 80001cc:	0800a2ac 	.word	0x0800a2ac

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000588:	4b0e      	ldr	r3, [pc, #56]	; (80005c4 <HAL_Init+0x40>)
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	4a0d      	ldr	r2, [pc, #52]	; (80005c4 <HAL_Init+0x40>)
 800058e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000592:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000594:	4b0b      	ldr	r3, [pc, #44]	; (80005c4 <HAL_Init+0x40>)
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	4a0a      	ldr	r2, [pc, #40]	; (80005c4 <HAL_Init+0x40>)
 800059a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800059e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80005a0:	4b08      	ldr	r3, [pc, #32]	; (80005c4 <HAL_Init+0x40>)
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	4a07      	ldr	r2, [pc, #28]	; (80005c4 <HAL_Init+0x40>)
 80005a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80005aa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005ac:	2003      	movs	r0, #3
 80005ae:	f000 f94f 	bl	8000850 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80005b2:	200f      	movs	r0, #15
 80005b4:	f000 f808 	bl	80005c8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80005b8:	f007 fd58 	bl	800806c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80005bc:	2300      	movs	r3, #0
}
 80005be:	4618      	mov	r0, r3
 80005c0:	bd80      	pop	{r7, pc}
 80005c2:	bf00      	nop
 80005c4:	40023c00 	.word	0x40023c00

080005c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b082      	sub	sp, #8
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80005d0:	4b12      	ldr	r3, [pc, #72]	; (800061c <HAL_InitTick+0x54>)
 80005d2:	681a      	ldr	r2, [r3, #0]
 80005d4:	4b12      	ldr	r3, [pc, #72]	; (8000620 <HAL_InitTick+0x58>)
 80005d6:	781b      	ldrb	r3, [r3, #0]
 80005d8:	4619      	mov	r1, r3
 80005da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005de:	fbb3 f3f1 	udiv	r3, r3, r1
 80005e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80005e6:	4618      	mov	r0, r3
 80005e8:	f000 f967 	bl	80008ba <HAL_SYSTICK_Config>
 80005ec:	4603      	mov	r3, r0
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	d001      	beq.n	80005f6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80005f2:	2301      	movs	r3, #1
 80005f4:	e00e      	b.n	8000614 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	2b0f      	cmp	r3, #15
 80005fa:	d80a      	bhi.n	8000612 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80005fc:	2200      	movs	r2, #0
 80005fe:	6879      	ldr	r1, [r7, #4]
 8000600:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000604:	f000 f92f 	bl	8000866 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000608:	4a06      	ldr	r2, [pc, #24]	; (8000624 <HAL_InitTick+0x5c>)
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800060e:	2300      	movs	r3, #0
 8000610:	e000      	b.n	8000614 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000612:	2301      	movs	r3, #1
}
 8000614:	4618      	mov	r0, r3
 8000616:	3708      	adds	r7, #8
 8000618:	46bd      	mov	sp, r7
 800061a:	bd80      	pop	{r7, pc}
 800061c:	2000015c 	.word	0x2000015c
 8000620:	20000004 	.word	0x20000004
 8000624:	20000000 	.word	0x20000000

08000628 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000628:	b480      	push	{r7}
 800062a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800062c:	4b06      	ldr	r3, [pc, #24]	; (8000648 <HAL_IncTick+0x20>)
 800062e:	781b      	ldrb	r3, [r3, #0]
 8000630:	461a      	mov	r2, r3
 8000632:	4b06      	ldr	r3, [pc, #24]	; (800064c <HAL_IncTick+0x24>)
 8000634:	681b      	ldr	r3, [r3, #0]
 8000636:	4413      	add	r3, r2
 8000638:	4a04      	ldr	r2, [pc, #16]	; (800064c <HAL_IncTick+0x24>)
 800063a:	6013      	str	r3, [r2, #0]
}
 800063c:	bf00      	nop
 800063e:	46bd      	mov	sp, r7
 8000640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000644:	4770      	bx	lr
 8000646:	bf00      	nop
 8000648:	20000004 	.word	0x20000004
 800064c:	20000244 	.word	0x20000244

08000650 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000650:	b480      	push	{r7}
 8000652:	af00      	add	r7, sp, #0
  return uwTick;
 8000654:	4b03      	ldr	r3, [pc, #12]	; (8000664 <HAL_GetTick+0x14>)
 8000656:	681b      	ldr	r3, [r3, #0]
}
 8000658:	4618      	mov	r0, r3
 800065a:	46bd      	mov	sp, r7
 800065c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000660:	4770      	bx	lr
 8000662:	bf00      	nop
 8000664:	20000244 	.word	0x20000244

08000668 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	b084      	sub	sp, #16
 800066c:	af00      	add	r7, sp, #0
 800066e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000670:	f7ff ffee 	bl	8000650 <HAL_GetTick>
 8000674:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800067a:	68fb      	ldr	r3, [r7, #12]
 800067c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000680:	d005      	beq.n	800068e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000682:	4b0a      	ldr	r3, [pc, #40]	; (80006ac <HAL_Delay+0x44>)
 8000684:	781b      	ldrb	r3, [r3, #0]
 8000686:	461a      	mov	r2, r3
 8000688:	68fb      	ldr	r3, [r7, #12]
 800068a:	4413      	add	r3, r2
 800068c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800068e:	bf00      	nop
 8000690:	f7ff ffde 	bl	8000650 <HAL_GetTick>
 8000694:	4602      	mov	r2, r0
 8000696:	68bb      	ldr	r3, [r7, #8]
 8000698:	1ad3      	subs	r3, r2, r3
 800069a:	68fa      	ldr	r2, [r7, #12]
 800069c:	429a      	cmp	r2, r3
 800069e:	d8f7      	bhi.n	8000690 <HAL_Delay+0x28>
  {
  }
}
 80006a0:	bf00      	nop
 80006a2:	bf00      	nop
 80006a4:	3710      	adds	r7, #16
 80006a6:	46bd      	mov	sp, r7
 80006a8:	bd80      	pop	{r7, pc}
 80006aa:	bf00      	nop
 80006ac:	20000004 	.word	0x20000004

080006b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80006b0:	b480      	push	{r7}
 80006b2:	b085      	sub	sp, #20
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	f003 0307 	and.w	r3, r3, #7
 80006be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80006c0:	4b0c      	ldr	r3, [pc, #48]	; (80006f4 <__NVIC_SetPriorityGrouping+0x44>)
 80006c2:	68db      	ldr	r3, [r3, #12]
 80006c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80006c6:	68ba      	ldr	r2, [r7, #8]
 80006c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80006cc:	4013      	ands	r3, r2
 80006ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80006d0:	68fb      	ldr	r3, [r7, #12]
 80006d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80006d4:	68bb      	ldr	r3, [r7, #8]
 80006d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80006d8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80006dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80006e2:	4a04      	ldr	r2, [pc, #16]	; (80006f4 <__NVIC_SetPriorityGrouping+0x44>)
 80006e4:	68bb      	ldr	r3, [r7, #8]
 80006e6:	60d3      	str	r3, [r2, #12]
}
 80006e8:	bf00      	nop
 80006ea:	3714      	adds	r7, #20
 80006ec:	46bd      	mov	sp, r7
 80006ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f2:	4770      	bx	lr
 80006f4:	e000ed00 	.word	0xe000ed00

080006f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80006f8:	b480      	push	{r7}
 80006fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80006fc:	4b04      	ldr	r3, [pc, #16]	; (8000710 <__NVIC_GetPriorityGrouping+0x18>)
 80006fe:	68db      	ldr	r3, [r3, #12]
 8000700:	0a1b      	lsrs	r3, r3, #8
 8000702:	f003 0307 	and.w	r3, r3, #7
}
 8000706:	4618      	mov	r0, r3
 8000708:	46bd      	mov	sp, r7
 800070a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800070e:	4770      	bx	lr
 8000710:	e000ed00 	.word	0xe000ed00

08000714 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000714:	b480      	push	{r7}
 8000716:	b083      	sub	sp, #12
 8000718:	af00      	add	r7, sp, #0
 800071a:	4603      	mov	r3, r0
 800071c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800071e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000722:	2b00      	cmp	r3, #0
 8000724:	db0b      	blt.n	800073e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000726:	79fb      	ldrb	r3, [r7, #7]
 8000728:	f003 021f 	and.w	r2, r3, #31
 800072c:	4907      	ldr	r1, [pc, #28]	; (800074c <__NVIC_EnableIRQ+0x38>)
 800072e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000732:	095b      	lsrs	r3, r3, #5
 8000734:	2001      	movs	r0, #1
 8000736:	fa00 f202 	lsl.w	r2, r0, r2
 800073a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800073e:	bf00      	nop
 8000740:	370c      	adds	r7, #12
 8000742:	46bd      	mov	sp, r7
 8000744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000748:	4770      	bx	lr
 800074a:	bf00      	nop
 800074c:	e000e100 	.word	0xe000e100

08000750 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000750:	b480      	push	{r7}
 8000752:	b083      	sub	sp, #12
 8000754:	af00      	add	r7, sp, #0
 8000756:	4603      	mov	r3, r0
 8000758:	6039      	str	r1, [r7, #0]
 800075a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800075c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000760:	2b00      	cmp	r3, #0
 8000762:	db0a      	blt.n	800077a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000764:	683b      	ldr	r3, [r7, #0]
 8000766:	b2da      	uxtb	r2, r3
 8000768:	490c      	ldr	r1, [pc, #48]	; (800079c <__NVIC_SetPriority+0x4c>)
 800076a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800076e:	0112      	lsls	r2, r2, #4
 8000770:	b2d2      	uxtb	r2, r2
 8000772:	440b      	add	r3, r1
 8000774:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000778:	e00a      	b.n	8000790 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800077a:	683b      	ldr	r3, [r7, #0]
 800077c:	b2da      	uxtb	r2, r3
 800077e:	4908      	ldr	r1, [pc, #32]	; (80007a0 <__NVIC_SetPriority+0x50>)
 8000780:	79fb      	ldrb	r3, [r7, #7]
 8000782:	f003 030f 	and.w	r3, r3, #15
 8000786:	3b04      	subs	r3, #4
 8000788:	0112      	lsls	r2, r2, #4
 800078a:	b2d2      	uxtb	r2, r2
 800078c:	440b      	add	r3, r1
 800078e:	761a      	strb	r2, [r3, #24]
}
 8000790:	bf00      	nop
 8000792:	370c      	adds	r7, #12
 8000794:	46bd      	mov	sp, r7
 8000796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800079a:	4770      	bx	lr
 800079c:	e000e100 	.word	0xe000e100
 80007a0:	e000ed00 	.word	0xe000ed00

080007a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80007a4:	b480      	push	{r7}
 80007a6:	b089      	sub	sp, #36	; 0x24
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	60f8      	str	r0, [r7, #12]
 80007ac:	60b9      	str	r1, [r7, #8]
 80007ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80007b0:	68fb      	ldr	r3, [r7, #12]
 80007b2:	f003 0307 	and.w	r3, r3, #7
 80007b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80007b8:	69fb      	ldr	r3, [r7, #28]
 80007ba:	f1c3 0307 	rsb	r3, r3, #7
 80007be:	2b04      	cmp	r3, #4
 80007c0:	bf28      	it	cs
 80007c2:	2304      	movcs	r3, #4
 80007c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80007c6:	69fb      	ldr	r3, [r7, #28]
 80007c8:	3304      	adds	r3, #4
 80007ca:	2b06      	cmp	r3, #6
 80007cc:	d902      	bls.n	80007d4 <NVIC_EncodePriority+0x30>
 80007ce:	69fb      	ldr	r3, [r7, #28]
 80007d0:	3b03      	subs	r3, #3
 80007d2:	e000      	b.n	80007d6 <NVIC_EncodePriority+0x32>
 80007d4:	2300      	movs	r3, #0
 80007d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007d8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80007dc:	69bb      	ldr	r3, [r7, #24]
 80007de:	fa02 f303 	lsl.w	r3, r2, r3
 80007e2:	43da      	mvns	r2, r3
 80007e4:	68bb      	ldr	r3, [r7, #8]
 80007e6:	401a      	ands	r2, r3
 80007e8:	697b      	ldr	r3, [r7, #20]
 80007ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80007ec:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80007f0:	697b      	ldr	r3, [r7, #20]
 80007f2:	fa01 f303 	lsl.w	r3, r1, r3
 80007f6:	43d9      	mvns	r1, r3
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007fc:	4313      	orrs	r3, r2
         );
}
 80007fe:	4618      	mov	r0, r3
 8000800:	3724      	adds	r7, #36	; 0x24
 8000802:	46bd      	mov	sp, r7
 8000804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000808:	4770      	bx	lr
	...

0800080c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b082      	sub	sp, #8
 8000810:	af00      	add	r7, sp, #0
 8000812:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	3b01      	subs	r3, #1
 8000818:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800081c:	d301      	bcc.n	8000822 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800081e:	2301      	movs	r3, #1
 8000820:	e00f      	b.n	8000842 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000822:	4a0a      	ldr	r2, [pc, #40]	; (800084c <SysTick_Config+0x40>)
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	3b01      	subs	r3, #1
 8000828:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800082a:	210f      	movs	r1, #15
 800082c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000830:	f7ff ff8e 	bl	8000750 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000834:	4b05      	ldr	r3, [pc, #20]	; (800084c <SysTick_Config+0x40>)
 8000836:	2200      	movs	r2, #0
 8000838:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800083a:	4b04      	ldr	r3, [pc, #16]	; (800084c <SysTick_Config+0x40>)
 800083c:	2207      	movs	r2, #7
 800083e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000840:	2300      	movs	r3, #0
}
 8000842:	4618      	mov	r0, r3
 8000844:	3708      	adds	r7, #8
 8000846:	46bd      	mov	sp, r7
 8000848:	bd80      	pop	{r7, pc}
 800084a:	bf00      	nop
 800084c:	e000e010 	.word	0xe000e010

08000850 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b082      	sub	sp, #8
 8000854:	af00      	add	r7, sp, #0
 8000856:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000858:	6878      	ldr	r0, [r7, #4]
 800085a:	f7ff ff29 	bl	80006b0 <__NVIC_SetPriorityGrouping>
}
 800085e:	bf00      	nop
 8000860:	3708      	adds	r7, #8
 8000862:	46bd      	mov	sp, r7
 8000864:	bd80      	pop	{r7, pc}

08000866 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000866:	b580      	push	{r7, lr}
 8000868:	b086      	sub	sp, #24
 800086a:	af00      	add	r7, sp, #0
 800086c:	4603      	mov	r3, r0
 800086e:	60b9      	str	r1, [r7, #8]
 8000870:	607a      	str	r2, [r7, #4]
 8000872:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000874:	2300      	movs	r3, #0
 8000876:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000878:	f7ff ff3e 	bl	80006f8 <__NVIC_GetPriorityGrouping>
 800087c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800087e:	687a      	ldr	r2, [r7, #4]
 8000880:	68b9      	ldr	r1, [r7, #8]
 8000882:	6978      	ldr	r0, [r7, #20]
 8000884:	f7ff ff8e 	bl	80007a4 <NVIC_EncodePriority>
 8000888:	4602      	mov	r2, r0
 800088a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800088e:	4611      	mov	r1, r2
 8000890:	4618      	mov	r0, r3
 8000892:	f7ff ff5d 	bl	8000750 <__NVIC_SetPriority>
}
 8000896:	bf00      	nop
 8000898:	3718      	adds	r7, #24
 800089a:	46bd      	mov	sp, r7
 800089c:	bd80      	pop	{r7, pc}

0800089e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800089e:	b580      	push	{r7, lr}
 80008a0:	b082      	sub	sp, #8
 80008a2:	af00      	add	r7, sp, #0
 80008a4:	4603      	mov	r3, r0
 80008a6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80008a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008ac:	4618      	mov	r0, r3
 80008ae:	f7ff ff31 	bl	8000714 <__NVIC_EnableIRQ>
}
 80008b2:	bf00      	nop
 80008b4:	3708      	adds	r7, #8
 80008b6:	46bd      	mov	sp, r7
 80008b8:	bd80      	pop	{r7, pc}

080008ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80008ba:	b580      	push	{r7, lr}
 80008bc:	b082      	sub	sp, #8
 80008be:	af00      	add	r7, sp, #0
 80008c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80008c2:	6878      	ldr	r0, [r7, #4]
 80008c4:	f7ff ffa2 	bl	800080c <SysTick_Config>
 80008c8:	4603      	mov	r3, r0
}
 80008ca:	4618      	mov	r0, r3
 80008cc:	3708      	adds	r7, #8
 80008ce:	46bd      	mov	sp, r7
 80008d0:	bd80      	pop	{r7, pc}
	...

080008d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80008d4:	b480      	push	{r7}
 80008d6:	b089      	sub	sp, #36	; 0x24
 80008d8:	af00      	add	r7, sp, #0
 80008da:	6078      	str	r0, [r7, #4]
 80008dc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80008de:	2300      	movs	r3, #0
 80008e0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80008e2:	2300      	movs	r3, #0
 80008e4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80008e6:	2300      	movs	r3, #0
 80008e8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80008ea:	2300      	movs	r3, #0
 80008ec:	61fb      	str	r3, [r7, #28]
 80008ee:	e16b      	b.n	8000bc8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80008f0:	2201      	movs	r2, #1
 80008f2:	69fb      	ldr	r3, [r7, #28]
 80008f4:	fa02 f303 	lsl.w	r3, r2, r3
 80008f8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80008fa:	683b      	ldr	r3, [r7, #0]
 80008fc:	681b      	ldr	r3, [r3, #0]
 80008fe:	697a      	ldr	r2, [r7, #20]
 8000900:	4013      	ands	r3, r2
 8000902:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000904:	693a      	ldr	r2, [r7, #16]
 8000906:	697b      	ldr	r3, [r7, #20]
 8000908:	429a      	cmp	r2, r3
 800090a:	f040 815a 	bne.w	8000bc2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800090e:	683b      	ldr	r3, [r7, #0]
 8000910:	685b      	ldr	r3, [r3, #4]
 8000912:	f003 0303 	and.w	r3, r3, #3
 8000916:	2b01      	cmp	r3, #1
 8000918:	d005      	beq.n	8000926 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800091a:	683b      	ldr	r3, [r7, #0]
 800091c:	685b      	ldr	r3, [r3, #4]
 800091e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000922:	2b02      	cmp	r3, #2
 8000924:	d130      	bne.n	8000988 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	689b      	ldr	r3, [r3, #8]
 800092a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800092c:	69fb      	ldr	r3, [r7, #28]
 800092e:	005b      	lsls	r3, r3, #1
 8000930:	2203      	movs	r2, #3
 8000932:	fa02 f303 	lsl.w	r3, r2, r3
 8000936:	43db      	mvns	r3, r3
 8000938:	69ba      	ldr	r2, [r7, #24]
 800093a:	4013      	ands	r3, r2
 800093c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800093e:	683b      	ldr	r3, [r7, #0]
 8000940:	68da      	ldr	r2, [r3, #12]
 8000942:	69fb      	ldr	r3, [r7, #28]
 8000944:	005b      	lsls	r3, r3, #1
 8000946:	fa02 f303 	lsl.w	r3, r2, r3
 800094a:	69ba      	ldr	r2, [r7, #24]
 800094c:	4313      	orrs	r3, r2
 800094e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	69ba      	ldr	r2, [r7, #24]
 8000954:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	685b      	ldr	r3, [r3, #4]
 800095a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800095c:	2201      	movs	r2, #1
 800095e:	69fb      	ldr	r3, [r7, #28]
 8000960:	fa02 f303 	lsl.w	r3, r2, r3
 8000964:	43db      	mvns	r3, r3
 8000966:	69ba      	ldr	r2, [r7, #24]
 8000968:	4013      	ands	r3, r2
 800096a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800096c:	683b      	ldr	r3, [r7, #0]
 800096e:	685b      	ldr	r3, [r3, #4]
 8000970:	091b      	lsrs	r3, r3, #4
 8000972:	f003 0201 	and.w	r2, r3, #1
 8000976:	69fb      	ldr	r3, [r7, #28]
 8000978:	fa02 f303 	lsl.w	r3, r2, r3
 800097c:	69ba      	ldr	r2, [r7, #24]
 800097e:	4313      	orrs	r3, r2
 8000980:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	69ba      	ldr	r2, [r7, #24]
 8000986:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000988:	683b      	ldr	r3, [r7, #0]
 800098a:	685b      	ldr	r3, [r3, #4]
 800098c:	f003 0303 	and.w	r3, r3, #3
 8000990:	2b03      	cmp	r3, #3
 8000992:	d017      	beq.n	80009c4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	68db      	ldr	r3, [r3, #12]
 8000998:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800099a:	69fb      	ldr	r3, [r7, #28]
 800099c:	005b      	lsls	r3, r3, #1
 800099e:	2203      	movs	r2, #3
 80009a0:	fa02 f303 	lsl.w	r3, r2, r3
 80009a4:	43db      	mvns	r3, r3
 80009a6:	69ba      	ldr	r2, [r7, #24]
 80009a8:	4013      	ands	r3, r2
 80009aa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80009ac:	683b      	ldr	r3, [r7, #0]
 80009ae:	689a      	ldr	r2, [r3, #8]
 80009b0:	69fb      	ldr	r3, [r7, #28]
 80009b2:	005b      	lsls	r3, r3, #1
 80009b4:	fa02 f303 	lsl.w	r3, r2, r3
 80009b8:	69ba      	ldr	r2, [r7, #24]
 80009ba:	4313      	orrs	r3, r2
 80009bc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	69ba      	ldr	r2, [r7, #24]
 80009c2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80009c4:	683b      	ldr	r3, [r7, #0]
 80009c6:	685b      	ldr	r3, [r3, #4]
 80009c8:	f003 0303 	and.w	r3, r3, #3
 80009cc:	2b02      	cmp	r3, #2
 80009ce:	d123      	bne.n	8000a18 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80009d0:	69fb      	ldr	r3, [r7, #28]
 80009d2:	08da      	lsrs	r2, r3, #3
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	3208      	adds	r2, #8
 80009d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80009dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80009de:	69fb      	ldr	r3, [r7, #28]
 80009e0:	f003 0307 	and.w	r3, r3, #7
 80009e4:	009b      	lsls	r3, r3, #2
 80009e6:	220f      	movs	r2, #15
 80009e8:	fa02 f303 	lsl.w	r3, r2, r3
 80009ec:	43db      	mvns	r3, r3
 80009ee:	69ba      	ldr	r2, [r7, #24]
 80009f0:	4013      	ands	r3, r2
 80009f2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80009f4:	683b      	ldr	r3, [r7, #0]
 80009f6:	691a      	ldr	r2, [r3, #16]
 80009f8:	69fb      	ldr	r3, [r7, #28]
 80009fa:	f003 0307 	and.w	r3, r3, #7
 80009fe:	009b      	lsls	r3, r3, #2
 8000a00:	fa02 f303 	lsl.w	r3, r2, r3
 8000a04:	69ba      	ldr	r2, [r7, #24]
 8000a06:	4313      	orrs	r3, r2
 8000a08:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000a0a:	69fb      	ldr	r3, [r7, #28]
 8000a0c:	08da      	lsrs	r2, r3, #3
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	3208      	adds	r2, #8
 8000a12:	69b9      	ldr	r1, [r7, #24]
 8000a14:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000a1e:	69fb      	ldr	r3, [r7, #28]
 8000a20:	005b      	lsls	r3, r3, #1
 8000a22:	2203      	movs	r2, #3
 8000a24:	fa02 f303 	lsl.w	r3, r2, r3
 8000a28:	43db      	mvns	r3, r3
 8000a2a:	69ba      	ldr	r2, [r7, #24]
 8000a2c:	4013      	ands	r3, r2
 8000a2e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000a30:	683b      	ldr	r3, [r7, #0]
 8000a32:	685b      	ldr	r3, [r3, #4]
 8000a34:	f003 0203 	and.w	r2, r3, #3
 8000a38:	69fb      	ldr	r3, [r7, #28]
 8000a3a:	005b      	lsls	r3, r3, #1
 8000a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000a40:	69ba      	ldr	r2, [r7, #24]
 8000a42:	4313      	orrs	r3, r2
 8000a44:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	69ba      	ldr	r2, [r7, #24]
 8000a4a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000a4c:	683b      	ldr	r3, [r7, #0]
 8000a4e:	685b      	ldr	r3, [r3, #4]
 8000a50:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	f000 80b4 	beq.w	8000bc2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	60fb      	str	r3, [r7, #12]
 8000a5e:	4b60      	ldr	r3, [pc, #384]	; (8000be0 <HAL_GPIO_Init+0x30c>)
 8000a60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a62:	4a5f      	ldr	r2, [pc, #380]	; (8000be0 <HAL_GPIO_Init+0x30c>)
 8000a64:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a68:	6453      	str	r3, [r2, #68]	; 0x44
 8000a6a:	4b5d      	ldr	r3, [pc, #372]	; (8000be0 <HAL_GPIO_Init+0x30c>)
 8000a6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a6e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a72:	60fb      	str	r3, [r7, #12]
 8000a74:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000a76:	4a5b      	ldr	r2, [pc, #364]	; (8000be4 <HAL_GPIO_Init+0x310>)
 8000a78:	69fb      	ldr	r3, [r7, #28]
 8000a7a:	089b      	lsrs	r3, r3, #2
 8000a7c:	3302      	adds	r3, #2
 8000a7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a82:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000a84:	69fb      	ldr	r3, [r7, #28]
 8000a86:	f003 0303 	and.w	r3, r3, #3
 8000a8a:	009b      	lsls	r3, r3, #2
 8000a8c:	220f      	movs	r2, #15
 8000a8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a92:	43db      	mvns	r3, r3
 8000a94:	69ba      	ldr	r2, [r7, #24]
 8000a96:	4013      	ands	r3, r2
 8000a98:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	4a52      	ldr	r2, [pc, #328]	; (8000be8 <HAL_GPIO_Init+0x314>)
 8000a9e:	4293      	cmp	r3, r2
 8000aa0:	d02b      	beq.n	8000afa <HAL_GPIO_Init+0x226>
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	4a51      	ldr	r2, [pc, #324]	; (8000bec <HAL_GPIO_Init+0x318>)
 8000aa6:	4293      	cmp	r3, r2
 8000aa8:	d025      	beq.n	8000af6 <HAL_GPIO_Init+0x222>
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	4a50      	ldr	r2, [pc, #320]	; (8000bf0 <HAL_GPIO_Init+0x31c>)
 8000aae:	4293      	cmp	r3, r2
 8000ab0:	d01f      	beq.n	8000af2 <HAL_GPIO_Init+0x21e>
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	4a4f      	ldr	r2, [pc, #316]	; (8000bf4 <HAL_GPIO_Init+0x320>)
 8000ab6:	4293      	cmp	r3, r2
 8000ab8:	d019      	beq.n	8000aee <HAL_GPIO_Init+0x21a>
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	4a4e      	ldr	r2, [pc, #312]	; (8000bf8 <HAL_GPIO_Init+0x324>)
 8000abe:	4293      	cmp	r3, r2
 8000ac0:	d013      	beq.n	8000aea <HAL_GPIO_Init+0x216>
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	4a4d      	ldr	r2, [pc, #308]	; (8000bfc <HAL_GPIO_Init+0x328>)
 8000ac6:	4293      	cmp	r3, r2
 8000ac8:	d00d      	beq.n	8000ae6 <HAL_GPIO_Init+0x212>
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	4a4c      	ldr	r2, [pc, #304]	; (8000c00 <HAL_GPIO_Init+0x32c>)
 8000ace:	4293      	cmp	r3, r2
 8000ad0:	d007      	beq.n	8000ae2 <HAL_GPIO_Init+0x20e>
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	4a4b      	ldr	r2, [pc, #300]	; (8000c04 <HAL_GPIO_Init+0x330>)
 8000ad6:	4293      	cmp	r3, r2
 8000ad8:	d101      	bne.n	8000ade <HAL_GPIO_Init+0x20a>
 8000ada:	2307      	movs	r3, #7
 8000adc:	e00e      	b.n	8000afc <HAL_GPIO_Init+0x228>
 8000ade:	2308      	movs	r3, #8
 8000ae0:	e00c      	b.n	8000afc <HAL_GPIO_Init+0x228>
 8000ae2:	2306      	movs	r3, #6
 8000ae4:	e00a      	b.n	8000afc <HAL_GPIO_Init+0x228>
 8000ae6:	2305      	movs	r3, #5
 8000ae8:	e008      	b.n	8000afc <HAL_GPIO_Init+0x228>
 8000aea:	2304      	movs	r3, #4
 8000aec:	e006      	b.n	8000afc <HAL_GPIO_Init+0x228>
 8000aee:	2303      	movs	r3, #3
 8000af0:	e004      	b.n	8000afc <HAL_GPIO_Init+0x228>
 8000af2:	2302      	movs	r3, #2
 8000af4:	e002      	b.n	8000afc <HAL_GPIO_Init+0x228>
 8000af6:	2301      	movs	r3, #1
 8000af8:	e000      	b.n	8000afc <HAL_GPIO_Init+0x228>
 8000afa:	2300      	movs	r3, #0
 8000afc:	69fa      	ldr	r2, [r7, #28]
 8000afe:	f002 0203 	and.w	r2, r2, #3
 8000b02:	0092      	lsls	r2, r2, #2
 8000b04:	4093      	lsls	r3, r2
 8000b06:	69ba      	ldr	r2, [r7, #24]
 8000b08:	4313      	orrs	r3, r2
 8000b0a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000b0c:	4935      	ldr	r1, [pc, #212]	; (8000be4 <HAL_GPIO_Init+0x310>)
 8000b0e:	69fb      	ldr	r3, [r7, #28]
 8000b10:	089b      	lsrs	r3, r3, #2
 8000b12:	3302      	adds	r3, #2
 8000b14:	69ba      	ldr	r2, [r7, #24]
 8000b16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000b1a:	4b3b      	ldr	r3, [pc, #236]	; (8000c08 <HAL_GPIO_Init+0x334>)
 8000b1c:	689b      	ldr	r3, [r3, #8]
 8000b1e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000b20:	693b      	ldr	r3, [r7, #16]
 8000b22:	43db      	mvns	r3, r3
 8000b24:	69ba      	ldr	r2, [r7, #24]
 8000b26:	4013      	ands	r3, r2
 8000b28:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000b2a:	683b      	ldr	r3, [r7, #0]
 8000b2c:	685b      	ldr	r3, [r3, #4]
 8000b2e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d003      	beq.n	8000b3e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000b36:	69ba      	ldr	r2, [r7, #24]
 8000b38:	693b      	ldr	r3, [r7, #16]
 8000b3a:	4313      	orrs	r3, r2
 8000b3c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000b3e:	4a32      	ldr	r2, [pc, #200]	; (8000c08 <HAL_GPIO_Init+0x334>)
 8000b40:	69bb      	ldr	r3, [r7, #24]
 8000b42:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000b44:	4b30      	ldr	r3, [pc, #192]	; (8000c08 <HAL_GPIO_Init+0x334>)
 8000b46:	68db      	ldr	r3, [r3, #12]
 8000b48:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000b4a:	693b      	ldr	r3, [r7, #16]
 8000b4c:	43db      	mvns	r3, r3
 8000b4e:	69ba      	ldr	r2, [r7, #24]
 8000b50:	4013      	ands	r3, r2
 8000b52:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000b54:	683b      	ldr	r3, [r7, #0]
 8000b56:	685b      	ldr	r3, [r3, #4]
 8000b58:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d003      	beq.n	8000b68 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000b60:	69ba      	ldr	r2, [r7, #24]
 8000b62:	693b      	ldr	r3, [r7, #16]
 8000b64:	4313      	orrs	r3, r2
 8000b66:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000b68:	4a27      	ldr	r2, [pc, #156]	; (8000c08 <HAL_GPIO_Init+0x334>)
 8000b6a:	69bb      	ldr	r3, [r7, #24]
 8000b6c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000b6e:	4b26      	ldr	r3, [pc, #152]	; (8000c08 <HAL_GPIO_Init+0x334>)
 8000b70:	685b      	ldr	r3, [r3, #4]
 8000b72:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000b74:	693b      	ldr	r3, [r7, #16]
 8000b76:	43db      	mvns	r3, r3
 8000b78:	69ba      	ldr	r2, [r7, #24]
 8000b7a:	4013      	ands	r3, r2
 8000b7c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000b7e:	683b      	ldr	r3, [r7, #0]
 8000b80:	685b      	ldr	r3, [r3, #4]
 8000b82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d003      	beq.n	8000b92 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8000b8a:	69ba      	ldr	r2, [r7, #24]
 8000b8c:	693b      	ldr	r3, [r7, #16]
 8000b8e:	4313      	orrs	r3, r2
 8000b90:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000b92:	4a1d      	ldr	r2, [pc, #116]	; (8000c08 <HAL_GPIO_Init+0x334>)
 8000b94:	69bb      	ldr	r3, [r7, #24]
 8000b96:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000b98:	4b1b      	ldr	r3, [pc, #108]	; (8000c08 <HAL_GPIO_Init+0x334>)
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000b9e:	693b      	ldr	r3, [r7, #16]
 8000ba0:	43db      	mvns	r3, r3
 8000ba2:	69ba      	ldr	r2, [r7, #24]
 8000ba4:	4013      	ands	r3, r2
 8000ba6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000ba8:	683b      	ldr	r3, [r7, #0]
 8000baa:	685b      	ldr	r3, [r3, #4]
 8000bac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d003      	beq.n	8000bbc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8000bb4:	69ba      	ldr	r2, [r7, #24]
 8000bb6:	693b      	ldr	r3, [r7, #16]
 8000bb8:	4313      	orrs	r3, r2
 8000bba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000bbc:	4a12      	ldr	r2, [pc, #72]	; (8000c08 <HAL_GPIO_Init+0x334>)
 8000bbe:	69bb      	ldr	r3, [r7, #24]
 8000bc0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000bc2:	69fb      	ldr	r3, [r7, #28]
 8000bc4:	3301      	adds	r3, #1
 8000bc6:	61fb      	str	r3, [r7, #28]
 8000bc8:	69fb      	ldr	r3, [r7, #28]
 8000bca:	2b0f      	cmp	r3, #15
 8000bcc:	f67f ae90 	bls.w	80008f0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000bd0:	bf00      	nop
 8000bd2:	bf00      	nop
 8000bd4:	3724      	adds	r7, #36	; 0x24
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bdc:	4770      	bx	lr
 8000bde:	bf00      	nop
 8000be0:	40023800 	.word	0x40023800
 8000be4:	40013800 	.word	0x40013800
 8000be8:	40020000 	.word	0x40020000
 8000bec:	40020400 	.word	0x40020400
 8000bf0:	40020800 	.word	0x40020800
 8000bf4:	40020c00 	.word	0x40020c00
 8000bf8:	40021000 	.word	0x40021000
 8000bfc:	40021400 	.word	0x40021400
 8000c00:	40021800 	.word	0x40021800
 8000c04:	40021c00 	.word	0x40021c00
 8000c08:	40013c00 	.word	0x40013c00

08000c0c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	b083      	sub	sp, #12
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]
 8000c14:	460b      	mov	r3, r1
 8000c16:	807b      	strh	r3, [r7, #2]
 8000c18:	4613      	mov	r3, r2
 8000c1a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000c1c:	787b      	ldrb	r3, [r7, #1]
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d003      	beq.n	8000c2a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000c22:	887a      	ldrh	r2, [r7, #2]
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000c28:	e003      	b.n	8000c32 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000c2a:	887b      	ldrh	r3, [r7, #2]
 8000c2c:	041a      	lsls	r2, r3, #16
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	619a      	str	r2, [r3, #24]
}
 8000c32:	bf00      	nop
 8000c34:	370c      	adds	r7, #12
 8000c36:	46bd      	mov	sp, r7
 8000c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3c:	4770      	bx	lr

08000c3e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000c3e:	b480      	push	{r7}
 8000c40:	b085      	sub	sp, #20
 8000c42:	af00      	add	r7, sp, #0
 8000c44:	6078      	str	r0, [r7, #4]
 8000c46:	460b      	mov	r3, r1
 8000c48:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	695b      	ldr	r3, [r3, #20]
 8000c4e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000c50:	887a      	ldrh	r2, [r7, #2]
 8000c52:	68fb      	ldr	r3, [r7, #12]
 8000c54:	4013      	ands	r3, r2
 8000c56:	041a      	lsls	r2, r3, #16
 8000c58:	68fb      	ldr	r3, [r7, #12]
 8000c5a:	43d9      	mvns	r1, r3
 8000c5c:	887b      	ldrh	r3, [r7, #2]
 8000c5e:	400b      	ands	r3, r1
 8000c60:	431a      	orrs	r2, r3
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	619a      	str	r2, [r3, #24]
}
 8000c66:	bf00      	nop
 8000c68:	3714      	adds	r7, #20
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c70:	4770      	bx	lr
	...

08000c74 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b084      	sub	sp, #16
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d101      	bne.n	8000c86 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000c82:	2301      	movs	r3, #1
 8000c84:	e12b      	b.n	8000ede <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000c8c:	b2db      	uxtb	r3, r3
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d106      	bne.n	8000ca0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	2200      	movs	r2, #0
 8000c96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8000c9a:	6878      	ldr	r0, [r7, #4]
 8000c9c:	f007 fa0e 	bl	80080bc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	2224      	movs	r2, #36	; 0x24
 8000ca4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	681a      	ldr	r2, [r3, #0]
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	f022 0201 	bic.w	r2, r2, #1
 8000cb6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	681a      	ldr	r2, [r3, #0]
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000cc6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	681a      	ldr	r2, [r3, #0]
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000cd6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8000cd8:	f002 fac4 	bl	8003264 <HAL_RCC_GetPCLK1Freq>
 8000cdc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	685b      	ldr	r3, [r3, #4]
 8000ce2:	4a81      	ldr	r2, [pc, #516]	; (8000ee8 <HAL_I2C_Init+0x274>)
 8000ce4:	4293      	cmp	r3, r2
 8000ce6:	d807      	bhi.n	8000cf8 <HAL_I2C_Init+0x84>
 8000ce8:	68fb      	ldr	r3, [r7, #12]
 8000cea:	4a80      	ldr	r2, [pc, #512]	; (8000eec <HAL_I2C_Init+0x278>)
 8000cec:	4293      	cmp	r3, r2
 8000cee:	bf94      	ite	ls
 8000cf0:	2301      	movls	r3, #1
 8000cf2:	2300      	movhi	r3, #0
 8000cf4:	b2db      	uxtb	r3, r3
 8000cf6:	e006      	b.n	8000d06 <HAL_I2C_Init+0x92>
 8000cf8:	68fb      	ldr	r3, [r7, #12]
 8000cfa:	4a7d      	ldr	r2, [pc, #500]	; (8000ef0 <HAL_I2C_Init+0x27c>)
 8000cfc:	4293      	cmp	r3, r2
 8000cfe:	bf94      	ite	ls
 8000d00:	2301      	movls	r3, #1
 8000d02:	2300      	movhi	r3, #0
 8000d04:	b2db      	uxtb	r3, r3
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d001      	beq.n	8000d0e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8000d0a:	2301      	movs	r3, #1
 8000d0c:	e0e7      	b.n	8000ede <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8000d0e:	68fb      	ldr	r3, [r7, #12]
 8000d10:	4a78      	ldr	r2, [pc, #480]	; (8000ef4 <HAL_I2C_Init+0x280>)
 8000d12:	fba2 2303 	umull	r2, r3, r2, r3
 8000d16:	0c9b      	lsrs	r3, r3, #18
 8000d18:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	685b      	ldr	r3, [r3, #4]
 8000d20:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	68ba      	ldr	r2, [r7, #8]
 8000d2a:	430a      	orrs	r2, r1
 8000d2c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	6a1b      	ldr	r3, [r3, #32]
 8000d34:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	685b      	ldr	r3, [r3, #4]
 8000d3c:	4a6a      	ldr	r2, [pc, #424]	; (8000ee8 <HAL_I2C_Init+0x274>)
 8000d3e:	4293      	cmp	r3, r2
 8000d40:	d802      	bhi.n	8000d48 <HAL_I2C_Init+0xd4>
 8000d42:	68bb      	ldr	r3, [r7, #8]
 8000d44:	3301      	adds	r3, #1
 8000d46:	e009      	b.n	8000d5c <HAL_I2C_Init+0xe8>
 8000d48:	68bb      	ldr	r3, [r7, #8]
 8000d4a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000d4e:	fb02 f303 	mul.w	r3, r2, r3
 8000d52:	4a69      	ldr	r2, [pc, #420]	; (8000ef8 <HAL_I2C_Init+0x284>)
 8000d54:	fba2 2303 	umull	r2, r3, r2, r3
 8000d58:	099b      	lsrs	r3, r3, #6
 8000d5a:	3301      	adds	r3, #1
 8000d5c:	687a      	ldr	r2, [r7, #4]
 8000d5e:	6812      	ldr	r2, [r2, #0]
 8000d60:	430b      	orrs	r3, r1
 8000d62:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	69db      	ldr	r3, [r3, #28]
 8000d6a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8000d6e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	685b      	ldr	r3, [r3, #4]
 8000d76:	495c      	ldr	r1, [pc, #368]	; (8000ee8 <HAL_I2C_Init+0x274>)
 8000d78:	428b      	cmp	r3, r1
 8000d7a:	d819      	bhi.n	8000db0 <HAL_I2C_Init+0x13c>
 8000d7c:	68fb      	ldr	r3, [r7, #12]
 8000d7e:	1e59      	subs	r1, r3, #1
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	685b      	ldr	r3, [r3, #4]
 8000d84:	005b      	lsls	r3, r3, #1
 8000d86:	fbb1 f3f3 	udiv	r3, r1, r3
 8000d8a:	1c59      	adds	r1, r3, #1
 8000d8c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8000d90:	400b      	ands	r3, r1
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d00a      	beq.n	8000dac <HAL_I2C_Init+0x138>
 8000d96:	68fb      	ldr	r3, [r7, #12]
 8000d98:	1e59      	subs	r1, r3, #1
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	685b      	ldr	r3, [r3, #4]
 8000d9e:	005b      	lsls	r3, r3, #1
 8000da0:	fbb1 f3f3 	udiv	r3, r1, r3
 8000da4:	3301      	adds	r3, #1
 8000da6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000daa:	e051      	b.n	8000e50 <HAL_I2C_Init+0x1dc>
 8000dac:	2304      	movs	r3, #4
 8000dae:	e04f      	b.n	8000e50 <HAL_I2C_Init+0x1dc>
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	689b      	ldr	r3, [r3, #8]
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d111      	bne.n	8000ddc <HAL_I2C_Init+0x168>
 8000db8:	68fb      	ldr	r3, [r7, #12]
 8000dba:	1e58      	subs	r0, r3, #1
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	6859      	ldr	r1, [r3, #4]
 8000dc0:	460b      	mov	r3, r1
 8000dc2:	005b      	lsls	r3, r3, #1
 8000dc4:	440b      	add	r3, r1
 8000dc6:	fbb0 f3f3 	udiv	r3, r0, r3
 8000dca:	3301      	adds	r3, #1
 8000dcc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	bf0c      	ite	eq
 8000dd4:	2301      	moveq	r3, #1
 8000dd6:	2300      	movne	r3, #0
 8000dd8:	b2db      	uxtb	r3, r3
 8000dda:	e012      	b.n	8000e02 <HAL_I2C_Init+0x18e>
 8000ddc:	68fb      	ldr	r3, [r7, #12]
 8000dde:	1e58      	subs	r0, r3, #1
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	6859      	ldr	r1, [r3, #4]
 8000de4:	460b      	mov	r3, r1
 8000de6:	009b      	lsls	r3, r3, #2
 8000de8:	440b      	add	r3, r1
 8000dea:	0099      	lsls	r1, r3, #2
 8000dec:	440b      	add	r3, r1
 8000dee:	fbb0 f3f3 	udiv	r3, r0, r3
 8000df2:	3301      	adds	r3, #1
 8000df4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	bf0c      	ite	eq
 8000dfc:	2301      	moveq	r3, #1
 8000dfe:	2300      	movne	r3, #0
 8000e00:	b2db      	uxtb	r3, r3
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d001      	beq.n	8000e0a <HAL_I2C_Init+0x196>
 8000e06:	2301      	movs	r3, #1
 8000e08:	e022      	b.n	8000e50 <HAL_I2C_Init+0x1dc>
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	689b      	ldr	r3, [r3, #8]
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d10e      	bne.n	8000e30 <HAL_I2C_Init+0x1bc>
 8000e12:	68fb      	ldr	r3, [r7, #12]
 8000e14:	1e58      	subs	r0, r3, #1
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	6859      	ldr	r1, [r3, #4]
 8000e1a:	460b      	mov	r3, r1
 8000e1c:	005b      	lsls	r3, r3, #1
 8000e1e:	440b      	add	r3, r1
 8000e20:	fbb0 f3f3 	udiv	r3, r0, r3
 8000e24:	3301      	adds	r3, #1
 8000e26:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000e2a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000e2e:	e00f      	b.n	8000e50 <HAL_I2C_Init+0x1dc>
 8000e30:	68fb      	ldr	r3, [r7, #12]
 8000e32:	1e58      	subs	r0, r3, #1
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	6859      	ldr	r1, [r3, #4]
 8000e38:	460b      	mov	r3, r1
 8000e3a:	009b      	lsls	r3, r3, #2
 8000e3c:	440b      	add	r3, r1
 8000e3e:	0099      	lsls	r1, r3, #2
 8000e40:	440b      	add	r3, r1
 8000e42:	fbb0 f3f3 	udiv	r3, r0, r3
 8000e46:	3301      	adds	r3, #1
 8000e48:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000e4c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000e50:	6879      	ldr	r1, [r7, #4]
 8000e52:	6809      	ldr	r1, [r1, #0]
 8000e54:	4313      	orrs	r3, r2
 8000e56:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	69da      	ldr	r2, [r3, #28]
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	6a1b      	ldr	r3, [r3, #32]
 8000e6a:	431a      	orrs	r2, r3
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	430a      	orrs	r2, r1
 8000e72:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	689b      	ldr	r3, [r3, #8]
 8000e7a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8000e7e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8000e82:	687a      	ldr	r2, [r7, #4]
 8000e84:	6911      	ldr	r1, [r2, #16]
 8000e86:	687a      	ldr	r2, [r7, #4]
 8000e88:	68d2      	ldr	r2, [r2, #12]
 8000e8a:	4311      	orrs	r1, r2
 8000e8c:	687a      	ldr	r2, [r7, #4]
 8000e8e:	6812      	ldr	r2, [r2, #0]
 8000e90:	430b      	orrs	r3, r1
 8000e92:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	68db      	ldr	r3, [r3, #12]
 8000e9a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	695a      	ldr	r2, [r3, #20]
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	699b      	ldr	r3, [r3, #24]
 8000ea6:	431a      	orrs	r2, r3
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	430a      	orrs	r2, r1
 8000eae:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	681a      	ldr	r2, [r3, #0]
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	f042 0201 	orr.w	r2, r2, #1
 8000ebe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	2220      	movs	r2, #32
 8000eca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8000edc:	2300      	movs	r3, #0
}
 8000ede:	4618      	mov	r0, r3
 8000ee0:	3710      	adds	r7, #16
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bd80      	pop	{r7, pc}
 8000ee6:	bf00      	nop
 8000ee8:	000186a0 	.word	0x000186a0
 8000eec:	001e847f 	.word	0x001e847f
 8000ef0:	003d08ff 	.word	0x003d08ff
 8000ef4:	431bde83 	.word	0x431bde83
 8000ef8:	10624dd3 	.word	0x10624dd3

08000efc <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b088      	sub	sp, #32
 8000f00:	af02      	add	r7, sp, #8
 8000f02:	60f8      	str	r0, [r7, #12]
 8000f04:	607a      	str	r2, [r7, #4]
 8000f06:	461a      	mov	r2, r3
 8000f08:	460b      	mov	r3, r1
 8000f0a:	817b      	strh	r3, [r7, #10]
 8000f0c:	4613      	mov	r3, r2
 8000f0e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8000f10:	f7ff fb9e 	bl	8000650 <HAL_GetTick>
 8000f14:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000f16:	68fb      	ldr	r3, [r7, #12]
 8000f18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000f1c:	b2db      	uxtb	r3, r3
 8000f1e:	2b20      	cmp	r3, #32
 8000f20:	f040 80e0 	bne.w	80010e4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8000f24:	697b      	ldr	r3, [r7, #20]
 8000f26:	9300      	str	r3, [sp, #0]
 8000f28:	2319      	movs	r3, #25
 8000f2a:	2201      	movs	r2, #1
 8000f2c:	4970      	ldr	r1, [pc, #448]	; (80010f0 <HAL_I2C_Master_Transmit+0x1f4>)
 8000f2e:	68f8      	ldr	r0, [r7, #12]
 8000f30:	f000 f964 	bl	80011fc <I2C_WaitOnFlagUntilTimeout>
 8000f34:	4603      	mov	r3, r0
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d001      	beq.n	8000f3e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8000f3a:	2302      	movs	r3, #2
 8000f3c:	e0d3      	b.n	80010e6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000f3e:	68fb      	ldr	r3, [r7, #12]
 8000f40:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000f44:	2b01      	cmp	r3, #1
 8000f46:	d101      	bne.n	8000f4c <HAL_I2C_Master_Transmit+0x50>
 8000f48:	2302      	movs	r3, #2
 8000f4a:	e0cc      	b.n	80010e6 <HAL_I2C_Master_Transmit+0x1ea>
 8000f4c:	68fb      	ldr	r3, [r7, #12]
 8000f4e:	2201      	movs	r2, #1
 8000f50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	f003 0301 	and.w	r3, r3, #1
 8000f5e:	2b01      	cmp	r3, #1
 8000f60:	d007      	beq.n	8000f72 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8000f62:	68fb      	ldr	r3, [r7, #12]
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	681a      	ldr	r2, [r3, #0]
 8000f68:	68fb      	ldr	r3, [r7, #12]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	f042 0201 	orr.w	r2, r2, #1
 8000f70:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8000f72:	68fb      	ldr	r3, [r7, #12]
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	681a      	ldr	r2, [r3, #0]
 8000f78:	68fb      	ldr	r3, [r7, #12]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000f80:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8000f82:	68fb      	ldr	r3, [r7, #12]
 8000f84:	2221      	movs	r2, #33	; 0x21
 8000f86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8000f8a:	68fb      	ldr	r3, [r7, #12]
 8000f8c:	2210      	movs	r2, #16
 8000f8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8000f92:	68fb      	ldr	r3, [r7, #12]
 8000f94:	2200      	movs	r2, #0
 8000f96:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8000f98:	68fb      	ldr	r3, [r7, #12]
 8000f9a:	687a      	ldr	r2, [r7, #4]
 8000f9c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8000f9e:	68fb      	ldr	r3, [r7, #12]
 8000fa0:	893a      	ldrh	r2, [r7, #8]
 8000fa2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000fa8:	b29a      	uxth	r2, r3
 8000faa:	68fb      	ldr	r3, [r7, #12]
 8000fac:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8000fae:	68fb      	ldr	r3, [r7, #12]
 8000fb0:	4a50      	ldr	r2, [pc, #320]	; (80010f4 <HAL_I2C_Master_Transmit+0x1f8>)
 8000fb2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8000fb4:	8979      	ldrh	r1, [r7, #10]
 8000fb6:	697b      	ldr	r3, [r7, #20]
 8000fb8:	6a3a      	ldr	r2, [r7, #32]
 8000fba:	68f8      	ldr	r0, [r7, #12]
 8000fbc:	f000 f89c 	bl	80010f8 <I2C_MasterRequestWrite>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d001      	beq.n	8000fca <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8000fc6:	2301      	movs	r3, #1
 8000fc8:	e08d      	b.n	80010e6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8000fca:	2300      	movs	r3, #0
 8000fcc:	613b      	str	r3, [r7, #16]
 8000fce:	68fb      	ldr	r3, [r7, #12]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	695b      	ldr	r3, [r3, #20]
 8000fd4:	613b      	str	r3, [r7, #16]
 8000fd6:	68fb      	ldr	r3, [r7, #12]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	699b      	ldr	r3, [r3, #24]
 8000fdc:	613b      	str	r3, [r7, #16]
 8000fde:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8000fe0:	e066      	b.n	80010b0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000fe2:	697a      	ldr	r2, [r7, #20]
 8000fe4:	6a39      	ldr	r1, [r7, #32]
 8000fe6:	68f8      	ldr	r0, [r7, #12]
 8000fe8:	f000 f9de 	bl	80013a8 <I2C_WaitOnTXEFlagUntilTimeout>
 8000fec:	4603      	mov	r3, r0
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d00d      	beq.n	800100e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8000ff2:	68fb      	ldr	r3, [r7, #12]
 8000ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ff6:	2b04      	cmp	r3, #4
 8000ff8:	d107      	bne.n	800100a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8000ffa:	68fb      	ldr	r3, [r7, #12]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	681a      	ldr	r2, [r3, #0]
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001008:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800100a:	2301      	movs	r3, #1
 800100c:	e06b      	b.n	80010e6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800100e:	68fb      	ldr	r3, [r7, #12]
 8001010:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001012:	781a      	ldrb	r2, [r3, #0]
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800101a:	68fb      	ldr	r3, [r7, #12]
 800101c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800101e:	1c5a      	adds	r2, r3, #1
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001028:	b29b      	uxth	r3, r3
 800102a:	3b01      	subs	r3, #1
 800102c:	b29a      	uxth	r2, r3
 800102e:	68fb      	ldr	r3, [r7, #12]
 8001030:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001036:	3b01      	subs	r3, #1
 8001038:	b29a      	uxth	r2, r3
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800103e:	68fb      	ldr	r3, [r7, #12]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	695b      	ldr	r3, [r3, #20]
 8001044:	f003 0304 	and.w	r3, r3, #4
 8001048:	2b04      	cmp	r3, #4
 800104a:	d11b      	bne.n	8001084 <HAL_I2C_Master_Transmit+0x188>
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001050:	2b00      	cmp	r3, #0
 8001052:	d017      	beq.n	8001084 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001058:	781a      	ldrb	r2, [r3, #0]
 800105a:	68fb      	ldr	r3, [r7, #12]
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001064:	1c5a      	adds	r2, r3, #1
 8001066:	68fb      	ldr	r3, [r7, #12]
 8001068:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800106a:	68fb      	ldr	r3, [r7, #12]
 800106c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800106e:	b29b      	uxth	r3, r3
 8001070:	3b01      	subs	r3, #1
 8001072:	b29a      	uxth	r2, r3
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800107c:	3b01      	subs	r3, #1
 800107e:	b29a      	uxth	r2, r3
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001084:	697a      	ldr	r2, [r7, #20]
 8001086:	6a39      	ldr	r1, [r7, #32]
 8001088:	68f8      	ldr	r0, [r7, #12]
 800108a:	f000 f9ce 	bl	800142a <I2C_WaitOnBTFFlagUntilTimeout>
 800108e:	4603      	mov	r3, r0
 8001090:	2b00      	cmp	r3, #0
 8001092:	d00d      	beq.n	80010b0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001098:	2b04      	cmp	r3, #4
 800109a:	d107      	bne.n	80010ac <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	681a      	ldr	r2, [r3, #0]
 80010a2:	68fb      	ldr	r3, [r7, #12]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80010aa:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80010ac:	2301      	movs	r3, #1
 80010ae:	e01a      	b.n	80010e6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d194      	bne.n	8000fe2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	681a      	ldr	r2, [r3, #0]
 80010be:	68fb      	ldr	r3, [r7, #12]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80010c6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	2220      	movs	r2, #32
 80010cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	2200      	movs	r2, #0
 80010d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	2200      	movs	r2, #0
 80010dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80010e0:	2300      	movs	r3, #0
 80010e2:	e000      	b.n	80010e6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80010e4:	2302      	movs	r3, #2
  }
}
 80010e6:	4618      	mov	r0, r3
 80010e8:	3718      	adds	r7, #24
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bd80      	pop	{r7, pc}
 80010ee:	bf00      	nop
 80010f0:	00100002 	.word	0x00100002
 80010f4:	ffff0000 	.word	0xffff0000

080010f8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b088      	sub	sp, #32
 80010fc:	af02      	add	r7, sp, #8
 80010fe:	60f8      	str	r0, [r7, #12]
 8001100:	607a      	str	r2, [r7, #4]
 8001102:	603b      	str	r3, [r7, #0]
 8001104:	460b      	mov	r3, r1
 8001106:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800110c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800110e:	697b      	ldr	r3, [r7, #20]
 8001110:	2b08      	cmp	r3, #8
 8001112:	d006      	beq.n	8001122 <I2C_MasterRequestWrite+0x2a>
 8001114:	697b      	ldr	r3, [r7, #20]
 8001116:	2b01      	cmp	r3, #1
 8001118:	d003      	beq.n	8001122 <I2C_MasterRequestWrite+0x2a>
 800111a:	697b      	ldr	r3, [r7, #20]
 800111c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001120:	d108      	bne.n	8001134 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	681a      	ldr	r2, [r3, #0]
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001130:	601a      	str	r2, [r3, #0]
 8001132:	e00b      	b.n	800114c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001138:	2b12      	cmp	r3, #18
 800113a:	d107      	bne.n	800114c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	681a      	ldr	r2, [r3, #0]
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800114a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800114c:	683b      	ldr	r3, [r7, #0]
 800114e:	9300      	str	r3, [sp, #0]
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	2200      	movs	r2, #0
 8001154:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001158:	68f8      	ldr	r0, [r7, #12]
 800115a:	f000 f84f 	bl	80011fc <I2C_WaitOnFlagUntilTimeout>
 800115e:	4603      	mov	r3, r0
 8001160:	2b00      	cmp	r3, #0
 8001162:	d00d      	beq.n	8001180 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800116e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001172:	d103      	bne.n	800117c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	f44f 7200 	mov.w	r2, #512	; 0x200
 800117a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800117c:	2303      	movs	r3, #3
 800117e:	e035      	b.n	80011ec <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	691b      	ldr	r3, [r3, #16]
 8001184:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001188:	d108      	bne.n	800119c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800118a:	897b      	ldrh	r3, [r7, #10]
 800118c:	b2db      	uxtb	r3, r3
 800118e:	461a      	mov	r2, r3
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001198:	611a      	str	r2, [r3, #16]
 800119a:	e01b      	b.n	80011d4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800119c:	897b      	ldrh	r3, [r7, #10]
 800119e:	11db      	asrs	r3, r3, #7
 80011a0:	b2db      	uxtb	r3, r3
 80011a2:	f003 0306 	and.w	r3, r3, #6
 80011a6:	b2db      	uxtb	r3, r3
 80011a8:	f063 030f 	orn	r3, r3, #15
 80011ac:	b2da      	uxtb	r2, r3
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80011b4:	683b      	ldr	r3, [r7, #0]
 80011b6:	687a      	ldr	r2, [r7, #4]
 80011b8:	490e      	ldr	r1, [pc, #56]	; (80011f4 <I2C_MasterRequestWrite+0xfc>)
 80011ba:	68f8      	ldr	r0, [r7, #12]
 80011bc:	f000 f875 	bl	80012aa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80011c0:	4603      	mov	r3, r0
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d001      	beq.n	80011ca <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80011c6:	2301      	movs	r3, #1
 80011c8:	e010      	b.n	80011ec <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80011ca:	897b      	ldrh	r3, [r7, #10]
 80011cc:	b2da      	uxtb	r2, r3
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80011d4:	683b      	ldr	r3, [r7, #0]
 80011d6:	687a      	ldr	r2, [r7, #4]
 80011d8:	4907      	ldr	r1, [pc, #28]	; (80011f8 <I2C_MasterRequestWrite+0x100>)
 80011da:	68f8      	ldr	r0, [r7, #12]
 80011dc:	f000 f865 	bl	80012aa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80011e0:	4603      	mov	r3, r0
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d001      	beq.n	80011ea <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80011e6:	2301      	movs	r3, #1
 80011e8:	e000      	b.n	80011ec <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80011ea:	2300      	movs	r3, #0
}
 80011ec:	4618      	mov	r0, r3
 80011ee:	3718      	adds	r7, #24
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bd80      	pop	{r7, pc}
 80011f4:	00010008 	.word	0x00010008
 80011f8:	00010002 	.word	0x00010002

080011fc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b084      	sub	sp, #16
 8001200:	af00      	add	r7, sp, #0
 8001202:	60f8      	str	r0, [r7, #12]
 8001204:	60b9      	str	r1, [r7, #8]
 8001206:	603b      	str	r3, [r7, #0]
 8001208:	4613      	mov	r3, r2
 800120a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800120c:	e025      	b.n	800125a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800120e:	683b      	ldr	r3, [r7, #0]
 8001210:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001214:	d021      	beq.n	800125a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001216:	f7ff fa1b 	bl	8000650 <HAL_GetTick>
 800121a:	4602      	mov	r2, r0
 800121c:	69bb      	ldr	r3, [r7, #24]
 800121e:	1ad3      	subs	r3, r2, r3
 8001220:	683a      	ldr	r2, [r7, #0]
 8001222:	429a      	cmp	r2, r3
 8001224:	d302      	bcc.n	800122c <I2C_WaitOnFlagUntilTimeout+0x30>
 8001226:	683b      	ldr	r3, [r7, #0]
 8001228:	2b00      	cmp	r3, #0
 800122a:	d116      	bne.n	800125a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	2200      	movs	r2, #0
 8001230:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	2220      	movs	r2, #32
 8001236:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	2200      	movs	r2, #0
 800123e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001246:	f043 0220 	orr.w	r2, r3, #32
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	2200      	movs	r2, #0
 8001252:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001256:	2301      	movs	r3, #1
 8001258:	e023      	b.n	80012a2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800125a:	68bb      	ldr	r3, [r7, #8]
 800125c:	0c1b      	lsrs	r3, r3, #16
 800125e:	b2db      	uxtb	r3, r3
 8001260:	2b01      	cmp	r3, #1
 8001262:	d10d      	bne.n	8001280 <I2C_WaitOnFlagUntilTimeout+0x84>
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	695b      	ldr	r3, [r3, #20]
 800126a:	43da      	mvns	r2, r3
 800126c:	68bb      	ldr	r3, [r7, #8]
 800126e:	4013      	ands	r3, r2
 8001270:	b29b      	uxth	r3, r3
 8001272:	2b00      	cmp	r3, #0
 8001274:	bf0c      	ite	eq
 8001276:	2301      	moveq	r3, #1
 8001278:	2300      	movne	r3, #0
 800127a:	b2db      	uxtb	r3, r3
 800127c:	461a      	mov	r2, r3
 800127e:	e00c      	b.n	800129a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	699b      	ldr	r3, [r3, #24]
 8001286:	43da      	mvns	r2, r3
 8001288:	68bb      	ldr	r3, [r7, #8]
 800128a:	4013      	ands	r3, r2
 800128c:	b29b      	uxth	r3, r3
 800128e:	2b00      	cmp	r3, #0
 8001290:	bf0c      	ite	eq
 8001292:	2301      	moveq	r3, #1
 8001294:	2300      	movne	r3, #0
 8001296:	b2db      	uxtb	r3, r3
 8001298:	461a      	mov	r2, r3
 800129a:	79fb      	ldrb	r3, [r7, #7]
 800129c:	429a      	cmp	r2, r3
 800129e:	d0b6      	beq.n	800120e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80012a0:	2300      	movs	r3, #0
}
 80012a2:	4618      	mov	r0, r3
 80012a4:	3710      	adds	r7, #16
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}

080012aa <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80012aa:	b580      	push	{r7, lr}
 80012ac:	b084      	sub	sp, #16
 80012ae:	af00      	add	r7, sp, #0
 80012b0:	60f8      	str	r0, [r7, #12]
 80012b2:	60b9      	str	r1, [r7, #8]
 80012b4:	607a      	str	r2, [r7, #4]
 80012b6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80012b8:	e051      	b.n	800135e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	695b      	ldr	r3, [r3, #20]
 80012c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80012c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80012c8:	d123      	bne.n	8001312 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	681a      	ldr	r2, [r3, #0]
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80012d8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80012e2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	2200      	movs	r2, #0
 80012e8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	2220      	movs	r2, #32
 80012ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	2200      	movs	r2, #0
 80012f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012fe:	f043 0204 	orr.w	r2, r3, #4
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	2200      	movs	r2, #0
 800130a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800130e:	2301      	movs	r3, #1
 8001310:	e046      	b.n	80013a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001318:	d021      	beq.n	800135e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800131a:	f7ff f999 	bl	8000650 <HAL_GetTick>
 800131e:	4602      	mov	r2, r0
 8001320:	683b      	ldr	r3, [r7, #0]
 8001322:	1ad3      	subs	r3, r2, r3
 8001324:	687a      	ldr	r2, [r7, #4]
 8001326:	429a      	cmp	r2, r3
 8001328:	d302      	bcc.n	8001330 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	2b00      	cmp	r3, #0
 800132e:	d116      	bne.n	800135e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	2200      	movs	r2, #0
 8001334:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	2220      	movs	r2, #32
 800133a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	2200      	movs	r2, #0
 8001342:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800134a:	f043 0220 	orr.w	r2, r3, #32
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	2200      	movs	r2, #0
 8001356:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800135a:	2301      	movs	r3, #1
 800135c:	e020      	b.n	80013a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800135e:	68bb      	ldr	r3, [r7, #8]
 8001360:	0c1b      	lsrs	r3, r3, #16
 8001362:	b2db      	uxtb	r3, r3
 8001364:	2b01      	cmp	r3, #1
 8001366:	d10c      	bne.n	8001382 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	695b      	ldr	r3, [r3, #20]
 800136e:	43da      	mvns	r2, r3
 8001370:	68bb      	ldr	r3, [r7, #8]
 8001372:	4013      	ands	r3, r2
 8001374:	b29b      	uxth	r3, r3
 8001376:	2b00      	cmp	r3, #0
 8001378:	bf14      	ite	ne
 800137a:	2301      	movne	r3, #1
 800137c:	2300      	moveq	r3, #0
 800137e:	b2db      	uxtb	r3, r3
 8001380:	e00b      	b.n	800139a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8001382:	68fb      	ldr	r3, [r7, #12]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	699b      	ldr	r3, [r3, #24]
 8001388:	43da      	mvns	r2, r3
 800138a:	68bb      	ldr	r3, [r7, #8]
 800138c:	4013      	ands	r3, r2
 800138e:	b29b      	uxth	r3, r3
 8001390:	2b00      	cmp	r3, #0
 8001392:	bf14      	ite	ne
 8001394:	2301      	movne	r3, #1
 8001396:	2300      	moveq	r3, #0
 8001398:	b2db      	uxtb	r3, r3
 800139a:	2b00      	cmp	r3, #0
 800139c:	d18d      	bne.n	80012ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800139e:	2300      	movs	r3, #0
}
 80013a0:	4618      	mov	r0, r3
 80013a2:	3710      	adds	r7, #16
 80013a4:	46bd      	mov	sp, r7
 80013a6:	bd80      	pop	{r7, pc}

080013a8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b084      	sub	sp, #16
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	60f8      	str	r0, [r7, #12]
 80013b0:	60b9      	str	r1, [r7, #8]
 80013b2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80013b4:	e02d      	b.n	8001412 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80013b6:	68f8      	ldr	r0, [r7, #12]
 80013b8:	f000 f878 	bl	80014ac <I2C_IsAcknowledgeFailed>
 80013bc:	4603      	mov	r3, r0
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d001      	beq.n	80013c6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80013c2:	2301      	movs	r3, #1
 80013c4:	e02d      	b.n	8001422 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80013c6:	68bb      	ldr	r3, [r7, #8]
 80013c8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80013cc:	d021      	beq.n	8001412 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80013ce:	f7ff f93f 	bl	8000650 <HAL_GetTick>
 80013d2:	4602      	mov	r2, r0
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	1ad3      	subs	r3, r2, r3
 80013d8:	68ba      	ldr	r2, [r7, #8]
 80013da:	429a      	cmp	r2, r3
 80013dc:	d302      	bcc.n	80013e4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80013de:	68bb      	ldr	r3, [r7, #8]
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d116      	bne.n	8001412 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	2200      	movs	r2, #0
 80013e8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	2220      	movs	r2, #32
 80013ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	2200      	movs	r2, #0
 80013f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013fe:	f043 0220 	orr.w	r2, r3, #32
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	2200      	movs	r2, #0
 800140a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800140e:	2301      	movs	r3, #1
 8001410:	e007      	b.n	8001422 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	695b      	ldr	r3, [r3, #20]
 8001418:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800141c:	2b80      	cmp	r3, #128	; 0x80
 800141e:	d1ca      	bne.n	80013b6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001420:	2300      	movs	r3, #0
}
 8001422:	4618      	mov	r0, r3
 8001424:	3710      	adds	r7, #16
 8001426:	46bd      	mov	sp, r7
 8001428:	bd80      	pop	{r7, pc}

0800142a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800142a:	b580      	push	{r7, lr}
 800142c:	b084      	sub	sp, #16
 800142e:	af00      	add	r7, sp, #0
 8001430:	60f8      	str	r0, [r7, #12]
 8001432:	60b9      	str	r1, [r7, #8]
 8001434:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001436:	e02d      	b.n	8001494 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001438:	68f8      	ldr	r0, [r7, #12]
 800143a:	f000 f837 	bl	80014ac <I2C_IsAcknowledgeFailed>
 800143e:	4603      	mov	r3, r0
 8001440:	2b00      	cmp	r3, #0
 8001442:	d001      	beq.n	8001448 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001444:	2301      	movs	r3, #1
 8001446:	e02d      	b.n	80014a4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001448:	68bb      	ldr	r3, [r7, #8]
 800144a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800144e:	d021      	beq.n	8001494 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001450:	f7ff f8fe 	bl	8000650 <HAL_GetTick>
 8001454:	4602      	mov	r2, r0
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	1ad3      	subs	r3, r2, r3
 800145a:	68ba      	ldr	r2, [r7, #8]
 800145c:	429a      	cmp	r2, r3
 800145e:	d302      	bcc.n	8001466 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8001460:	68bb      	ldr	r3, [r7, #8]
 8001462:	2b00      	cmp	r3, #0
 8001464:	d116      	bne.n	8001494 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	2200      	movs	r2, #0
 800146a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	2220      	movs	r2, #32
 8001470:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	2200      	movs	r2, #0
 8001478:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001480:	f043 0220 	orr.w	r2, r3, #32
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	2200      	movs	r2, #0
 800148c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001490:	2301      	movs	r3, #1
 8001492:	e007      	b.n	80014a4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	695b      	ldr	r3, [r3, #20]
 800149a:	f003 0304 	and.w	r3, r3, #4
 800149e:	2b04      	cmp	r3, #4
 80014a0:	d1ca      	bne.n	8001438 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80014a2:	2300      	movs	r3, #0
}
 80014a4:	4618      	mov	r0, r3
 80014a6:	3710      	adds	r7, #16
 80014a8:	46bd      	mov	sp, r7
 80014aa:	bd80      	pop	{r7, pc}

080014ac <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80014ac:	b480      	push	{r7}
 80014ae:	b083      	sub	sp, #12
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	695b      	ldr	r3, [r3, #20]
 80014ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80014be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80014c2:	d11b      	bne.n	80014fc <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80014cc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	2200      	movs	r2, #0
 80014d2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	2220      	movs	r2, #32
 80014d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	2200      	movs	r2, #0
 80014e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014e8:	f043 0204 	orr.w	r2, r3, #4
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	2200      	movs	r2, #0
 80014f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80014f8:	2301      	movs	r3, #1
 80014fa:	e000      	b.n	80014fe <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80014fc:	2300      	movs	r3, #0
}
 80014fe:	4618      	mov	r0, r3
 8001500:	370c      	adds	r7, #12
 8001502:	46bd      	mov	sp, r7
 8001504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001508:	4770      	bx	lr

0800150a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800150a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800150c:	b08f      	sub	sp, #60	; 0x3c
 800150e:	af0a      	add	r7, sp, #40	; 0x28
 8001510:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	2b00      	cmp	r3, #0
 8001516:	d101      	bne.n	800151c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001518:	2301      	movs	r3, #1
 800151a:	e10f      	b.n	800173c <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8001528:	b2db      	uxtb	r3, r3
 800152a:	2b00      	cmp	r3, #0
 800152c:	d106      	bne.n	800153c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	2200      	movs	r2, #0
 8001532:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001536:	6878      	ldr	r0, [r7, #4]
 8001538:	f007 f85e 	bl	80085f8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	2203      	movs	r2, #3
 8001540:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001544:	68bb      	ldr	r3, [r7, #8]
 8001546:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001548:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800154c:	2b00      	cmp	r3, #0
 800154e:	d102      	bne.n	8001556 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	2200      	movs	r2, #0
 8001554:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	4618      	mov	r0, r3
 800155c:	f002 fc37 	bl	8003dce <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	603b      	str	r3, [r7, #0]
 8001566:	687e      	ldr	r6, [r7, #4]
 8001568:	466d      	mov	r5, sp
 800156a:	f106 0410 	add.w	r4, r6, #16
 800156e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001570:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001572:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001574:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001576:	e894 0003 	ldmia.w	r4, {r0, r1}
 800157a:	e885 0003 	stmia.w	r5, {r0, r1}
 800157e:	1d33      	adds	r3, r6, #4
 8001580:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001582:	6838      	ldr	r0, [r7, #0]
 8001584:	f002 fb0e 	bl	8003ba4 <USB_CoreInit>
 8001588:	4603      	mov	r3, r0
 800158a:	2b00      	cmp	r3, #0
 800158c:	d005      	beq.n	800159a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	2202      	movs	r2, #2
 8001592:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001596:	2301      	movs	r3, #1
 8001598:	e0d0      	b.n	800173c <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	2100      	movs	r1, #0
 80015a0:	4618      	mov	r0, r3
 80015a2:	f002 fc25 	bl	8003df0 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80015a6:	2300      	movs	r3, #0
 80015a8:	73fb      	strb	r3, [r7, #15]
 80015aa:	e04a      	b.n	8001642 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80015ac:	7bfa      	ldrb	r2, [r7, #15]
 80015ae:	6879      	ldr	r1, [r7, #4]
 80015b0:	4613      	mov	r3, r2
 80015b2:	00db      	lsls	r3, r3, #3
 80015b4:	4413      	add	r3, r2
 80015b6:	009b      	lsls	r3, r3, #2
 80015b8:	440b      	add	r3, r1
 80015ba:	333d      	adds	r3, #61	; 0x3d
 80015bc:	2201      	movs	r2, #1
 80015be:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80015c0:	7bfa      	ldrb	r2, [r7, #15]
 80015c2:	6879      	ldr	r1, [r7, #4]
 80015c4:	4613      	mov	r3, r2
 80015c6:	00db      	lsls	r3, r3, #3
 80015c8:	4413      	add	r3, r2
 80015ca:	009b      	lsls	r3, r3, #2
 80015cc:	440b      	add	r3, r1
 80015ce:	333c      	adds	r3, #60	; 0x3c
 80015d0:	7bfa      	ldrb	r2, [r7, #15]
 80015d2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80015d4:	7bfa      	ldrb	r2, [r7, #15]
 80015d6:	7bfb      	ldrb	r3, [r7, #15]
 80015d8:	b298      	uxth	r0, r3
 80015da:	6879      	ldr	r1, [r7, #4]
 80015dc:	4613      	mov	r3, r2
 80015de:	00db      	lsls	r3, r3, #3
 80015e0:	4413      	add	r3, r2
 80015e2:	009b      	lsls	r3, r3, #2
 80015e4:	440b      	add	r3, r1
 80015e6:	3344      	adds	r3, #68	; 0x44
 80015e8:	4602      	mov	r2, r0
 80015ea:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80015ec:	7bfa      	ldrb	r2, [r7, #15]
 80015ee:	6879      	ldr	r1, [r7, #4]
 80015f0:	4613      	mov	r3, r2
 80015f2:	00db      	lsls	r3, r3, #3
 80015f4:	4413      	add	r3, r2
 80015f6:	009b      	lsls	r3, r3, #2
 80015f8:	440b      	add	r3, r1
 80015fa:	3340      	adds	r3, #64	; 0x40
 80015fc:	2200      	movs	r2, #0
 80015fe:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001600:	7bfa      	ldrb	r2, [r7, #15]
 8001602:	6879      	ldr	r1, [r7, #4]
 8001604:	4613      	mov	r3, r2
 8001606:	00db      	lsls	r3, r3, #3
 8001608:	4413      	add	r3, r2
 800160a:	009b      	lsls	r3, r3, #2
 800160c:	440b      	add	r3, r1
 800160e:	3348      	adds	r3, #72	; 0x48
 8001610:	2200      	movs	r2, #0
 8001612:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001614:	7bfa      	ldrb	r2, [r7, #15]
 8001616:	6879      	ldr	r1, [r7, #4]
 8001618:	4613      	mov	r3, r2
 800161a:	00db      	lsls	r3, r3, #3
 800161c:	4413      	add	r3, r2
 800161e:	009b      	lsls	r3, r3, #2
 8001620:	440b      	add	r3, r1
 8001622:	334c      	adds	r3, #76	; 0x4c
 8001624:	2200      	movs	r2, #0
 8001626:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001628:	7bfa      	ldrb	r2, [r7, #15]
 800162a:	6879      	ldr	r1, [r7, #4]
 800162c:	4613      	mov	r3, r2
 800162e:	00db      	lsls	r3, r3, #3
 8001630:	4413      	add	r3, r2
 8001632:	009b      	lsls	r3, r3, #2
 8001634:	440b      	add	r3, r1
 8001636:	3354      	adds	r3, #84	; 0x54
 8001638:	2200      	movs	r2, #0
 800163a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800163c:	7bfb      	ldrb	r3, [r7, #15]
 800163e:	3301      	adds	r3, #1
 8001640:	73fb      	strb	r3, [r7, #15]
 8001642:	7bfa      	ldrb	r2, [r7, #15]
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	685b      	ldr	r3, [r3, #4]
 8001648:	429a      	cmp	r2, r3
 800164a:	d3af      	bcc.n	80015ac <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800164c:	2300      	movs	r3, #0
 800164e:	73fb      	strb	r3, [r7, #15]
 8001650:	e044      	b.n	80016dc <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001652:	7bfa      	ldrb	r2, [r7, #15]
 8001654:	6879      	ldr	r1, [r7, #4]
 8001656:	4613      	mov	r3, r2
 8001658:	00db      	lsls	r3, r3, #3
 800165a:	4413      	add	r3, r2
 800165c:	009b      	lsls	r3, r3, #2
 800165e:	440b      	add	r3, r1
 8001660:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8001664:	2200      	movs	r2, #0
 8001666:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001668:	7bfa      	ldrb	r2, [r7, #15]
 800166a:	6879      	ldr	r1, [r7, #4]
 800166c:	4613      	mov	r3, r2
 800166e:	00db      	lsls	r3, r3, #3
 8001670:	4413      	add	r3, r2
 8001672:	009b      	lsls	r3, r3, #2
 8001674:	440b      	add	r3, r1
 8001676:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800167a:	7bfa      	ldrb	r2, [r7, #15]
 800167c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800167e:	7bfa      	ldrb	r2, [r7, #15]
 8001680:	6879      	ldr	r1, [r7, #4]
 8001682:	4613      	mov	r3, r2
 8001684:	00db      	lsls	r3, r3, #3
 8001686:	4413      	add	r3, r2
 8001688:	009b      	lsls	r3, r3, #2
 800168a:	440b      	add	r3, r1
 800168c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001690:	2200      	movs	r2, #0
 8001692:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001694:	7bfa      	ldrb	r2, [r7, #15]
 8001696:	6879      	ldr	r1, [r7, #4]
 8001698:	4613      	mov	r3, r2
 800169a:	00db      	lsls	r3, r3, #3
 800169c:	4413      	add	r3, r2
 800169e:	009b      	lsls	r3, r3, #2
 80016a0:	440b      	add	r3, r1
 80016a2:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80016a6:	2200      	movs	r2, #0
 80016a8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80016aa:	7bfa      	ldrb	r2, [r7, #15]
 80016ac:	6879      	ldr	r1, [r7, #4]
 80016ae:	4613      	mov	r3, r2
 80016b0:	00db      	lsls	r3, r3, #3
 80016b2:	4413      	add	r3, r2
 80016b4:	009b      	lsls	r3, r3, #2
 80016b6:	440b      	add	r3, r1
 80016b8:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80016bc:	2200      	movs	r2, #0
 80016be:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80016c0:	7bfa      	ldrb	r2, [r7, #15]
 80016c2:	6879      	ldr	r1, [r7, #4]
 80016c4:	4613      	mov	r3, r2
 80016c6:	00db      	lsls	r3, r3, #3
 80016c8:	4413      	add	r3, r2
 80016ca:	009b      	lsls	r3, r3, #2
 80016cc:	440b      	add	r3, r1
 80016ce:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80016d2:	2200      	movs	r2, #0
 80016d4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80016d6:	7bfb      	ldrb	r3, [r7, #15]
 80016d8:	3301      	adds	r3, #1
 80016da:	73fb      	strb	r3, [r7, #15]
 80016dc:	7bfa      	ldrb	r2, [r7, #15]
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	685b      	ldr	r3, [r3, #4]
 80016e2:	429a      	cmp	r2, r3
 80016e4:	d3b5      	bcc.n	8001652 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	603b      	str	r3, [r7, #0]
 80016ec:	687e      	ldr	r6, [r7, #4]
 80016ee:	466d      	mov	r5, sp
 80016f0:	f106 0410 	add.w	r4, r6, #16
 80016f4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80016f6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80016f8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80016fa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80016fc:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001700:	e885 0003 	stmia.w	r5, {r0, r1}
 8001704:	1d33      	adds	r3, r6, #4
 8001706:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001708:	6838      	ldr	r0, [r7, #0]
 800170a:	f002 fbbd 	bl	8003e88 <USB_DevInit>
 800170e:	4603      	mov	r3, r0
 8001710:	2b00      	cmp	r3, #0
 8001712:	d005      	beq.n	8001720 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	2202      	movs	r2, #2
 8001718:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800171c:	2301      	movs	r3, #1
 800171e:	e00d      	b.n	800173c <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	2200      	movs	r2, #0
 8001724:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	2201      	movs	r2, #1
 800172c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	4618      	mov	r0, r3
 8001736:	f003 fd0c 	bl	8005152 <USB_DevDisconnect>

  return HAL_OK;
 800173a:	2300      	movs	r3, #0
}
 800173c:	4618      	mov	r0, r3
 800173e:	3714      	adds	r7, #20
 8001740:	46bd      	mov	sp, r7
 8001742:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001744 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b084      	sub	sp, #16
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001758:	2b01      	cmp	r3, #1
 800175a:	d101      	bne.n	8001760 <HAL_PCD_Start+0x1c>
 800175c:	2302      	movs	r3, #2
 800175e:	e020      	b.n	80017a2 <HAL_PCD_Start+0x5e>
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	2201      	movs	r2, #1
 8001764:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800176c:	2b01      	cmp	r3, #1
 800176e:	d109      	bne.n	8001784 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001774:	2b01      	cmp	r3, #1
 8001776:	d005      	beq.n	8001784 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800177c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	4618      	mov	r0, r3
 800178a:	f002 fb0f 	bl	8003dac <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	4618      	mov	r0, r3
 8001794:	f003 fcbc 	bl	8005110 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	2200      	movs	r2, #0
 800179c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80017a0:	2300      	movs	r3, #0
}
 80017a2:	4618      	mov	r0, r3
 80017a4:	3710      	adds	r7, #16
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bd80      	pop	{r7, pc}

080017aa <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80017aa:	b590      	push	{r4, r7, lr}
 80017ac:	b08d      	sub	sp, #52	; 0x34
 80017ae:	af00      	add	r7, sp, #0
 80017b0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80017b8:	6a3b      	ldr	r3, [r7, #32]
 80017ba:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	4618      	mov	r0, r3
 80017c2:	f003 fd7a 	bl	80052ba <USB_GetMode>
 80017c6:	4603      	mov	r3, r0
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	f040 848a 	bne.w	80020e2 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	4618      	mov	r0, r3
 80017d4:	f003 fcde 	bl	8005194 <USB_ReadInterrupts>
 80017d8:	4603      	mov	r3, r0
 80017da:	2b00      	cmp	r3, #0
 80017dc:	f000 8480 	beq.w	80020e0 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80017e0:	69fb      	ldr	r3, [r7, #28]
 80017e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80017e6:	689b      	ldr	r3, [r3, #8]
 80017e8:	0a1b      	lsrs	r3, r3, #8
 80017ea:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	4618      	mov	r0, r3
 80017fa:	f003 fccb 	bl	8005194 <USB_ReadInterrupts>
 80017fe:	4603      	mov	r3, r0
 8001800:	f003 0302 	and.w	r3, r3, #2
 8001804:	2b02      	cmp	r3, #2
 8001806:	d107      	bne.n	8001818 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	695a      	ldr	r2, [r3, #20]
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f002 0202 	and.w	r2, r2, #2
 8001816:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	4618      	mov	r0, r3
 800181e:	f003 fcb9 	bl	8005194 <USB_ReadInterrupts>
 8001822:	4603      	mov	r3, r0
 8001824:	f003 0310 	and.w	r3, r3, #16
 8001828:	2b10      	cmp	r3, #16
 800182a:	d161      	bne.n	80018f0 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	699a      	ldr	r2, [r3, #24]
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f022 0210 	bic.w	r2, r2, #16
 800183a:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800183c:	6a3b      	ldr	r3, [r7, #32]
 800183e:	6a1b      	ldr	r3, [r3, #32]
 8001840:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8001842:	69bb      	ldr	r3, [r7, #24]
 8001844:	f003 020f 	and.w	r2, r3, #15
 8001848:	4613      	mov	r3, r2
 800184a:	00db      	lsls	r3, r3, #3
 800184c:	4413      	add	r3, r2
 800184e:	009b      	lsls	r3, r3, #2
 8001850:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001854:	687a      	ldr	r2, [r7, #4]
 8001856:	4413      	add	r3, r2
 8001858:	3304      	adds	r3, #4
 800185a:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800185c:	69bb      	ldr	r3, [r7, #24]
 800185e:	0c5b      	lsrs	r3, r3, #17
 8001860:	f003 030f 	and.w	r3, r3, #15
 8001864:	2b02      	cmp	r3, #2
 8001866:	d124      	bne.n	80018b2 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001868:	69ba      	ldr	r2, [r7, #24]
 800186a:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800186e:	4013      	ands	r3, r2
 8001870:	2b00      	cmp	r3, #0
 8001872:	d035      	beq.n	80018e0 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001874:	697b      	ldr	r3, [r7, #20]
 8001876:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001878:	69bb      	ldr	r3, [r7, #24]
 800187a:	091b      	lsrs	r3, r3, #4
 800187c:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800187e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001882:	b29b      	uxth	r3, r3
 8001884:	461a      	mov	r2, r3
 8001886:	6a38      	ldr	r0, [r7, #32]
 8001888:	f003 faf0 	bl	8004e6c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800188c:	697b      	ldr	r3, [r7, #20]
 800188e:	691a      	ldr	r2, [r3, #16]
 8001890:	69bb      	ldr	r3, [r7, #24]
 8001892:	091b      	lsrs	r3, r3, #4
 8001894:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001898:	441a      	add	r2, r3
 800189a:	697b      	ldr	r3, [r7, #20]
 800189c:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800189e:	697b      	ldr	r3, [r7, #20]
 80018a0:	6a1a      	ldr	r2, [r3, #32]
 80018a2:	69bb      	ldr	r3, [r7, #24]
 80018a4:	091b      	lsrs	r3, r3, #4
 80018a6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80018aa:	441a      	add	r2, r3
 80018ac:	697b      	ldr	r3, [r7, #20]
 80018ae:	621a      	str	r2, [r3, #32]
 80018b0:	e016      	b.n	80018e0 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80018b2:	69bb      	ldr	r3, [r7, #24]
 80018b4:	0c5b      	lsrs	r3, r3, #17
 80018b6:	f003 030f 	and.w	r3, r3, #15
 80018ba:	2b06      	cmp	r3, #6
 80018bc:	d110      	bne.n	80018e0 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80018c4:	2208      	movs	r2, #8
 80018c6:	4619      	mov	r1, r3
 80018c8:	6a38      	ldr	r0, [r7, #32]
 80018ca:	f003 facf 	bl	8004e6c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80018ce:	697b      	ldr	r3, [r7, #20]
 80018d0:	6a1a      	ldr	r2, [r3, #32]
 80018d2:	69bb      	ldr	r3, [r7, #24]
 80018d4:	091b      	lsrs	r3, r3, #4
 80018d6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80018da:	441a      	add	r2, r3
 80018dc:	697b      	ldr	r3, [r7, #20]
 80018de:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	699a      	ldr	r2, [r3, #24]
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f042 0210 	orr.w	r2, r2, #16
 80018ee:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	4618      	mov	r0, r3
 80018f6:	f003 fc4d 	bl	8005194 <USB_ReadInterrupts>
 80018fa:	4603      	mov	r3, r0
 80018fc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001900:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001904:	f040 80a7 	bne.w	8001a56 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8001908:	2300      	movs	r3, #0
 800190a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	4618      	mov	r0, r3
 8001912:	f003 fc52 	bl	80051ba <USB_ReadDevAllOutEpInterrupt>
 8001916:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8001918:	e099      	b.n	8001a4e <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800191a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800191c:	f003 0301 	and.w	r3, r3, #1
 8001920:	2b00      	cmp	r3, #0
 8001922:	f000 808e 	beq.w	8001a42 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800192c:	b2d2      	uxtb	r2, r2
 800192e:	4611      	mov	r1, r2
 8001930:	4618      	mov	r0, r3
 8001932:	f003 fc76 	bl	8005222 <USB_ReadDevOutEPInterrupt>
 8001936:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001938:	693b      	ldr	r3, [r7, #16]
 800193a:	f003 0301 	and.w	r3, r3, #1
 800193e:	2b00      	cmp	r3, #0
 8001940:	d00c      	beq.n	800195c <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001944:	015a      	lsls	r2, r3, #5
 8001946:	69fb      	ldr	r3, [r7, #28]
 8001948:	4413      	add	r3, r2
 800194a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800194e:	461a      	mov	r2, r3
 8001950:	2301      	movs	r3, #1
 8001952:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001954:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001956:	6878      	ldr	r0, [r7, #4]
 8001958:	f000 fec2 	bl	80026e0 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800195c:	693b      	ldr	r3, [r7, #16]
 800195e:	f003 0308 	and.w	r3, r3, #8
 8001962:	2b00      	cmp	r3, #0
 8001964:	d00c      	beq.n	8001980 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001968:	015a      	lsls	r2, r3, #5
 800196a:	69fb      	ldr	r3, [r7, #28]
 800196c:	4413      	add	r3, r2
 800196e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001972:	461a      	mov	r2, r3
 8001974:	2308      	movs	r3, #8
 8001976:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001978:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800197a:	6878      	ldr	r0, [r7, #4]
 800197c:	f000 ff98 	bl	80028b0 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001980:	693b      	ldr	r3, [r7, #16]
 8001982:	f003 0310 	and.w	r3, r3, #16
 8001986:	2b00      	cmp	r3, #0
 8001988:	d008      	beq.n	800199c <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800198a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800198c:	015a      	lsls	r2, r3, #5
 800198e:	69fb      	ldr	r3, [r7, #28]
 8001990:	4413      	add	r3, r2
 8001992:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001996:	461a      	mov	r2, r3
 8001998:	2310      	movs	r3, #16
 800199a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800199c:	693b      	ldr	r3, [r7, #16]
 800199e:	f003 0302 	and.w	r3, r3, #2
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d030      	beq.n	8001a08 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80019a6:	6a3b      	ldr	r3, [r7, #32]
 80019a8:	695b      	ldr	r3, [r3, #20]
 80019aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80019ae:	2b80      	cmp	r3, #128	; 0x80
 80019b0:	d109      	bne.n	80019c6 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80019b2:	69fb      	ldr	r3, [r7, #28]
 80019b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80019b8:	685b      	ldr	r3, [r3, #4]
 80019ba:	69fa      	ldr	r2, [r7, #28]
 80019bc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80019c0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80019c4:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80019c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019c8:	4613      	mov	r3, r2
 80019ca:	00db      	lsls	r3, r3, #3
 80019cc:	4413      	add	r3, r2
 80019ce:	009b      	lsls	r3, r3, #2
 80019d0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80019d4:	687a      	ldr	r2, [r7, #4]
 80019d6:	4413      	add	r3, r2
 80019d8:	3304      	adds	r3, #4
 80019da:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80019dc:	697b      	ldr	r3, [r7, #20]
 80019de:	78db      	ldrb	r3, [r3, #3]
 80019e0:	2b01      	cmp	r3, #1
 80019e2:	d108      	bne.n	80019f6 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80019e4:	697b      	ldr	r3, [r7, #20]
 80019e6:	2200      	movs	r2, #0
 80019e8:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80019ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019ec:	b2db      	uxtb	r3, r3
 80019ee:	4619      	mov	r1, r3
 80019f0:	6878      	ldr	r0, [r7, #4]
 80019f2:	f006 ff19 	bl	8008828 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80019f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019f8:	015a      	lsls	r2, r3, #5
 80019fa:	69fb      	ldr	r3, [r7, #28]
 80019fc:	4413      	add	r3, r2
 80019fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001a02:	461a      	mov	r2, r3
 8001a04:	2302      	movs	r3, #2
 8001a06:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001a08:	693b      	ldr	r3, [r7, #16]
 8001a0a:	f003 0320 	and.w	r3, r3, #32
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d008      	beq.n	8001a24 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a14:	015a      	lsls	r2, r3, #5
 8001a16:	69fb      	ldr	r3, [r7, #28]
 8001a18:	4413      	add	r3, r2
 8001a1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001a1e:	461a      	mov	r2, r3
 8001a20:	2320      	movs	r3, #32
 8001a22:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001a24:	693b      	ldr	r3, [r7, #16]
 8001a26:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d009      	beq.n	8001a42 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001a2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a30:	015a      	lsls	r2, r3, #5
 8001a32:	69fb      	ldr	r3, [r7, #28]
 8001a34:	4413      	add	r3, r2
 8001a36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001a3a:	461a      	mov	r2, r3
 8001a3c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001a40:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001a42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a44:	3301      	adds	r3, #1
 8001a46:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001a48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a4a:	085b      	lsrs	r3, r3, #1
 8001a4c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001a4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	f47f af62 	bne.w	800191a <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	f003 fb9a 	bl	8005194 <USB_ReadInterrupts>
 8001a60:	4603      	mov	r3, r0
 8001a62:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001a66:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001a6a:	f040 80db 	bne.w	8001c24 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	4618      	mov	r0, r3
 8001a74:	f003 fbbb 	bl	80051ee <USB_ReadDevAllInEpInterrupt>
 8001a78:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8001a7e:	e0cd      	b.n	8001c1c <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001a80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a82:	f003 0301 	and.w	r3, r3, #1
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	f000 80c2 	beq.w	8001c10 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a92:	b2d2      	uxtb	r2, r2
 8001a94:	4611      	mov	r1, r2
 8001a96:	4618      	mov	r0, r3
 8001a98:	f003 fbe1 	bl	800525e <USB_ReadDevInEPInterrupt>
 8001a9c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001a9e:	693b      	ldr	r3, [r7, #16]
 8001aa0:	f003 0301 	and.w	r3, r3, #1
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d057      	beq.n	8001b58 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001aa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aaa:	f003 030f 	and.w	r3, r3, #15
 8001aae:	2201      	movs	r2, #1
 8001ab0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab4:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001ab6:	69fb      	ldr	r3, [r7, #28]
 8001ab8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001abc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	43db      	mvns	r3, r3
 8001ac2:	69f9      	ldr	r1, [r7, #28]
 8001ac4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001ac8:	4013      	ands	r3, r2
 8001aca:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ace:	015a      	lsls	r2, r3, #5
 8001ad0:	69fb      	ldr	r3, [r7, #28]
 8001ad2:	4413      	add	r3, r2
 8001ad4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001ad8:	461a      	mov	r2, r3
 8001ada:	2301      	movs	r3, #1
 8001adc:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	691b      	ldr	r3, [r3, #16]
 8001ae2:	2b01      	cmp	r3, #1
 8001ae4:	d132      	bne.n	8001b4c <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8001ae6:	6879      	ldr	r1, [r7, #4]
 8001ae8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001aea:	4613      	mov	r3, r2
 8001aec:	00db      	lsls	r3, r3, #3
 8001aee:	4413      	add	r3, r2
 8001af0:	009b      	lsls	r3, r3, #2
 8001af2:	440b      	add	r3, r1
 8001af4:	334c      	adds	r3, #76	; 0x4c
 8001af6:	6819      	ldr	r1, [r3, #0]
 8001af8:	6878      	ldr	r0, [r7, #4]
 8001afa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001afc:	4613      	mov	r3, r2
 8001afe:	00db      	lsls	r3, r3, #3
 8001b00:	4413      	add	r3, r2
 8001b02:	009b      	lsls	r3, r3, #2
 8001b04:	4403      	add	r3, r0
 8001b06:	3348      	adds	r3, #72	; 0x48
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	4419      	add	r1, r3
 8001b0c:	6878      	ldr	r0, [r7, #4]
 8001b0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b10:	4613      	mov	r3, r2
 8001b12:	00db      	lsls	r3, r3, #3
 8001b14:	4413      	add	r3, r2
 8001b16:	009b      	lsls	r3, r3, #2
 8001b18:	4403      	add	r3, r0
 8001b1a:	334c      	adds	r3, #76	; 0x4c
 8001b1c:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8001b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d113      	bne.n	8001b4c <HAL_PCD_IRQHandler+0x3a2>
 8001b24:	6879      	ldr	r1, [r7, #4]
 8001b26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b28:	4613      	mov	r3, r2
 8001b2a:	00db      	lsls	r3, r3, #3
 8001b2c:	4413      	add	r3, r2
 8001b2e:	009b      	lsls	r3, r3, #2
 8001b30:	440b      	add	r3, r1
 8001b32:	3354      	adds	r3, #84	; 0x54
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d108      	bne.n	8001b4c <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	6818      	ldr	r0, [r3, #0]
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8001b44:	461a      	mov	r2, r3
 8001b46:	2101      	movs	r1, #1
 8001b48:	f003 fbe8 	bl	800531c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001b4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b4e:	b2db      	uxtb	r3, r3
 8001b50:	4619      	mov	r1, r3
 8001b52:	6878      	ldr	r0, [r7, #4]
 8001b54:	f006 fde3 	bl	800871e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001b58:	693b      	ldr	r3, [r7, #16]
 8001b5a:	f003 0308 	and.w	r3, r3, #8
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d008      	beq.n	8001b74 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001b62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b64:	015a      	lsls	r2, r3, #5
 8001b66:	69fb      	ldr	r3, [r7, #28]
 8001b68:	4413      	add	r3, r2
 8001b6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001b6e:	461a      	mov	r2, r3
 8001b70:	2308      	movs	r3, #8
 8001b72:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001b74:	693b      	ldr	r3, [r7, #16]
 8001b76:	f003 0310 	and.w	r3, r3, #16
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d008      	beq.n	8001b90 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001b7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b80:	015a      	lsls	r2, r3, #5
 8001b82:	69fb      	ldr	r3, [r7, #28]
 8001b84:	4413      	add	r3, r2
 8001b86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001b8a:	461a      	mov	r2, r3
 8001b8c:	2310      	movs	r3, #16
 8001b8e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001b90:	693b      	ldr	r3, [r7, #16]
 8001b92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d008      	beq.n	8001bac <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b9c:	015a      	lsls	r2, r3, #5
 8001b9e:	69fb      	ldr	r3, [r7, #28]
 8001ba0:	4413      	add	r3, r2
 8001ba2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001ba6:	461a      	mov	r2, r3
 8001ba8:	2340      	movs	r3, #64	; 0x40
 8001baa:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001bac:	693b      	ldr	r3, [r7, #16]
 8001bae:	f003 0302 	and.w	r3, r3, #2
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d023      	beq.n	8001bfe <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8001bb6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001bb8:	6a38      	ldr	r0, [r7, #32]
 8001bba:	f002 fac9 	bl	8004150 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8001bbe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001bc0:	4613      	mov	r3, r2
 8001bc2:	00db      	lsls	r3, r3, #3
 8001bc4:	4413      	add	r3, r2
 8001bc6:	009b      	lsls	r3, r3, #2
 8001bc8:	3338      	adds	r3, #56	; 0x38
 8001bca:	687a      	ldr	r2, [r7, #4]
 8001bcc:	4413      	add	r3, r2
 8001bce:	3304      	adds	r3, #4
 8001bd0:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001bd2:	697b      	ldr	r3, [r7, #20]
 8001bd4:	78db      	ldrb	r3, [r3, #3]
 8001bd6:	2b01      	cmp	r3, #1
 8001bd8:	d108      	bne.n	8001bec <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8001bda:	697b      	ldr	r3, [r7, #20]
 8001bdc:	2200      	movs	r2, #0
 8001bde:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001be2:	b2db      	uxtb	r3, r3
 8001be4:	4619      	mov	r1, r3
 8001be6:	6878      	ldr	r0, [r7, #4]
 8001be8:	f006 fe30 	bl	800884c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bee:	015a      	lsls	r2, r3, #5
 8001bf0:	69fb      	ldr	r3, [r7, #28]
 8001bf2:	4413      	add	r3, r2
 8001bf4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001bf8:	461a      	mov	r2, r3
 8001bfa:	2302      	movs	r3, #2
 8001bfc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001bfe:	693b      	ldr	r3, [r7, #16]
 8001c00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d003      	beq.n	8001c10 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8001c08:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001c0a:	6878      	ldr	r0, [r7, #4]
 8001c0c:	f000 fcdb 	bl	80025c6 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c12:	3301      	adds	r3, #1
 8001c14:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001c16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c18:	085b      	lsrs	r3, r3, #1
 8001c1a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001c1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	f47f af2e 	bne.w	8001a80 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	4618      	mov	r0, r3
 8001c2a:	f003 fab3 	bl	8005194 <USB_ReadInterrupts>
 8001c2e:	4603      	mov	r3, r0
 8001c30:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001c34:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001c38:	d122      	bne.n	8001c80 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001c3a:	69fb      	ldr	r3, [r7, #28]
 8001c3c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001c40:	685b      	ldr	r3, [r3, #4]
 8001c42:	69fa      	ldr	r2, [r7, #28]
 8001c44:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001c48:	f023 0301 	bic.w	r3, r3, #1
 8001c4c:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8001c54:	2b01      	cmp	r3, #1
 8001c56:	d108      	bne.n	8001c6a <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001c60:	2100      	movs	r1, #0
 8001c62:	6878      	ldr	r0, [r7, #4]
 8001c64:	f000 fec2 	bl	80029ec <HAL_PCDEx_LPM_Callback>
 8001c68:	e002      	b.n	8001c70 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8001c6a:	6878      	ldr	r0, [r7, #4]
 8001c6c:	f006 fdce 	bl	800880c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	695a      	ldr	r2, [r3, #20]
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8001c7e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	4618      	mov	r0, r3
 8001c86:	f003 fa85 	bl	8005194 <USB_ReadInterrupts>
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001c90:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001c94:	d112      	bne.n	8001cbc <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001c96:	69fb      	ldr	r3, [r7, #28]
 8001c98:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001c9c:	689b      	ldr	r3, [r3, #8]
 8001c9e:	f003 0301 	and.w	r3, r3, #1
 8001ca2:	2b01      	cmp	r3, #1
 8001ca4:	d102      	bne.n	8001cac <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001ca6:	6878      	ldr	r0, [r7, #4]
 8001ca8:	f006 fd8a 	bl	80087c0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	695a      	ldr	r2, [r3, #20]
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8001cba:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	f003 fa67 	bl	8005194 <USB_ReadInterrupts>
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001ccc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001cd0:	f040 80b7 	bne.w	8001e42 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001cd4:	69fb      	ldr	r3, [r7, #28]
 8001cd6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001cda:	685b      	ldr	r3, [r3, #4]
 8001cdc:	69fa      	ldr	r2, [r7, #28]
 8001cde:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001ce2:	f023 0301 	bic.w	r3, r3, #1
 8001ce6:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	2110      	movs	r1, #16
 8001cee:	4618      	mov	r0, r3
 8001cf0:	f002 fa2e 	bl	8004150 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001cf8:	e046      	b.n	8001d88 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001cfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001cfc:	015a      	lsls	r2, r3, #5
 8001cfe:	69fb      	ldr	r3, [r7, #28]
 8001d00:	4413      	add	r3, r2
 8001d02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001d06:	461a      	mov	r2, r3
 8001d08:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001d0c:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001d0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d10:	015a      	lsls	r2, r3, #5
 8001d12:	69fb      	ldr	r3, [r7, #28]
 8001d14:	4413      	add	r3, r2
 8001d16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001d1e:	0151      	lsls	r1, r2, #5
 8001d20:	69fa      	ldr	r2, [r7, #28]
 8001d22:	440a      	add	r2, r1
 8001d24:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001d28:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001d2c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8001d2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d30:	015a      	lsls	r2, r3, #5
 8001d32:	69fb      	ldr	r3, [r7, #28]
 8001d34:	4413      	add	r3, r2
 8001d36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001d3a:	461a      	mov	r2, r3
 8001d3c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001d40:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001d42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d44:	015a      	lsls	r2, r3, #5
 8001d46:	69fb      	ldr	r3, [r7, #28]
 8001d48:	4413      	add	r3, r2
 8001d4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001d52:	0151      	lsls	r1, r2, #5
 8001d54:	69fa      	ldr	r2, [r7, #28]
 8001d56:	440a      	add	r2, r1
 8001d58:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001d5c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001d60:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8001d62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d64:	015a      	lsls	r2, r3, #5
 8001d66:	69fb      	ldr	r3, [r7, #28]
 8001d68:	4413      	add	r3, r2
 8001d6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001d72:	0151      	lsls	r1, r2, #5
 8001d74:	69fa      	ldr	r2, [r7, #28]
 8001d76:	440a      	add	r2, r1
 8001d78:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001d7c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001d80:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d84:	3301      	adds	r3, #1
 8001d86:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	685b      	ldr	r3, [r3, #4]
 8001d8c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001d8e:	429a      	cmp	r2, r3
 8001d90:	d3b3      	bcc.n	8001cfa <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001d92:	69fb      	ldr	r3, [r7, #28]
 8001d94:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001d98:	69db      	ldr	r3, [r3, #28]
 8001d9a:	69fa      	ldr	r2, [r7, #28]
 8001d9c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001da0:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8001da4:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d016      	beq.n	8001ddc <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8001dae:	69fb      	ldr	r3, [r7, #28]
 8001db0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001db4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001db8:	69fa      	ldr	r2, [r7, #28]
 8001dba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001dbe:	f043 030b 	orr.w	r3, r3, #11
 8001dc2:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8001dc6:	69fb      	ldr	r3, [r7, #28]
 8001dc8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001dcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dce:	69fa      	ldr	r2, [r7, #28]
 8001dd0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001dd4:	f043 030b 	orr.w	r3, r3, #11
 8001dd8:	6453      	str	r3, [r2, #68]	; 0x44
 8001dda:	e015      	b.n	8001e08 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8001ddc:	69fb      	ldr	r3, [r7, #28]
 8001dde:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001de2:	695b      	ldr	r3, [r3, #20]
 8001de4:	69fa      	ldr	r2, [r7, #28]
 8001de6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001dea:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001dee:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8001df2:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8001df4:	69fb      	ldr	r3, [r7, #28]
 8001df6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001dfa:	691b      	ldr	r3, [r3, #16]
 8001dfc:	69fa      	ldr	r2, [r7, #28]
 8001dfe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001e02:	f043 030b 	orr.w	r3, r3, #11
 8001e06:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8001e08:	69fb      	ldr	r3, [r7, #28]
 8001e0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	69fa      	ldr	r2, [r7, #28]
 8001e12:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001e16:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8001e1a:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	6818      	ldr	r0, [r3, #0]
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	691b      	ldr	r3, [r3, #16]
 8001e24:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001e2c:	461a      	mov	r2, r3
 8001e2e:	f003 fa75 	bl	800531c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	695a      	ldr	r2, [r3, #20]
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8001e40:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	4618      	mov	r0, r3
 8001e48:	f003 f9a4 	bl	8005194 <USB_ReadInterrupts>
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001e52:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001e56:	d124      	bne.n	8001ea2 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	f003 fa3a 	bl	80052d6 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	4618      	mov	r0, r3
 8001e68:	f002 f9ef 	bl	800424a <USB_GetDevSpeed>
 8001e6c:	4603      	mov	r3, r0
 8001e6e:	461a      	mov	r2, r3
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681c      	ldr	r4, [r3, #0]
 8001e78:	f001 f9e8 	bl	800324c <HAL_RCC_GetHCLKFreq>
 8001e7c:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001e82:	b2db      	uxtb	r3, r3
 8001e84:	461a      	mov	r2, r3
 8001e86:	4620      	mov	r0, r4
 8001e88:	f001 feee 	bl	8003c68 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8001e8c:	6878      	ldr	r0, [r7, #4]
 8001e8e:	f006 fc6e 	bl	800876e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	695a      	ldr	r2, [r3, #20]
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8001ea0:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	f003 f974 	bl	8005194 <USB_ReadInterrupts>
 8001eac:	4603      	mov	r3, r0
 8001eae:	f003 0308 	and.w	r3, r3, #8
 8001eb2:	2b08      	cmp	r3, #8
 8001eb4:	d10a      	bne.n	8001ecc <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8001eb6:	6878      	ldr	r0, [r7, #4]
 8001eb8:	f006 fc4b 	bl	8008752 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	695a      	ldr	r2, [r3, #20]
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f002 0208 	and.w	r2, r2, #8
 8001eca:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	f003 f95f 	bl	8005194 <USB_ReadInterrupts>
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001edc:	2b80      	cmp	r3, #128	; 0x80
 8001ede:	d122      	bne.n	8001f26 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8001ee0:	6a3b      	ldr	r3, [r7, #32]
 8001ee2:	699b      	ldr	r3, [r3, #24]
 8001ee4:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001ee8:	6a3b      	ldr	r3, [r7, #32]
 8001eea:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001eec:	2301      	movs	r3, #1
 8001eee:	627b      	str	r3, [r7, #36]	; 0x24
 8001ef0:	e014      	b.n	8001f1c <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8001ef2:	6879      	ldr	r1, [r7, #4]
 8001ef4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ef6:	4613      	mov	r3, r2
 8001ef8:	00db      	lsls	r3, r3, #3
 8001efa:	4413      	add	r3, r2
 8001efc:	009b      	lsls	r3, r3, #2
 8001efe:	440b      	add	r3, r1
 8001f00:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8001f04:	781b      	ldrb	r3, [r3, #0]
 8001f06:	2b01      	cmp	r3, #1
 8001f08:	d105      	bne.n	8001f16 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8001f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f0c:	b2db      	uxtb	r3, r3
 8001f0e:	4619      	mov	r1, r3
 8001f10:	6878      	ldr	r0, [r7, #4]
 8001f12:	f000 fb27 	bl	8002564 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001f16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f18:	3301      	adds	r3, #1
 8001f1a:	627b      	str	r3, [r7, #36]	; 0x24
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	685b      	ldr	r3, [r3, #4]
 8001f20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f22:	429a      	cmp	r2, r3
 8001f24:	d3e5      	bcc.n	8001ef2 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	f003 f932 	bl	8005194 <USB_ReadInterrupts>
 8001f30:	4603      	mov	r3, r0
 8001f32:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f36:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001f3a:	d13b      	bne.n	8001fb4 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001f3c:	2301      	movs	r3, #1
 8001f3e:	627b      	str	r3, [r7, #36]	; 0x24
 8001f40:	e02b      	b.n	8001f9a <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8001f42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f44:	015a      	lsls	r2, r3, #5
 8001f46:	69fb      	ldr	r3, [r7, #28]
 8001f48:	4413      	add	r3, r2
 8001f4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001f52:	6879      	ldr	r1, [r7, #4]
 8001f54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f56:	4613      	mov	r3, r2
 8001f58:	00db      	lsls	r3, r3, #3
 8001f5a:	4413      	add	r3, r2
 8001f5c:	009b      	lsls	r3, r3, #2
 8001f5e:	440b      	add	r3, r1
 8001f60:	3340      	adds	r3, #64	; 0x40
 8001f62:	781b      	ldrb	r3, [r3, #0]
 8001f64:	2b01      	cmp	r3, #1
 8001f66:	d115      	bne.n	8001f94 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8001f68:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	da12      	bge.n	8001f94 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8001f6e:	6879      	ldr	r1, [r7, #4]
 8001f70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f72:	4613      	mov	r3, r2
 8001f74:	00db      	lsls	r3, r3, #3
 8001f76:	4413      	add	r3, r2
 8001f78:	009b      	lsls	r3, r3, #2
 8001f7a:	440b      	add	r3, r1
 8001f7c:	333f      	adds	r3, #63	; 0x3f
 8001f7e:	2201      	movs	r2, #1
 8001f80:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8001f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f84:	b2db      	uxtb	r3, r3
 8001f86:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001f8a:	b2db      	uxtb	r3, r3
 8001f8c:	4619      	mov	r1, r3
 8001f8e:	6878      	ldr	r0, [r7, #4]
 8001f90:	f000 fae8 	bl	8002564 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001f94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f96:	3301      	adds	r3, #1
 8001f98:	627b      	str	r3, [r7, #36]	; 0x24
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	685b      	ldr	r3, [r3, #4]
 8001f9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001fa0:	429a      	cmp	r2, r3
 8001fa2:	d3ce      	bcc.n	8001f42 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	695a      	ldr	r2, [r3, #20]
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8001fb2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	4618      	mov	r0, r3
 8001fba:	f003 f8eb 	bl	8005194 <USB_ReadInterrupts>
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001fc4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001fc8:	d155      	bne.n	8002076 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001fca:	2301      	movs	r3, #1
 8001fcc:	627b      	str	r3, [r7, #36]	; 0x24
 8001fce:	e045      	b.n	800205c <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8001fd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fd2:	015a      	lsls	r2, r3, #5
 8001fd4:	69fb      	ldr	r3, [r7, #28]
 8001fd6:	4413      	add	r3, r2
 8001fd8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001fe0:	6879      	ldr	r1, [r7, #4]
 8001fe2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001fe4:	4613      	mov	r3, r2
 8001fe6:	00db      	lsls	r3, r3, #3
 8001fe8:	4413      	add	r3, r2
 8001fea:	009b      	lsls	r3, r3, #2
 8001fec:	440b      	add	r3, r1
 8001fee:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001ff2:	781b      	ldrb	r3, [r3, #0]
 8001ff4:	2b01      	cmp	r3, #1
 8001ff6:	d12e      	bne.n	8002056 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001ff8:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	da2b      	bge.n	8002056 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8001ffe:	69bb      	ldr	r3, [r7, #24]
 8002000:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 800200a:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800200e:	429a      	cmp	r2, r3
 8002010:	d121      	bne.n	8002056 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8002012:	6879      	ldr	r1, [r7, #4]
 8002014:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002016:	4613      	mov	r3, r2
 8002018:	00db      	lsls	r3, r3, #3
 800201a:	4413      	add	r3, r2
 800201c:	009b      	lsls	r3, r3, #2
 800201e:	440b      	add	r3, r1
 8002020:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8002024:	2201      	movs	r2, #1
 8002026:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8002028:	6a3b      	ldr	r3, [r7, #32]
 800202a:	699b      	ldr	r3, [r3, #24]
 800202c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002030:	6a3b      	ldr	r3, [r7, #32]
 8002032:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8002034:	6a3b      	ldr	r3, [r7, #32]
 8002036:	695b      	ldr	r3, [r3, #20]
 8002038:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800203c:	2b00      	cmp	r3, #0
 800203e:	d10a      	bne.n	8002056 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8002040:	69fb      	ldr	r3, [r7, #28]
 8002042:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002046:	685b      	ldr	r3, [r3, #4]
 8002048:	69fa      	ldr	r2, [r7, #28]
 800204a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800204e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002052:	6053      	str	r3, [r2, #4]
            break;
 8002054:	e007      	b.n	8002066 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002058:	3301      	adds	r3, #1
 800205a:	627b      	str	r3, [r7, #36]	; 0x24
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	685b      	ldr	r3, [r3, #4]
 8002060:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002062:	429a      	cmp	r2, r3
 8002064:	d3b4      	bcc.n	8001fd0 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	695a      	ldr	r2, [r3, #20]
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002074:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	4618      	mov	r0, r3
 800207c:	f003 f88a 	bl	8005194 <USB_ReadInterrupts>
 8002080:	4603      	mov	r3, r0
 8002082:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002086:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800208a:	d10a      	bne.n	80020a2 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800208c:	6878      	ldr	r0, [r7, #4]
 800208e:	f006 fbef 	bl	8008870 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	695a      	ldr	r2, [r3, #20]
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80020a0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	4618      	mov	r0, r3
 80020a8:	f003 f874 	bl	8005194 <USB_ReadInterrupts>
 80020ac:	4603      	mov	r3, r0
 80020ae:	f003 0304 	and.w	r3, r3, #4
 80020b2:	2b04      	cmp	r3, #4
 80020b4:	d115      	bne.n	80020e2 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	685b      	ldr	r3, [r3, #4]
 80020bc:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80020be:	69bb      	ldr	r3, [r7, #24]
 80020c0:	f003 0304 	and.w	r3, r3, #4
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d002      	beq.n	80020ce <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80020c8:	6878      	ldr	r0, [r7, #4]
 80020ca:	f006 fbdf 	bl	800888c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	6859      	ldr	r1, [r3, #4]
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	69ba      	ldr	r2, [r7, #24]
 80020da:	430a      	orrs	r2, r1
 80020dc:	605a      	str	r2, [r3, #4]
 80020de:	e000      	b.n	80020e2 <HAL_PCD_IRQHandler+0x938>
      return;
 80020e0:	bf00      	nop
    }
  }
}
 80020e2:	3734      	adds	r7, #52	; 0x34
 80020e4:	46bd      	mov	sp, r7
 80020e6:	bd90      	pop	{r4, r7, pc}

080020e8 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b082      	sub	sp, #8
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
 80020f0:	460b      	mov	r3, r1
 80020f2:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80020fa:	2b01      	cmp	r3, #1
 80020fc:	d101      	bne.n	8002102 <HAL_PCD_SetAddress+0x1a>
 80020fe:	2302      	movs	r3, #2
 8002100:	e013      	b.n	800212a <HAL_PCD_SetAddress+0x42>
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	2201      	movs	r2, #1
 8002106:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	78fa      	ldrb	r2, [r7, #3]
 800210e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	78fa      	ldrb	r2, [r7, #3]
 8002118:	4611      	mov	r1, r2
 800211a:	4618      	mov	r0, r3
 800211c:	f002 ffd2 	bl	80050c4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	2200      	movs	r2, #0
 8002124:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002128:	2300      	movs	r3, #0
}
 800212a:	4618      	mov	r0, r3
 800212c:	3708      	adds	r7, #8
 800212e:	46bd      	mov	sp, r7
 8002130:	bd80      	pop	{r7, pc}

08002132 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002132:	b580      	push	{r7, lr}
 8002134:	b084      	sub	sp, #16
 8002136:	af00      	add	r7, sp, #0
 8002138:	6078      	str	r0, [r7, #4]
 800213a:	4608      	mov	r0, r1
 800213c:	4611      	mov	r1, r2
 800213e:	461a      	mov	r2, r3
 8002140:	4603      	mov	r3, r0
 8002142:	70fb      	strb	r3, [r7, #3]
 8002144:	460b      	mov	r3, r1
 8002146:	803b      	strh	r3, [r7, #0]
 8002148:	4613      	mov	r3, r2
 800214a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800214c:	2300      	movs	r3, #0
 800214e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002150:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002154:	2b00      	cmp	r3, #0
 8002156:	da0f      	bge.n	8002178 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002158:	78fb      	ldrb	r3, [r7, #3]
 800215a:	f003 020f 	and.w	r2, r3, #15
 800215e:	4613      	mov	r3, r2
 8002160:	00db      	lsls	r3, r3, #3
 8002162:	4413      	add	r3, r2
 8002164:	009b      	lsls	r3, r3, #2
 8002166:	3338      	adds	r3, #56	; 0x38
 8002168:	687a      	ldr	r2, [r7, #4]
 800216a:	4413      	add	r3, r2
 800216c:	3304      	adds	r3, #4
 800216e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	2201      	movs	r2, #1
 8002174:	705a      	strb	r2, [r3, #1]
 8002176:	e00f      	b.n	8002198 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002178:	78fb      	ldrb	r3, [r7, #3]
 800217a:	f003 020f 	and.w	r2, r3, #15
 800217e:	4613      	mov	r3, r2
 8002180:	00db      	lsls	r3, r3, #3
 8002182:	4413      	add	r3, r2
 8002184:	009b      	lsls	r3, r3, #2
 8002186:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800218a:	687a      	ldr	r2, [r7, #4]
 800218c:	4413      	add	r3, r2
 800218e:	3304      	adds	r3, #4
 8002190:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	2200      	movs	r2, #0
 8002196:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002198:	78fb      	ldrb	r3, [r7, #3]
 800219a:	f003 030f 	and.w	r3, r3, #15
 800219e:	b2da      	uxtb	r2, r3
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80021a4:	883a      	ldrh	r2, [r7, #0]
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	78ba      	ldrb	r2, [r7, #2]
 80021ae:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	785b      	ldrb	r3, [r3, #1]
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d004      	beq.n	80021c2 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	781b      	ldrb	r3, [r3, #0]
 80021bc:	b29a      	uxth	r2, r3
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80021c2:	78bb      	ldrb	r3, [r7, #2]
 80021c4:	2b02      	cmp	r3, #2
 80021c6:	d102      	bne.n	80021ce <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	2200      	movs	r2, #0
 80021cc:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80021d4:	2b01      	cmp	r3, #1
 80021d6:	d101      	bne.n	80021dc <HAL_PCD_EP_Open+0xaa>
 80021d8:	2302      	movs	r3, #2
 80021da:	e00e      	b.n	80021fa <HAL_PCD_EP_Open+0xc8>
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	2201      	movs	r2, #1
 80021e0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	68f9      	ldr	r1, [r7, #12]
 80021ea:	4618      	mov	r0, r3
 80021ec:	f002 f852 	bl	8004294 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	2200      	movs	r2, #0
 80021f4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 80021f8:	7afb      	ldrb	r3, [r7, #11]
}
 80021fa:	4618      	mov	r0, r3
 80021fc:	3710      	adds	r7, #16
 80021fe:	46bd      	mov	sp, r7
 8002200:	bd80      	pop	{r7, pc}

08002202 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002202:	b580      	push	{r7, lr}
 8002204:	b084      	sub	sp, #16
 8002206:	af00      	add	r7, sp, #0
 8002208:	6078      	str	r0, [r7, #4]
 800220a:	460b      	mov	r3, r1
 800220c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800220e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002212:	2b00      	cmp	r3, #0
 8002214:	da0f      	bge.n	8002236 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002216:	78fb      	ldrb	r3, [r7, #3]
 8002218:	f003 020f 	and.w	r2, r3, #15
 800221c:	4613      	mov	r3, r2
 800221e:	00db      	lsls	r3, r3, #3
 8002220:	4413      	add	r3, r2
 8002222:	009b      	lsls	r3, r3, #2
 8002224:	3338      	adds	r3, #56	; 0x38
 8002226:	687a      	ldr	r2, [r7, #4]
 8002228:	4413      	add	r3, r2
 800222a:	3304      	adds	r3, #4
 800222c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	2201      	movs	r2, #1
 8002232:	705a      	strb	r2, [r3, #1]
 8002234:	e00f      	b.n	8002256 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002236:	78fb      	ldrb	r3, [r7, #3]
 8002238:	f003 020f 	and.w	r2, r3, #15
 800223c:	4613      	mov	r3, r2
 800223e:	00db      	lsls	r3, r3, #3
 8002240:	4413      	add	r3, r2
 8002242:	009b      	lsls	r3, r3, #2
 8002244:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002248:	687a      	ldr	r2, [r7, #4]
 800224a:	4413      	add	r3, r2
 800224c:	3304      	adds	r3, #4
 800224e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	2200      	movs	r2, #0
 8002254:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002256:	78fb      	ldrb	r3, [r7, #3]
 8002258:	f003 030f 	and.w	r3, r3, #15
 800225c:	b2da      	uxtb	r2, r3
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002268:	2b01      	cmp	r3, #1
 800226a:	d101      	bne.n	8002270 <HAL_PCD_EP_Close+0x6e>
 800226c:	2302      	movs	r3, #2
 800226e:	e00e      	b.n	800228e <HAL_PCD_EP_Close+0x8c>
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	2201      	movs	r2, #1
 8002274:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	68f9      	ldr	r1, [r7, #12]
 800227e:	4618      	mov	r0, r3
 8002280:	f002 f890 	bl	80043a4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	2200      	movs	r2, #0
 8002288:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 800228c:	2300      	movs	r3, #0
}
 800228e:	4618      	mov	r0, r3
 8002290:	3710      	adds	r7, #16
 8002292:	46bd      	mov	sp, r7
 8002294:	bd80      	pop	{r7, pc}

08002296 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002296:	b580      	push	{r7, lr}
 8002298:	b086      	sub	sp, #24
 800229a:	af00      	add	r7, sp, #0
 800229c:	60f8      	str	r0, [r7, #12]
 800229e:	607a      	str	r2, [r7, #4]
 80022a0:	603b      	str	r3, [r7, #0]
 80022a2:	460b      	mov	r3, r1
 80022a4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80022a6:	7afb      	ldrb	r3, [r7, #11]
 80022a8:	f003 020f 	and.w	r2, r3, #15
 80022ac:	4613      	mov	r3, r2
 80022ae:	00db      	lsls	r3, r3, #3
 80022b0:	4413      	add	r3, r2
 80022b2:	009b      	lsls	r3, r3, #2
 80022b4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80022b8:	68fa      	ldr	r2, [r7, #12]
 80022ba:	4413      	add	r3, r2
 80022bc:	3304      	adds	r3, #4
 80022be:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80022c0:	697b      	ldr	r3, [r7, #20]
 80022c2:	687a      	ldr	r2, [r7, #4]
 80022c4:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80022c6:	697b      	ldr	r3, [r7, #20]
 80022c8:	683a      	ldr	r2, [r7, #0]
 80022ca:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80022cc:	697b      	ldr	r3, [r7, #20]
 80022ce:	2200      	movs	r2, #0
 80022d0:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 80022d2:	697b      	ldr	r3, [r7, #20]
 80022d4:	2200      	movs	r2, #0
 80022d6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80022d8:	7afb      	ldrb	r3, [r7, #11]
 80022da:	f003 030f 	and.w	r3, r3, #15
 80022de:	b2da      	uxtb	r2, r3
 80022e0:	697b      	ldr	r3, [r7, #20]
 80022e2:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	691b      	ldr	r3, [r3, #16]
 80022e8:	2b01      	cmp	r3, #1
 80022ea:	d102      	bne.n	80022f2 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80022ec:	687a      	ldr	r2, [r7, #4]
 80022ee:	697b      	ldr	r3, [r7, #20]
 80022f0:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80022f2:	7afb      	ldrb	r3, [r7, #11]
 80022f4:	f003 030f 	and.w	r3, r3, #15
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d109      	bne.n	8002310 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	6818      	ldr	r0, [r3, #0]
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	691b      	ldr	r3, [r3, #16]
 8002304:	b2db      	uxtb	r3, r3
 8002306:	461a      	mov	r2, r3
 8002308:	6979      	ldr	r1, [r7, #20]
 800230a:	f002 fb6f 	bl	80049ec <USB_EP0StartXfer>
 800230e:	e008      	b.n	8002322 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	6818      	ldr	r0, [r3, #0]
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	691b      	ldr	r3, [r3, #16]
 8002318:	b2db      	uxtb	r3, r3
 800231a:	461a      	mov	r2, r3
 800231c:	6979      	ldr	r1, [r7, #20]
 800231e:	f002 f91d 	bl	800455c <USB_EPStartXfer>
  }

  return HAL_OK;
 8002322:	2300      	movs	r3, #0
}
 8002324:	4618      	mov	r0, r3
 8002326:	3718      	adds	r7, #24
 8002328:	46bd      	mov	sp, r7
 800232a:	bd80      	pop	{r7, pc}

0800232c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800232c:	b480      	push	{r7}
 800232e:	b083      	sub	sp, #12
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
 8002334:	460b      	mov	r3, r1
 8002336:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002338:	78fb      	ldrb	r3, [r7, #3]
 800233a:	f003 020f 	and.w	r2, r3, #15
 800233e:	6879      	ldr	r1, [r7, #4]
 8002340:	4613      	mov	r3, r2
 8002342:	00db      	lsls	r3, r3, #3
 8002344:	4413      	add	r3, r2
 8002346:	009b      	lsls	r3, r3, #2
 8002348:	440b      	add	r3, r1
 800234a:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 800234e:	681b      	ldr	r3, [r3, #0]
}
 8002350:	4618      	mov	r0, r3
 8002352:	370c      	adds	r7, #12
 8002354:	46bd      	mov	sp, r7
 8002356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235a:	4770      	bx	lr

0800235c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	b086      	sub	sp, #24
 8002360:	af00      	add	r7, sp, #0
 8002362:	60f8      	str	r0, [r7, #12]
 8002364:	607a      	str	r2, [r7, #4]
 8002366:	603b      	str	r3, [r7, #0]
 8002368:	460b      	mov	r3, r1
 800236a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800236c:	7afb      	ldrb	r3, [r7, #11]
 800236e:	f003 020f 	and.w	r2, r3, #15
 8002372:	4613      	mov	r3, r2
 8002374:	00db      	lsls	r3, r3, #3
 8002376:	4413      	add	r3, r2
 8002378:	009b      	lsls	r3, r3, #2
 800237a:	3338      	adds	r3, #56	; 0x38
 800237c:	68fa      	ldr	r2, [r7, #12]
 800237e:	4413      	add	r3, r2
 8002380:	3304      	adds	r3, #4
 8002382:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002384:	697b      	ldr	r3, [r7, #20]
 8002386:	687a      	ldr	r2, [r7, #4]
 8002388:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800238a:	697b      	ldr	r3, [r7, #20]
 800238c:	683a      	ldr	r2, [r7, #0]
 800238e:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002390:	697b      	ldr	r3, [r7, #20]
 8002392:	2200      	movs	r2, #0
 8002394:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8002396:	697b      	ldr	r3, [r7, #20]
 8002398:	2201      	movs	r2, #1
 800239a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800239c:	7afb      	ldrb	r3, [r7, #11]
 800239e:	f003 030f 	and.w	r3, r3, #15
 80023a2:	b2da      	uxtb	r2, r3
 80023a4:	697b      	ldr	r3, [r7, #20]
 80023a6:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	691b      	ldr	r3, [r3, #16]
 80023ac:	2b01      	cmp	r3, #1
 80023ae:	d102      	bne.n	80023b6 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80023b0:	687a      	ldr	r2, [r7, #4]
 80023b2:	697b      	ldr	r3, [r7, #20]
 80023b4:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80023b6:	7afb      	ldrb	r3, [r7, #11]
 80023b8:	f003 030f 	and.w	r3, r3, #15
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d109      	bne.n	80023d4 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	6818      	ldr	r0, [r3, #0]
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	691b      	ldr	r3, [r3, #16]
 80023c8:	b2db      	uxtb	r3, r3
 80023ca:	461a      	mov	r2, r3
 80023cc:	6979      	ldr	r1, [r7, #20]
 80023ce:	f002 fb0d 	bl	80049ec <USB_EP0StartXfer>
 80023d2:	e008      	b.n	80023e6 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	6818      	ldr	r0, [r3, #0]
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	691b      	ldr	r3, [r3, #16]
 80023dc:	b2db      	uxtb	r3, r3
 80023de:	461a      	mov	r2, r3
 80023e0:	6979      	ldr	r1, [r7, #20]
 80023e2:	f002 f8bb 	bl	800455c <USB_EPStartXfer>
  }

  return HAL_OK;
 80023e6:	2300      	movs	r3, #0
}
 80023e8:	4618      	mov	r0, r3
 80023ea:	3718      	adds	r7, #24
 80023ec:	46bd      	mov	sp, r7
 80023ee:	bd80      	pop	{r7, pc}

080023f0 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b084      	sub	sp, #16
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
 80023f8:	460b      	mov	r3, r1
 80023fa:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80023fc:	78fb      	ldrb	r3, [r7, #3]
 80023fe:	f003 020f 	and.w	r2, r3, #15
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	685b      	ldr	r3, [r3, #4]
 8002406:	429a      	cmp	r2, r3
 8002408:	d901      	bls.n	800240e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800240a:	2301      	movs	r3, #1
 800240c:	e050      	b.n	80024b0 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800240e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002412:	2b00      	cmp	r3, #0
 8002414:	da0f      	bge.n	8002436 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002416:	78fb      	ldrb	r3, [r7, #3]
 8002418:	f003 020f 	and.w	r2, r3, #15
 800241c:	4613      	mov	r3, r2
 800241e:	00db      	lsls	r3, r3, #3
 8002420:	4413      	add	r3, r2
 8002422:	009b      	lsls	r3, r3, #2
 8002424:	3338      	adds	r3, #56	; 0x38
 8002426:	687a      	ldr	r2, [r7, #4]
 8002428:	4413      	add	r3, r2
 800242a:	3304      	adds	r3, #4
 800242c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	2201      	movs	r2, #1
 8002432:	705a      	strb	r2, [r3, #1]
 8002434:	e00d      	b.n	8002452 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002436:	78fa      	ldrb	r2, [r7, #3]
 8002438:	4613      	mov	r3, r2
 800243a:	00db      	lsls	r3, r3, #3
 800243c:	4413      	add	r3, r2
 800243e:	009b      	lsls	r3, r3, #2
 8002440:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002444:	687a      	ldr	r2, [r7, #4]
 8002446:	4413      	add	r3, r2
 8002448:	3304      	adds	r3, #4
 800244a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	2200      	movs	r2, #0
 8002450:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	2201      	movs	r2, #1
 8002456:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002458:	78fb      	ldrb	r3, [r7, #3]
 800245a:	f003 030f 	and.w	r3, r3, #15
 800245e:	b2da      	uxtb	r2, r3
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800246a:	2b01      	cmp	r3, #1
 800246c:	d101      	bne.n	8002472 <HAL_PCD_EP_SetStall+0x82>
 800246e:	2302      	movs	r3, #2
 8002470:	e01e      	b.n	80024b0 <HAL_PCD_EP_SetStall+0xc0>
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	2201      	movs	r2, #1
 8002476:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	68f9      	ldr	r1, [r7, #12]
 8002480:	4618      	mov	r0, r3
 8002482:	f002 fd4b 	bl	8004f1c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002486:	78fb      	ldrb	r3, [r7, #3]
 8002488:	f003 030f 	and.w	r3, r3, #15
 800248c:	2b00      	cmp	r3, #0
 800248e:	d10a      	bne.n	80024a6 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	6818      	ldr	r0, [r3, #0]
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	691b      	ldr	r3, [r3, #16]
 8002498:	b2d9      	uxtb	r1, r3
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80024a0:	461a      	mov	r2, r3
 80024a2:	f002 ff3b 	bl	800531c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	2200      	movs	r2, #0
 80024aa:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80024ae:	2300      	movs	r3, #0
}
 80024b0:	4618      	mov	r0, r3
 80024b2:	3710      	adds	r7, #16
 80024b4:	46bd      	mov	sp, r7
 80024b6:	bd80      	pop	{r7, pc}

080024b8 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b084      	sub	sp, #16
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
 80024c0:	460b      	mov	r3, r1
 80024c2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80024c4:	78fb      	ldrb	r3, [r7, #3]
 80024c6:	f003 020f 	and.w	r2, r3, #15
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	685b      	ldr	r3, [r3, #4]
 80024ce:	429a      	cmp	r2, r3
 80024d0:	d901      	bls.n	80024d6 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80024d2:	2301      	movs	r3, #1
 80024d4:	e042      	b.n	800255c <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80024d6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80024da:	2b00      	cmp	r3, #0
 80024dc:	da0f      	bge.n	80024fe <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80024de:	78fb      	ldrb	r3, [r7, #3]
 80024e0:	f003 020f 	and.w	r2, r3, #15
 80024e4:	4613      	mov	r3, r2
 80024e6:	00db      	lsls	r3, r3, #3
 80024e8:	4413      	add	r3, r2
 80024ea:	009b      	lsls	r3, r3, #2
 80024ec:	3338      	adds	r3, #56	; 0x38
 80024ee:	687a      	ldr	r2, [r7, #4]
 80024f0:	4413      	add	r3, r2
 80024f2:	3304      	adds	r3, #4
 80024f4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	2201      	movs	r2, #1
 80024fa:	705a      	strb	r2, [r3, #1]
 80024fc:	e00f      	b.n	800251e <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80024fe:	78fb      	ldrb	r3, [r7, #3]
 8002500:	f003 020f 	and.w	r2, r3, #15
 8002504:	4613      	mov	r3, r2
 8002506:	00db      	lsls	r3, r3, #3
 8002508:	4413      	add	r3, r2
 800250a:	009b      	lsls	r3, r3, #2
 800250c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002510:	687a      	ldr	r2, [r7, #4]
 8002512:	4413      	add	r3, r2
 8002514:	3304      	adds	r3, #4
 8002516:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	2200      	movs	r2, #0
 800251c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	2200      	movs	r2, #0
 8002522:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002524:	78fb      	ldrb	r3, [r7, #3]
 8002526:	f003 030f 	and.w	r3, r3, #15
 800252a:	b2da      	uxtb	r2, r3
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002536:	2b01      	cmp	r3, #1
 8002538:	d101      	bne.n	800253e <HAL_PCD_EP_ClrStall+0x86>
 800253a:	2302      	movs	r3, #2
 800253c:	e00e      	b.n	800255c <HAL_PCD_EP_ClrStall+0xa4>
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	2201      	movs	r2, #1
 8002542:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	68f9      	ldr	r1, [r7, #12]
 800254c:	4618      	mov	r0, r3
 800254e:	f002 fd53 	bl	8004ff8 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	2200      	movs	r2, #0
 8002556:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800255a:	2300      	movs	r3, #0
}
 800255c:	4618      	mov	r0, r3
 800255e:	3710      	adds	r7, #16
 8002560:	46bd      	mov	sp, r7
 8002562:	bd80      	pop	{r7, pc}

08002564 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	b084      	sub	sp, #16
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
 800256c:	460b      	mov	r3, r1
 800256e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8002570:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002574:	2b00      	cmp	r3, #0
 8002576:	da0c      	bge.n	8002592 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002578:	78fb      	ldrb	r3, [r7, #3]
 800257a:	f003 020f 	and.w	r2, r3, #15
 800257e:	4613      	mov	r3, r2
 8002580:	00db      	lsls	r3, r3, #3
 8002582:	4413      	add	r3, r2
 8002584:	009b      	lsls	r3, r3, #2
 8002586:	3338      	adds	r3, #56	; 0x38
 8002588:	687a      	ldr	r2, [r7, #4]
 800258a:	4413      	add	r3, r2
 800258c:	3304      	adds	r3, #4
 800258e:	60fb      	str	r3, [r7, #12]
 8002590:	e00c      	b.n	80025ac <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002592:	78fb      	ldrb	r3, [r7, #3]
 8002594:	f003 020f 	and.w	r2, r3, #15
 8002598:	4613      	mov	r3, r2
 800259a:	00db      	lsls	r3, r3, #3
 800259c:	4413      	add	r3, r2
 800259e:	009b      	lsls	r3, r3, #2
 80025a0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80025a4:	687a      	ldr	r2, [r7, #4]
 80025a6:	4413      	add	r3, r2
 80025a8:	3304      	adds	r3, #4
 80025aa:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	68f9      	ldr	r1, [r7, #12]
 80025b2:	4618      	mov	r0, r3
 80025b4:	f002 fb72 	bl	8004c9c <USB_EPStopXfer>
 80025b8:	4603      	mov	r3, r0
 80025ba:	72fb      	strb	r3, [r7, #11]

  return ret;
 80025bc:	7afb      	ldrb	r3, [r7, #11]
}
 80025be:	4618      	mov	r0, r3
 80025c0:	3710      	adds	r7, #16
 80025c2:	46bd      	mov	sp, r7
 80025c4:	bd80      	pop	{r7, pc}

080025c6 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80025c6:	b580      	push	{r7, lr}
 80025c8:	b08a      	sub	sp, #40	; 0x28
 80025ca:	af02      	add	r7, sp, #8
 80025cc:	6078      	str	r0, [r7, #4]
 80025ce:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80025d6:	697b      	ldr	r3, [r7, #20]
 80025d8:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80025da:	683a      	ldr	r2, [r7, #0]
 80025dc:	4613      	mov	r3, r2
 80025de:	00db      	lsls	r3, r3, #3
 80025e0:	4413      	add	r3, r2
 80025e2:	009b      	lsls	r3, r3, #2
 80025e4:	3338      	adds	r3, #56	; 0x38
 80025e6:	687a      	ldr	r2, [r7, #4]
 80025e8:	4413      	add	r3, r2
 80025ea:	3304      	adds	r3, #4
 80025ec:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	6a1a      	ldr	r2, [r3, #32]
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	699b      	ldr	r3, [r3, #24]
 80025f6:	429a      	cmp	r2, r3
 80025f8:	d901      	bls.n	80025fe <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80025fa:	2301      	movs	r3, #1
 80025fc:	e06c      	b.n	80026d8 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	699a      	ldr	r2, [r3, #24]
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	6a1b      	ldr	r3, [r3, #32]
 8002606:	1ad3      	subs	r3, r2, r3
 8002608:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	68db      	ldr	r3, [r3, #12]
 800260e:	69fa      	ldr	r2, [r7, #28]
 8002610:	429a      	cmp	r2, r3
 8002612:	d902      	bls.n	800261a <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	68db      	ldr	r3, [r3, #12]
 8002618:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800261a:	69fb      	ldr	r3, [r7, #28]
 800261c:	3303      	adds	r3, #3
 800261e:	089b      	lsrs	r3, r3, #2
 8002620:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002622:	e02b      	b.n	800267c <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	699a      	ldr	r2, [r3, #24]
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	6a1b      	ldr	r3, [r3, #32]
 800262c:	1ad3      	subs	r3, r2, r3
 800262e:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	68db      	ldr	r3, [r3, #12]
 8002634:	69fa      	ldr	r2, [r7, #28]
 8002636:	429a      	cmp	r2, r3
 8002638:	d902      	bls.n	8002640 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	68db      	ldr	r3, [r3, #12]
 800263e:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002640:	69fb      	ldr	r3, [r7, #28]
 8002642:	3303      	adds	r3, #3
 8002644:	089b      	lsrs	r3, r3, #2
 8002646:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	6919      	ldr	r1, [r3, #16]
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	b2da      	uxtb	r2, r3
 8002650:	69fb      	ldr	r3, [r7, #28]
 8002652:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002658:	b2db      	uxtb	r3, r3
 800265a:	9300      	str	r3, [sp, #0]
 800265c:	4603      	mov	r3, r0
 800265e:	6978      	ldr	r0, [r7, #20]
 8002660:	f002 fbc6 	bl	8004df0 <USB_WritePacket>

    ep->xfer_buff  += len;
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	691a      	ldr	r2, [r3, #16]
 8002668:	69fb      	ldr	r3, [r7, #28]
 800266a:	441a      	add	r2, r3
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	6a1a      	ldr	r2, [r3, #32]
 8002674:	69fb      	ldr	r3, [r7, #28]
 8002676:	441a      	add	r2, r3
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	015a      	lsls	r2, r3, #5
 8002680:	693b      	ldr	r3, [r7, #16]
 8002682:	4413      	add	r3, r2
 8002684:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002688:	699b      	ldr	r3, [r3, #24]
 800268a:	b29b      	uxth	r3, r3
 800268c:	69ba      	ldr	r2, [r7, #24]
 800268e:	429a      	cmp	r2, r3
 8002690:	d809      	bhi.n	80026a6 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	6a1a      	ldr	r2, [r3, #32]
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800269a:	429a      	cmp	r2, r3
 800269c:	d203      	bcs.n	80026a6 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	699b      	ldr	r3, [r3, #24]
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d1be      	bne.n	8002624 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	699a      	ldr	r2, [r3, #24]
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	6a1b      	ldr	r3, [r3, #32]
 80026ae:	429a      	cmp	r2, r3
 80026b0:	d811      	bhi.n	80026d6 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	f003 030f 	and.w	r3, r3, #15
 80026b8:	2201      	movs	r2, #1
 80026ba:	fa02 f303 	lsl.w	r3, r2, r3
 80026be:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80026c0:	693b      	ldr	r3, [r7, #16]
 80026c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80026c6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80026c8:	68bb      	ldr	r3, [r7, #8]
 80026ca:	43db      	mvns	r3, r3
 80026cc:	6939      	ldr	r1, [r7, #16]
 80026ce:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80026d2:	4013      	ands	r3, r2
 80026d4:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80026d6:	2300      	movs	r3, #0
}
 80026d8:	4618      	mov	r0, r3
 80026da:	3720      	adds	r7, #32
 80026dc:	46bd      	mov	sp, r7
 80026de:	bd80      	pop	{r7, pc}

080026e0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b088      	sub	sp, #32
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
 80026e8:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80026f0:	69fb      	ldr	r3, [r7, #28]
 80026f2:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80026f4:	69fb      	ldr	r3, [r7, #28]
 80026f6:	333c      	adds	r3, #60	; 0x3c
 80026f8:	3304      	adds	r3, #4
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80026fe:	683b      	ldr	r3, [r7, #0]
 8002700:	015a      	lsls	r2, r3, #5
 8002702:	69bb      	ldr	r3, [r7, #24]
 8002704:	4413      	add	r3, r2
 8002706:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800270a:	689b      	ldr	r3, [r3, #8]
 800270c:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	691b      	ldr	r3, [r3, #16]
 8002712:	2b01      	cmp	r3, #1
 8002714:	d17b      	bne.n	800280e <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002716:	693b      	ldr	r3, [r7, #16]
 8002718:	f003 0308 	and.w	r3, r3, #8
 800271c:	2b00      	cmp	r3, #0
 800271e:	d015      	beq.n	800274c <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002720:	697b      	ldr	r3, [r7, #20]
 8002722:	4a61      	ldr	r2, [pc, #388]	; (80028a8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002724:	4293      	cmp	r3, r2
 8002726:	f240 80b9 	bls.w	800289c <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800272a:	693b      	ldr	r3, [r7, #16]
 800272c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002730:	2b00      	cmp	r3, #0
 8002732:	f000 80b3 	beq.w	800289c <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002736:	683b      	ldr	r3, [r7, #0]
 8002738:	015a      	lsls	r2, r3, #5
 800273a:	69bb      	ldr	r3, [r7, #24]
 800273c:	4413      	add	r3, r2
 800273e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002742:	461a      	mov	r2, r3
 8002744:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002748:	6093      	str	r3, [r2, #8]
 800274a:	e0a7      	b.n	800289c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800274c:	693b      	ldr	r3, [r7, #16]
 800274e:	f003 0320 	and.w	r3, r3, #32
 8002752:	2b00      	cmp	r3, #0
 8002754:	d009      	beq.n	800276a <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	015a      	lsls	r2, r3, #5
 800275a:	69bb      	ldr	r3, [r7, #24]
 800275c:	4413      	add	r3, r2
 800275e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002762:	461a      	mov	r2, r3
 8002764:	2320      	movs	r3, #32
 8002766:	6093      	str	r3, [r2, #8]
 8002768:	e098      	b.n	800289c <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800276a:	693b      	ldr	r3, [r7, #16]
 800276c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002770:	2b00      	cmp	r3, #0
 8002772:	f040 8093 	bne.w	800289c <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002776:	697b      	ldr	r3, [r7, #20]
 8002778:	4a4b      	ldr	r2, [pc, #300]	; (80028a8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800277a:	4293      	cmp	r3, r2
 800277c:	d90f      	bls.n	800279e <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800277e:	693b      	ldr	r3, [r7, #16]
 8002780:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002784:	2b00      	cmp	r3, #0
 8002786:	d00a      	beq.n	800279e <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	015a      	lsls	r2, r3, #5
 800278c:	69bb      	ldr	r3, [r7, #24]
 800278e:	4413      	add	r3, r2
 8002790:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002794:	461a      	mov	r2, r3
 8002796:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800279a:	6093      	str	r3, [r2, #8]
 800279c:	e07e      	b.n	800289c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800279e:	683a      	ldr	r2, [r7, #0]
 80027a0:	4613      	mov	r3, r2
 80027a2:	00db      	lsls	r3, r3, #3
 80027a4:	4413      	add	r3, r2
 80027a6:	009b      	lsls	r3, r3, #2
 80027a8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80027ac:	687a      	ldr	r2, [r7, #4]
 80027ae:	4413      	add	r3, r2
 80027b0:	3304      	adds	r3, #4
 80027b2:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	69da      	ldr	r2, [r3, #28]
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	0159      	lsls	r1, r3, #5
 80027bc:	69bb      	ldr	r3, [r7, #24]
 80027be:	440b      	add	r3, r1
 80027c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80027c4:	691b      	ldr	r3, [r3, #16]
 80027c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027ca:	1ad2      	subs	r2, r2, r3
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d114      	bne.n	8002800 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	699b      	ldr	r3, [r3, #24]
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d109      	bne.n	80027f2 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	6818      	ldr	r0, [r3, #0]
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80027e8:	461a      	mov	r2, r3
 80027ea:	2101      	movs	r1, #1
 80027ec:	f002 fd96 	bl	800531c <USB_EP0_OutStart>
 80027f0:	e006      	b.n	8002800 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	691a      	ldr	r2, [r3, #16]
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	6a1b      	ldr	r3, [r3, #32]
 80027fa:	441a      	add	r2, r3
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	b2db      	uxtb	r3, r3
 8002804:	4619      	mov	r1, r3
 8002806:	6878      	ldr	r0, [r7, #4]
 8002808:	f005 ff6e 	bl	80086e8 <HAL_PCD_DataOutStageCallback>
 800280c:	e046      	b.n	800289c <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800280e:	697b      	ldr	r3, [r7, #20]
 8002810:	4a26      	ldr	r2, [pc, #152]	; (80028ac <PCD_EP_OutXfrComplete_int+0x1cc>)
 8002812:	4293      	cmp	r3, r2
 8002814:	d124      	bne.n	8002860 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002816:	693b      	ldr	r3, [r7, #16]
 8002818:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800281c:	2b00      	cmp	r3, #0
 800281e:	d00a      	beq.n	8002836 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	015a      	lsls	r2, r3, #5
 8002824:	69bb      	ldr	r3, [r7, #24]
 8002826:	4413      	add	r3, r2
 8002828:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800282c:	461a      	mov	r2, r3
 800282e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002832:	6093      	str	r3, [r2, #8]
 8002834:	e032      	b.n	800289c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002836:	693b      	ldr	r3, [r7, #16]
 8002838:	f003 0320 	and.w	r3, r3, #32
 800283c:	2b00      	cmp	r3, #0
 800283e:	d008      	beq.n	8002852 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	015a      	lsls	r2, r3, #5
 8002844:	69bb      	ldr	r3, [r7, #24]
 8002846:	4413      	add	r3, r2
 8002848:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800284c:	461a      	mov	r2, r3
 800284e:	2320      	movs	r3, #32
 8002850:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002852:	683b      	ldr	r3, [r7, #0]
 8002854:	b2db      	uxtb	r3, r3
 8002856:	4619      	mov	r1, r3
 8002858:	6878      	ldr	r0, [r7, #4]
 800285a:	f005 ff45 	bl	80086e8 <HAL_PCD_DataOutStageCallback>
 800285e:	e01d      	b.n	800289c <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	2b00      	cmp	r3, #0
 8002864:	d114      	bne.n	8002890 <PCD_EP_OutXfrComplete_int+0x1b0>
 8002866:	6879      	ldr	r1, [r7, #4]
 8002868:	683a      	ldr	r2, [r7, #0]
 800286a:	4613      	mov	r3, r2
 800286c:	00db      	lsls	r3, r3, #3
 800286e:	4413      	add	r3, r2
 8002870:	009b      	lsls	r3, r3, #2
 8002872:	440b      	add	r3, r1
 8002874:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	2b00      	cmp	r3, #0
 800287c:	d108      	bne.n	8002890 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	6818      	ldr	r0, [r3, #0]
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002888:	461a      	mov	r2, r3
 800288a:	2100      	movs	r1, #0
 800288c:	f002 fd46 	bl	800531c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	b2db      	uxtb	r3, r3
 8002894:	4619      	mov	r1, r3
 8002896:	6878      	ldr	r0, [r7, #4]
 8002898:	f005 ff26 	bl	80086e8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800289c:	2300      	movs	r3, #0
}
 800289e:	4618      	mov	r0, r3
 80028a0:	3720      	adds	r7, #32
 80028a2:	46bd      	mov	sp, r7
 80028a4:	bd80      	pop	{r7, pc}
 80028a6:	bf00      	nop
 80028a8:	4f54300a 	.word	0x4f54300a
 80028ac:	4f54310a 	.word	0x4f54310a

080028b0 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b086      	sub	sp, #24
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
 80028b8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80028c0:	697b      	ldr	r3, [r7, #20]
 80028c2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80028c4:	697b      	ldr	r3, [r7, #20]
 80028c6:	333c      	adds	r3, #60	; 0x3c
 80028c8:	3304      	adds	r3, #4
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	015a      	lsls	r2, r3, #5
 80028d2:	693b      	ldr	r3, [r7, #16]
 80028d4:	4413      	add	r3, r2
 80028d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80028da:	689b      	ldr	r3, [r3, #8]
 80028dc:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	4a15      	ldr	r2, [pc, #84]	; (8002938 <PCD_EP_OutSetupPacket_int+0x88>)
 80028e2:	4293      	cmp	r3, r2
 80028e4:	d90e      	bls.n	8002904 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80028e6:	68bb      	ldr	r3, [r7, #8]
 80028e8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d009      	beq.n	8002904 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	015a      	lsls	r2, r3, #5
 80028f4:	693b      	ldr	r3, [r7, #16]
 80028f6:	4413      	add	r3, r2
 80028f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80028fc:	461a      	mov	r2, r3
 80028fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002902:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002904:	6878      	ldr	r0, [r7, #4]
 8002906:	f005 fedd 	bl	80086c4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	4a0a      	ldr	r2, [pc, #40]	; (8002938 <PCD_EP_OutSetupPacket_int+0x88>)
 800290e:	4293      	cmp	r3, r2
 8002910:	d90c      	bls.n	800292c <PCD_EP_OutSetupPacket_int+0x7c>
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	691b      	ldr	r3, [r3, #16]
 8002916:	2b01      	cmp	r3, #1
 8002918:	d108      	bne.n	800292c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6818      	ldr	r0, [r3, #0]
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002924:	461a      	mov	r2, r3
 8002926:	2101      	movs	r1, #1
 8002928:	f002 fcf8 	bl	800531c <USB_EP0_OutStart>
  }

  return HAL_OK;
 800292c:	2300      	movs	r3, #0
}
 800292e:	4618      	mov	r0, r3
 8002930:	3718      	adds	r7, #24
 8002932:	46bd      	mov	sp, r7
 8002934:	bd80      	pop	{r7, pc}
 8002936:	bf00      	nop
 8002938:	4f54300a 	.word	0x4f54300a

0800293c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800293c:	b480      	push	{r7}
 800293e:	b085      	sub	sp, #20
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
 8002944:	460b      	mov	r3, r1
 8002946:	70fb      	strb	r3, [r7, #3]
 8002948:	4613      	mov	r3, r2
 800294a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002952:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002954:	78fb      	ldrb	r3, [r7, #3]
 8002956:	2b00      	cmp	r3, #0
 8002958:	d107      	bne.n	800296a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800295a:	883b      	ldrh	r3, [r7, #0]
 800295c:	0419      	lsls	r1, r3, #16
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	68ba      	ldr	r2, [r7, #8]
 8002964:	430a      	orrs	r2, r1
 8002966:	629a      	str	r2, [r3, #40]	; 0x28
 8002968:	e028      	b.n	80029bc <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002970:	0c1b      	lsrs	r3, r3, #16
 8002972:	68ba      	ldr	r2, [r7, #8]
 8002974:	4413      	add	r3, r2
 8002976:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002978:	2300      	movs	r3, #0
 800297a:	73fb      	strb	r3, [r7, #15]
 800297c:	e00d      	b.n	800299a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681a      	ldr	r2, [r3, #0]
 8002982:	7bfb      	ldrb	r3, [r7, #15]
 8002984:	3340      	adds	r3, #64	; 0x40
 8002986:	009b      	lsls	r3, r3, #2
 8002988:	4413      	add	r3, r2
 800298a:	685b      	ldr	r3, [r3, #4]
 800298c:	0c1b      	lsrs	r3, r3, #16
 800298e:	68ba      	ldr	r2, [r7, #8]
 8002990:	4413      	add	r3, r2
 8002992:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002994:	7bfb      	ldrb	r3, [r7, #15]
 8002996:	3301      	adds	r3, #1
 8002998:	73fb      	strb	r3, [r7, #15]
 800299a:	7bfa      	ldrb	r2, [r7, #15]
 800299c:	78fb      	ldrb	r3, [r7, #3]
 800299e:	3b01      	subs	r3, #1
 80029a0:	429a      	cmp	r2, r3
 80029a2:	d3ec      	bcc.n	800297e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80029a4:	883b      	ldrh	r3, [r7, #0]
 80029a6:	0418      	lsls	r0, r3, #16
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	6819      	ldr	r1, [r3, #0]
 80029ac:	78fb      	ldrb	r3, [r7, #3]
 80029ae:	3b01      	subs	r3, #1
 80029b0:	68ba      	ldr	r2, [r7, #8]
 80029b2:	4302      	orrs	r2, r0
 80029b4:	3340      	adds	r3, #64	; 0x40
 80029b6:	009b      	lsls	r3, r3, #2
 80029b8:	440b      	add	r3, r1
 80029ba:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80029bc:	2300      	movs	r3, #0
}
 80029be:	4618      	mov	r0, r3
 80029c0:	3714      	adds	r7, #20
 80029c2:	46bd      	mov	sp, r7
 80029c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c8:	4770      	bx	lr

080029ca <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80029ca:	b480      	push	{r7}
 80029cc:	b083      	sub	sp, #12
 80029ce:	af00      	add	r7, sp, #0
 80029d0:	6078      	str	r0, [r7, #4]
 80029d2:	460b      	mov	r3, r1
 80029d4:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	887a      	ldrh	r2, [r7, #2]
 80029dc:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80029de:	2300      	movs	r3, #0
}
 80029e0:	4618      	mov	r0, r3
 80029e2:	370c      	adds	r7, #12
 80029e4:	46bd      	mov	sp, r7
 80029e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ea:	4770      	bx	lr

080029ec <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80029ec:	b480      	push	{r7}
 80029ee:	b083      	sub	sp, #12
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
 80029f4:	460b      	mov	r3, r1
 80029f6:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80029f8:	bf00      	nop
 80029fa:	370c      	adds	r7, #12
 80029fc:	46bd      	mov	sp, r7
 80029fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a02:	4770      	bx	lr

08002a04 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b086      	sub	sp, #24
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d101      	bne.n	8002a16 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002a12:	2301      	movs	r3, #1
 8002a14:	e267      	b.n	8002ee6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f003 0301 	and.w	r3, r3, #1
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d075      	beq.n	8002b0e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002a22:	4b88      	ldr	r3, [pc, #544]	; (8002c44 <HAL_RCC_OscConfig+0x240>)
 8002a24:	689b      	ldr	r3, [r3, #8]
 8002a26:	f003 030c 	and.w	r3, r3, #12
 8002a2a:	2b04      	cmp	r3, #4
 8002a2c:	d00c      	beq.n	8002a48 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002a2e:	4b85      	ldr	r3, [pc, #532]	; (8002c44 <HAL_RCC_OscConfig+0x240>)
 8002a30:	689b      	ldr	r3, [r3, #8]
 8002a32:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002a36:	2b08      	cmp	r3, #8
 8002a38:	d112      	bne.n	8002a60 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002a3a:	4b82      	ldr	r3, [pc, #520]	; (8002c44 <HAL_RCC_OscConfig+0x240>)
 8002a3c:	685b      	ldr	r3, [r3, #4]
 8002a3e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a42:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002a46:	d10b      	bne.n	8002a60 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a48:	4b7e      	ldr	r3, [pc, #504]	; (8002c44 <HAL_RCC_OscConfig+0x240>)
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d05b      	beq.n	8002b0c <HAL_RCC_OscConfig+0x108>
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	685b      	ldr	r3, [r3, #4]
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d157      	bne.n	8002b0c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002a5c:	2301      	movs	r3, #1
 8002a5e:	e242      	b.n	8002ee6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	685b      	ldr	r3, [r3, #4]
 8002a64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a68:	d106      	bne.n	8002a78 <HAL_RCC_OscConfig+0x74>
 8002a6a:	4b76      	ldr	r3, [pc, #472]	; (8002c44 <HAL_RCC_OscConfig+0x240>)
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	4a75      	ldr	r2, [pc, #468]	; (8002c44 <HAL_RCC_OscConfig+0x240>)
 8002a70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a74:	6013      	str	r3, [r2, #0]
 8002a76:	e01d      	b.n	8002ab4 <HAL_RCC_OscConfig+0xb0>
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	685b      	ldr	r3, [r3, #4]
 8002a7c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002a80:	d10c      	bne.n	8002a9c <HAL_RCC_OscConfig+0x98>
 8002a82:	4b70      	ldr	r3, [pc, #448]	; (8002c44 <HAL_RCC_OscConfig+0x240>)
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	4a6f      	ldr	r2, [pc, #444]	; (8002c44 <HAL_RCC_OscConfig+0x240>)
 8002a88:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a8c:	6013      	str	r3, [r2, #0]
 8002a8e:	4b6d      	ldr	r3, [pc, #436]	; (8002c44 <HAL_RCC_OscConfig+0x240>)
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	4a6c      	ldr	r2, [pc, #432]	; (8002c44 <HAL_RCC_OscConfig+0x240>)
 8002a94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a98:	6013      	str	r3, [r2, #0]
 8002a9a:	e00b      	b.n	8002ab4 <HAL_RCC_OscConfig+0xb0>
 8002a9c:	4b69      	ldr	r3, [pc, #420]	; (8002c44 <HAL_RCC_OscConfig+0x240>)
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	4a68      	ldr	r2, [pc, #416]	; (8002c44 <HAL_RCC_OscConfig+0x240>)
 8002aa2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002aa6:	6013      	str	r3, [r2, #0]
 8002aa8:	4b66      	ldr	r3, [pc, #408]	; (8002c44 <HAL_RCC_OscConfig+0x240>)
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	4a65      	ldr	r2, [pc, #404]	; (8002c44 <HAL_RCC_OscConfig+0x240>)
 8002aae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ab2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	685b      	ldr	r3, [r3, #4]
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d013      	beq.n	8002ae4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002abc:	f7fd fdc8 	bl	8000650 <HAL_GetTick>
 8002ac0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ac2:	e008      	b.n	8002ad6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002ac4:	f7fd fdc4 	bl	8000650 <HAL_GetTick>
 8002ac8:	4602      	mov	r2, r0
 8002aca:	693b      	ldr	r3, [r7, #16]
 8002acc:	1ad3      	subs	r3, r2, r3
 8002ace:	2b64      	cmp	r3, #100	; 0x64
 8002ad0:	d901      	bls.n	8002ad6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002ad2:	2303      	movs	r3, #3
 8002ad4:	e207      	b.n	8002ee6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ad6:	4b5b      	ldr	r3, [pc, #364]	; (8002c44 <HAL_RCC_OscConfig+0x240>)
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d0f0      	beq.n	8002ac4 <HAL_RCC_OscConfig+0xc0>
 8002ae2:	e014      	b.n	8002b0e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ae4:	f7fd fdb4 	bl	8000650 <HAL_GetTick>
 8002ae8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002aea:	e008      	b.n	8002afe <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002aec:	f7fd fdb0 	bl	8000650 <HAL_GetTick>
 8002af0:	4602      	mov	r2, r0
 8002af2:	693b      	ldr	r3, [r7, #16]
 8002af4:	1ad3      	subs	r3, r2, r3
 8002af6:	2b64      	cmp	r3, #100	; 0x64
 8002af8:	d901      	bls.n	8002afe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002afa:	2303      	movs	r3, #3
 8002afc:	e1f3      	b.n	8002ee6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002afe:	4b51      	ldr	r3, [pc, #324]	; (8002c44 <HAL_RCC_OscConfig+0x240>)
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d1f0      	bne.n	8002aec <HAL_RCC_OscConfig+0xe8>
 8002b0a:	e000      	b.n	8002b0e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b0c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f003 0302 	and.w	r3, r3, #2
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d063      	beq.n	8002be2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002b1a:	4b4a      	ldr	r3, [pc, #296]	; (8002c44 <HAL_RCC_OscConfig+0x240>)
 8002b1c:	689b      	ldr	r3, [r3, #8]
 8002b1e:	f003 030c 	and.w	r3, r3, #12
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d00b      	beq.n	8002b3e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002b26:	4b47      	ldr	r3, [pc, #284]	; (8002c44 <HAL_RCC_OscConfig+0x240>)
 8002b28:	689b      	ldr	r3, [r3, #8]
 8002b2a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002b2e:	2b08      	cmp	r3, #8
 8002b30:	d11c      	bne.n	8002b6c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002b32:	4b44      	ldr	r3, [pc, #272]	; (8002c44 <HAL_RCC_OscConfig+0x240>)
 8002b34:	685b      	ldr	r3, [r3, #4]
 8002b36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d116      	bne.n	8002b6c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b3e:	4b41      	ldr	r3, [pc, #260]	; (8002c44 <HAL_RCC_OscConfig+0x240>)
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f003 0302 	and.w	r3, r3, #2
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d005      	beq.n	8002b56 <HAL_RCC_OscConfig+0x152>
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	68db      	ldr	r3, [r3, #12]
 8002b4e:	2b01      	cmp	r3, #1
 8002b50:	d001      	beq.n	8002b56 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002b52:	2301      	movs	r3, #1
 8002b54:	e1c7      	b.n	8002ee6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b56:	4b3b      	ldr	r3, [pc, #236]	; (8002c44 <HAL_RCC_OscConfig+0x240>)
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	691b      	ldr	r3, [r3, #16]
 8002b62:	00db      	lsls	r3, r3, #3
 8002b64:	4937      	ldr	r1, [pc, #220]	; (8002c44 <HAL_RCC_OscConfig+0x240>)
 8002b66:	4313      	orrs	r3, r2
 8002b68:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b6a:	e03a      	b.n	8002be2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	68db      	ldr	r3, [r3, #12]
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d020      	beq.n	8002bb6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b74:	4b34      	ldr	r3, [pc, #208]	; (8002c48 <HAL_RCC_OscConfig+0x244>)
 8002b76:	2201      	movs	r2, #1
 8002b78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b7a:	f7fd fd69 	bl	8000650 <HAL_GetTick>
 8002b7e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b80:	e008      	b.n	8002b94 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b82:	f7fd fd65 	bl	8000650 <HAL_GetTick>
 8002b86:	4602      	mov	r2, r0
 8002b88:	693b      	ldr	r3, [r7, #16]
 8002b8a:	1ad3      	subs	r3, r2, r3
 8002b8c:	2b02      	cmp	r3, #2
 8002b8e:	d901      	bls.n	8002b94 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002b90:	2303      	movs	r3, #3
 8002b92:	e1a8      	b.n	8002ee6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b94:	4b2b      	ldr	r3, [pc, #172]	; (8002c44 <HAL_RCC_OscConfig+0x240>)
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f003 0302 	and.w	r3, r3, #2
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d0f0      	beq.n	8002b82 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ba0:	4b28      	ldr	r3, [pc, #160]	; (8002c44 <HAL_RCC_OscConfig+0x240>)
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	691b      	ldr	r3, [r3, #16]
 8002bac:	00db      	lsls	r3, r3, #3
 8002bae:	4925      	ldr	r1, [pc, #148]	; (8002c44 <HAL_RCC_OscConfig+0x240>)
 8002bb0:	4313      	orrs	r3, r2
 8002bb2:	600b      	str	r3, [r1, #0]
 8002bb4:	e015      	b.n	8002be2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002bb6:	4b24      	ldr	r3, [pc, #144]	; (8002c48 <HAL_RCC_OscConfig+0x244>)
 8002bb8:	2200      	movs	r2, #0
 8002bba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bbc:	f7fd fd48 	bl	8000650 <HAL_GetTick>
 8002bc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002bc2:	e008      	b.n	8002bd6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002bc4:	f7fd fd44 	bl	8000650 <HAL_GetTick>
 8002bc8:	4602      	mov	r2, r0
 8002bca:	693b      	ldr	r3, [r7, #16]
 8002bcc:	1ad3      	subs	r3, r2, r3
 8002bce:	2b02      	cmp	r3, #2
 8002bd0:	d901      	bls.n	8002bd6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002bd2:	2303      	movs	r3, #3
 8002bd4:	e187      	b.n	8002ee6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002bd6:	4b1b      	ldr	r3, [pc, #108]	; (8002c44 <HAL_RCC_OscConfig+0x240>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f003 0302 	and.w	r3, r3, #2
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d1f0      	bne.n	8002bc4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f003 0308 	and.w	r3, r3, #8
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d036      	beq.n	8002c5c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	695b      	ldr	r3, [r3, #20]
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d016      	beq.n	8002c24 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002bf6:	4b15      	ldr	r3, [pc, #84]	; (8002c4c <HAL_RCC_OscConfig+0x248>)
 8002bf8:	2201      	movs	r2, #1
 8002bfa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bfc:	f7fd fd28 	bl	8000650 <HAL_GetTick>
 8002c00:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c02:	e008      	b.n	8002c16 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c04:	f7fd fd24 	bl	8000650 <HAL_GetTick>
 8002c08:	4602      	mov	r2, r0
 8002c0a:	693b      	ldr	r3, [r7, #16]
 8002c0c:	1ad3      	subs	r3, r2, r3
 8002c0e:	2b02      	cmp	r3, #2
 8002c10:	d901      	bls.n	8002c16 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002c12:	2303      	movs	r3, #3
 8002c14:	e167      	b.n	8002ee6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c16:	4b0b      	ldr	r3, [pc, #44]	; (8002c44 <HAL_RCC_OscConfig+0x240>)
 8002c18:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c1a:	f003 0302 	and.w	r3, r3, #2
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d0f0      	beq.n	8002c04 <HAL_RCC_OscConfig+0x200>
 8002c22:	e01b      	b.n	8002c5c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c24:	4b09      	ldr	r3, [pc, #36]	; (8002c4c <HAL_RCC_OscConfig+0x248>)
 8002c26:	2200      	movs	r2, #0
 8002c28:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c2a:	f7fd fd11 	bl	8000650 <HAL_GetTick>
 8002c2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c30:	e00e      	b.n	8002c50 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c32:	f7fd fd0d 	bl	8000650 <HAL_GetTick>
 8002c36:	4602      	mov	r2, r0
 8002c38:	693b      	ldr	r3, [r7, #16]
 8002c3a:	1ad3      	subs	r3, r2, r3
 8002c3c:	2b02      	cmp	r3, #2
 8002c3e:	d907      	bls.n	8002c50 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002c40:	2303      	movs	r3, #3
 8002c42:	e150      	b.n	8002ee6 <HAL_RCC_OscConfig+0x4e2>
 8002c44:	40023800 	.word	0x40023800
 8002c48:	42470000 	.word	0x42470000
 8002c4c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c50:	4b88      	ldr	r3, [pc, #544]	; (8002e74 <HAL_RCC_OscConfig+0x470>)
 8002c52:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c54:	f003 0302 	and.w	r3, r3, #2
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d1ea      	bne.n	8002c32 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f003 0304 	and.w	r3, r3, #4
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	f000 8097 	beq.w	8002d98 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c6e:	4b81      	ldr	r3, [pc, #516]	; (8002e74 <HAL_RCC_OscConfig+0x470>)
 8002c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d10f      	bne.n	8002c9a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	60bb      	str	r3, [r7, #8]
 8002c7e:	4b7d      	ldr	r3, [pc, #500]	; (8002e74 <HAL_RCC_OscConfig+0x470>)
 8002c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c82:	4a7c      	ldr	r2, [pc, #496]	; (8002e74 <HAL_RCC_OscConfig+0x470>)
 8002c84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c88:	6413      	str	r3, [r2, #64]	; 0x40
 8002c8a:	4b7a      	ldr	r3, [pc, #488]	; (8002e74 <HAL_RCC_OscConfig+0x470>)
 8002c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c92:	60bb      	str	r3, [r7, #8]
 8002c94:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c96:	2301      	movs	r3, #1
 8002c98:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c9a:	4b77      	ldr	r3, [pc, #476]	; (8002e78 <HAL_RCC_OscConfig+0x474>)
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d118      	bne.n	8002cd8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002ca6:	4b74      	ldr	r3, [pc, #464]	; (8002e78 <HAL_RCC_OscConfig+0x474>)
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	4a73      	ldr	r2, [pc, #460]	; (8002e78 <HAL_RCC_OscConfig+0x474>)
 8002cac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002cb0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002cb2:	f7fd fccd 	bl	8000650 <HAL_GetTick>
 8002cb6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cb8:	e008      	b.n	8002ccc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002cba:	f7fd fcc9 	bl	8000650 <HAL_GetTick>
 8002cbe:	4602      	mov	r2, r0
 8002cc0:	693b      	ldr	r3, [r7, #16]
 8002cc2:	1ad3      	subs	r3, r2, r3
 8002cc4:	2b02      	cmp	r3, #2
 8002cc6:	d901      	bls.n	8002ccc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002cc8:	2303      	movs	r3, #3
 8002cca:	e10c      	b.n	8002ee6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ccc:	4b6a      	ldr	r3, [pc, #424]	; (8002e78 <HAL_RCC_OscConfig+0x474>)
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d0f0      	beq.n	8002cba <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	689b      	ldr	r3, [r3, #8]
 8002cdc:	2b01      	cmp	r3, #1
 8002cde:	d106      	bne.n	8002cee <HAL_RCC_OscConfig+0x2ea>
 8002ce0:	4b64      	ldr	r3, [pc, #400]	; (8002e74 <HAL_RCC_OscConfig+0x470>)
 8002ce2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ce4:	4a63      	ldr	r2, [pc, #396]	; (8002e74 <HAL_RCC_OscConfig+0x470>)
 8002ce6:	f043 0301 	orr.w	r3, r3, #1
 8002cea:	6713      	str	r3, [r2, #112]	; 0x70
 8002cec:	e01c      	b.n	8002d28 <HAL_RCC_OscConfig+0x324>
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	689b      	ldr	r3, [r3, #8]
 8002cf2:	2b05      	cmp	r3, #5
 8002cf4:	d10c      	bne.n	8002d10 <HAL_RCC_OscConfig+0x30c>
 8002cf6:	4b5f      	ldr	r3, [pc, #380]	; (8002e74 <HAL_RCC_OscConfig+0x470>)
 8002cf8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cfa:	4a5e      	ldr	r2, [pc, #376]	; (8002e74 <HAL_RCC_OscConfig+0x470>)
 8002cfc:	f043 0304 	orr.w	r3, r3, #4
 8002d00:	6713      	str	r3, [r2, #112]	; 0x70
 8002d02:	4b5c      	ldr	r3, [pc, #368]	; (8002e74 <HAL_RCC_OscConfig+0x470>)
 8002d04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d06:	4a5b      	ldr	r2, [pc, #364]	; (8002e74 <HAL_RCC_OscConfig+0x470>)
 8002d08:	f043 0301 	orr.w	r3, r3, #1
 8002d0c:	6713      	str	r3, [r2, #112]	; 0x70
 8002d0e:	e00b      	b.n	8002d28 <HAL_RCC_OscConfig+0x324>
 8002d10:	4b58      	ldr	r3, [pc, #352]	; (8002e74 <HAL_RCC_OscConfig+0x470>)
 8002d12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d14:	4a57      	ldr	r2, [pc, #348]	; (8002e74 <HAL_RCC_OscConfig+0x470>)
 8002d16:	f023 0301 	bic.w	r3, r3, #1
 8002d1a:	6713      	str	r3, [r2, #112]	; 0x70
 8002d1c:	4b55      	ldr	r3, [pc, #340]	; (8002e74 <HAL_RCC_OscConfig+0x470>)
 8002d1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d20:	4a54      	ldr	r2, [pc, #336]	; (8002e74 <HAL_RCC_OscConfig+0x470>)
 8002d22:	f023 0304 	bic.w	r3, r3, #4
 8002d26:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	689b      	ldr	r3, [r3, #8]
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d015      	beq.n	8002d5c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d30:	f7fd fc8e 	bl	8000650 <HAL_GetTick>
 8002d34:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d36:	e00a      	b.n	8002d4e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d38:	f7fd fc8a 	bl	8000650 <HAL_GetTick>
 8002d3c:	4602      	mov	r2, r0
 8002d3e:	693b      	ldr	r3, [r7, #16]
 8002d40:	1ad3      	subs	r3, r2, r3
 8002d42:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d46:	4293      	cmp	r3, r2
 8002d48:	d901      	bls.n	8002d4e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002d4a:	2303      	movs	r3, #3
 8002d4c:	e0cb      	b.n	8002ee6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d4e:	4b49      	ldr	r3, [pc, #292]	; (8002e74 <HAL_RCC_OscConfig+0x470>)
 8002d50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d52:	f003 0302 	and.w	r3, r3, #2
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d0ee      	beq.n	8002d38 <HAL_RCC_OscConfig+0x334>
 8002d5a:	e014      	b.n	8002d86 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d5c:	f7fd fc78 	bl	8000650 <HAL_GetTick>
 8002d60:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d62:	e00a      	b.n	8002d7a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d64:	f7fd fc74 	bl	8000650 <HAL_GetTick>
 8002d68:	4602      	mov	r2, r0
 8002d6a:	693b      	ldr	r3, [r7, #16]
 8002d6c:	1ad3      	subs	r3, r2, r3
 8002d6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d72:	4293      	cmp	r3, r2
 8002d74:	d901      	bls.n	8002d7a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002d76:	2303      	movs	r3, #3
 8002d78:	e0b5      	b.n	8002ee6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d7a:	4b3e      	ldr	r3, [pc, #248]	; (8002e74 <HAL_RCC_OscConfig+0x470>)
 8002d7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d7e:	f003 0302 	and.w	r3, r3, #2
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d1ee      	bne.n	8002d64 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002d86:	7dfb      	ldrb	r3, [r7, #23]
 8002d88:	2b01      	cmp	r3, #1
 8002d8a:	d105      	bne.n	8002d98 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d8c:	4b39      	ldr	r3, [pc, #228]	; (8002e74 <HAL_RCC_OscConfig+0x470>)
 8002d8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d90:	4a38      	ldr	r2, [pc, #224]	; (8002e74 <HAL_RCC_OscConfig+0x470>)
 8002d92:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d96:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	699b      	ldr	r3, [r3, #24]
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	f000 80a1 	beq.w	8002ee4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002da2:	4b34      	ldr	r3, [pc, #208]	; (8002e74 <HAL_RCC_OscConfig+0x470>)
 8002da4:	689b      	ldr	r3, [r3, #8]
 8002da6:	f003 030c 	and.w	r3, r3, #12
 8002daa:	2b08      	cmp	r3, #8
 8002dac:	d05c      	beq.n	8002e68 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	699b      	ldr	r3, [r3, #24]
 8002db2:	2b02      	cmp	r3, #2
 8002db4:	d141      	bne.n	8002e3a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002db6:	4b31      	ldr	r3, [pc, #196]	; (8002e7c <HAL_RCC_OscConfig+0x478>)
 8002db8:	2200      	movs	r2, #0
 8002dba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dbc:	f7fd fc48 	bl	8000650 <HAL_GetTick>
 8002dc0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002dc2:	e008      	b.n	8002dd6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002dc4:	f7fd fc44 	bl	8000650 <HAL_GetTick>
 8002dc8:	4602      	mov	r2, r0
 8002dca:	693b      	ldr	r3, [r7, #16]
 8002dcc:	1ad3      	subs	r3, r2, r3
 8002dce:	2b02      	cmp	r3, #2
 8002dd0:	d901      	bls.n	8002dd6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002dd2:	2303      	movs	r3, #3
 8002dd4:	e087      	b.n	8002ee6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002dd6:	4b27      	ldr	r3, [pc, #156]	; (8002e74 <HAL_RCC_OscConfig+0x470>)
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d1f0      	bne.n	8002dc4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	69da      	ldr	r2, [r3, #28]
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6a1b      	ldr	r3, [r3, #32]
 8002dea:	431a      	orrs	r2, r3
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002df0:	019b      	lsls	r3, r3, #6
 8002df2:	431a      	orrs	r2, r3
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002df8:	085b      	lsrs	r3, r3, #1
 8002dfa:	3b01      	subs	r3, #1
 8002dfc:	041b      	lsls	r3, r3, #16
 8002dfe:	431a      	orrs	r2, r3
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e04:	061b      	lsls	r3, r3, #24
 8002e06:	491b      	ldr	r1, [pc, #108]	; (8002e74 <HAL_RCC_OscConfig+0x470>)
 8002e08:	4313      	orrs	r3, r2
 8002e0a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e0c:	4b1b      	ldr	r3, [pc, #108]	; (8002e7c <HAL_RCC_OscConfig+0x478>)
 8002e0e:	2201      	movs	r2, #1
 8002e10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e12:	f7fd fc1d 	bl	8000650 <HAL_GetTick>
 8002e16:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e18:	e008      	b.n	8002e2c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e1a:	f7fd fc19 	bl	8000650 <HAL_GetTick>
 8002e1e:	4602      	mov	r2, r0
 8002e20:	693b      	ldr	r3, [r7, #16]
 8002e22:	1ad3      	subs	r3, r2, r3
 8002e24:	2b02      	cmp	r3, #2
 8002e26:	d901      	bls.n	8002e2c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002e28:	2303      	movs	r3, #3
 8002e2a:	e05c      	b.n	8002ee6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e2c:	4b11      	ldr	r3, [pc, #68]	; (8002e74 <HAL_RCC_OscConfig+0x470>)
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d0f0      	beq.n	8002e1a <HAL_RCC_OscConfig+0x416>
 8002e38:	e054      	b.n	8002ee4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e3a:	4b10      	ldr	r3, [pc, #64]	; (8002e7c <HAL_RCC_OscConfig+0x478>)
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e40:	f7fd fc06 	bl	8000650 <HAL_GetTick>
 8002e44:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e46:	e008      	b.n	8002e5a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e48:	f7fd fc02 	bl	8000650 <HAL_GetTick>
 8002e4c:	4602      	mov	r2, r0
 8002e4e:	693b      	ldr	r3, [r7, #16]
 8002e50:	1ad3      	subs	r3, r2, r3
 8002e52:	2b02      	cmp	r3, #2
 8002e54:	d901      	bls.n	8002e5a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002e56:	2303      	movs	r3, #3
 8002e58:	e045      	b.n	8002ee6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e5a:	4b06      	ldr	r3, [pc, #24]	; (8002e74 <HAL_RCC_OscConfig+0x470>)
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d1f0      	bne.n	8002e48 <HAL_RCC_OscConfig+0x444>
 8002e66:	e03d      	b.n	8002ee4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	699b      	ldr	r3, [r3, #24]
 8002e6c:	2b01      	cmp	r3, #1
 8002e6e:	d107      	bne.n	8002e80 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002e70:	2301      	movs	r3, #1
 8002e72:	e038      	b.n	8002ee6 <HAL_RCC_OscConfig+0x4e2>
 8002e74:	40023800 	.word	0x40023800
 8002e78:	40007000 	.word	0x40007000
 8002e7c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002e80:	4b1b      	ldr	r3, [pc, #108]	; (8002ef0 <HAL_RCC_OscConfig+0x4ec>)
 8002e82:	685b      	ldr	r3, [r3, #4]
 8002e84:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	699b      	ldr	r3, [r3, #24]
 8002e8a:	2b01      	cmp	r3, #1
 8002e8c:	d028      	beq.n	8002ee0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e98:	429a      	cmp	r2, r3
 8002e9a:	d121      	bne.n	8002ee0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ea6:	429a      	cmp	r2, r3
 8002ea8:	d11a      	bne.n	8002ee0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002eaa:	68fa      	ldr	r2, [r7, #12]
 8002eac:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002eb0:	4013      	ands	r3, r2
 8002eb2:	687a      	ldr	r2, [r7, #4]
 8002eb4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002eb6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002eb8:	4293      	cmp	r3, r2
 8002eba:	d111      	bne.n	8002ee0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ec6:	085b      	lsrs	r3, r3, #1
 8002ec8:	3b01      	subs	r3, #1
 8002eca:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002ecc:	429a      	cmp	r2, r3
 8002ece:	d107      	bne.n	8002ee0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002eda:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002edc:	429a      	cmp	r2, r3
 8002ede:	d001      	beq.n	8002ee4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002ee0:	2301      	movs	r3, #1
 8002ee2:	e000      	b.n	8002ee6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002ee4:	2300      	movs	r3, #0
}
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	3718      	adds	r7, #24
 8002eea:	46bd      	mov	sp, r7
 8002eec:	bd80      	pop	{r7, pc}
 8002eee:	bf00      	nop
 8002ef0:	40023800 	.word	0x40023800

08002ef4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	b084      	sub	sp, #16
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
 8002efc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d101      	bne.n	8002f08 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f04:	2301      	movs	r3, #1
 8002f06:	e0cc      	b.n	80030a2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002f08:	4b68      	ldr	r3, [pc, #416]	; (80030ac <HAL_RCC_ClockConfig+0x1b8>)
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f003 0307 	and.w	r3, r3, #7
 8002f10:	683a      	ldr	r2, [r7, #0]
 8002f12:	429a      	cmp	r2, r3
 8002f14:	d90c      	bls.n	8002f30 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f16:	4b65      	ldr	r3, [pc, #404]	; (80030ac <HAL_RCC_ClockConfig+0x1b8>)
 8002f18:	683a      	ldr	r2, [r7, #0]
 8002f1a:	b2d2      	uxtb	r2, r2
 8002f1c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f1e:	4b63      	ldr	r3, [pc, #396]	; (80030ac <HAL_RCC_ClockConfig+0x1b8>)
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f003 0307 	and.w	r3, r3, #7
 8002f26:	683a      	ldr	r2, [r7, #0]
 8002f28:	429a      	cmp	r2, r3
 8002f2a:	d001      	beq.n	8002f30 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002f2c:	2301      	movs	r3, #1
 8002f2e:	e0b8      	b.n	80030a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f003 0302 	and.w	r3, r3, #2
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d020      	beq.n	8002f7e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f003 0304 	and.w	r3, r3, #4
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d005      	beq.n	8002f54 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002f48:	4b59      	ldr	r3, [pc, #356]	; (80030b0 <HAL_RCC_ClockConfig+0x1bc>)
 8002f4a:	689b      	ldr	r3, [r3, #8]
 8002f4c:	4a58      	ldr	r2, [pc, #352]	; (80030b0 <HAL_RCC_ClockConfig+0x1bc>)
 8002f4e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002f52:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f003 0308 	and.w	r3, r3, #8
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d005      	beq.n	8002f6c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002f60:	4b53      	ldr	r3, [pc, #332]	; (80030b0 <HAL_RCC_ClockConfig+0x1bc>)
 8002f62:	689b      	ldr	r3, [r3, #8]
 8002f64:	4a52      	ldr	r2, [pc, #328]	; (80030b0 <HAL_RCC_ClockConfig+0x1bc>)
 8002f66:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002f6a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f6c:	4b50      	ldr	r3, [pc, #320]	; (80030b0 <HAL_RCC_ClockConfig+0x1bc>)
 8002f6e:	689b      	ldr	r3, [r3, #8]
 8002f70:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	689b      	ldr	r3, [r3, #8]
 8002f78:	494d      	ldr	r1, [pc, #308]	; (80030b0 <HAL_RCC_ClockConfig+0x1bc>)
 8002f7a:	4313      	orrs	r3, r2
 8002f7c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f003 0301 	and.w	r3, r3, #1
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d044      	beq.n	8003014 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	685b      	ldr	r3, [r3, #4]
 8002f8e:	2b01      	cmp	r3, #1
 8002f90:	d107      	bne.n	8002fa2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f92:	4b47      	ldr	r3, [pc, #284]	; (80030b0 <HAL_RCC_ClockConfig+0x1bc>)
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d119      	bne.n	8002fd2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f9e:	2301      	movs	r3, #1
 8002fa0:	e07f      	b.n	80030a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	685b      	ldr	r3, [r3, #4]
 8002fa6:	2b02      	cmp	r3, #2
 8002fa8:	d003      	beq.n	8002fb2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002fae:	2b03      	cmp	r3, #3
 8002fb0:	d107      	bne.n	8002fc2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002fb2:	4b3f      	ldr	r3, [pc, #252]	; (80030b0 <HAL_RCC_ClockConfig+0x1bc>)
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d109      	bne.n	8002fd2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002fbe:	2301      	movs	r3, #1
 8002fc0:	e06f      	b.n	80030a2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fc2:	4b3b      	ldr	r3, [pc, #236]	; (80030b0 <HAL_RCC_ClockConfig+0x1bc>)
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f003 0302 	and.w	r3, r3, #2
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d101      	bne.n	8002fd2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002fce:	2301      	movs	r3, #1
 8002fd0:	e067      	b.n	80030a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002fd2:	4b37      	ldr	r3, [pc, #220]	; (80030b0 <HAL_RCC_ClockConfig+0x1bc>)
 8002fd4:	689b      	ldr	r3, [r3, #8]
 8002fd6:	f023 0203 	bic.w	r2, r3, #3
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	685b      	ldr	r3, [r3, #4]
 8002fde:	4934      	ldr	r1, [pc, #208]	; (80030b0 <HAL_RCC_ClockConfig+0x1bc>)
 8002fe0:	4313      	orrs	r3, r2
 8002fe2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002fe4:	f7fd fb34 	bl	8000650 <HAL_GetTick>
 8002fe8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fea:	e00a      	b.n	8003002 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002fec:	f7fd fb30 	bl	8000650 <HAL_GetTick>
 8002ff0:	4602      	mov	r2, r0
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	1ad3      	subs	r3, r2, r3
 8002ff6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ffa:	4293      	cmp	r3, r2
 8002ffc:	d901      	bls.n	8003002 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002ffe:	2303      	movs	r3, #3
 8003000:	e04f      	b.n	80030a2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003002:	4b2b      	ldr	r3, [pc, #172]	; (80030b0 <HAL_RCC_ClockConfig+0x1bc>)
 8003004:	689b      	ldr	r3, [r3, #8]
 8003006:	f003 020c 	and.w	r2, r3, #12
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	685b      	ldr	r3, [r3, #4]
 800300e:	009b      	lsls	r3, r3, #2
 8003010:	429a      	cmp	r2, r3
 8003012:	d1eb      	bne.n	8002fec <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003014:	4b25      	ldr	r3, [pc, #148]	; (80030ac <HAL_RCC_ClockConfig+0x1b8>)
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f003 0307 	and.w	r3, r3, #7
 800301c:	683a      	ldr	r2, [r7, #0]
 800301e:	429a      	cmp	r2, r3
 8003020:	d20c      	bcs.n	800303c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003022:	4b22      	ldr	r3, [pc, #136]	; (80030ac <HAL_RCC_ClockConfig+0x1b8>)
 8003024:	683a      	ldr	r2, [r7, #0]
 8003026:	b2d2      	uxtb	r2, r2
 8003028:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800302a:	4b20      	ldr	r3, [pc, #128]	; (80030ac <HAL_RCC_ClockConfig+0x1b8>)
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f003 0307 	and.w	r3, r3, #7
 8003032:	683a      	ldr	r2, [r7, #0]
 8003034:	429a      	cmp	r2, r3
 8003036:	d001      	beq.n	800303c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003038:	2301      	movs	r3, #1
 800303a:	e032      	b.n	80030a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f003 0304 	and.w	r3, r3, #4
 8003044:	2b00      	cmp	r3, #0
 8003046:	d008      	beq.n	800305a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003048:	4b19      	ldr	r3, [pc, #100]	; (80030b0 <HAL_RCC_ClockConfig+0x1bc>)
 800304a:	689b      	ldr	r3, [r3, #8]
 800304c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	68db      	ldr	r3, [r3, #12]
 8003054:	4916      	ldr	r1, [pc, #88]	; (80030b0 <HAL_RCC_ClockConfig+0x1bc>)
 8003056:	4313      	orrs	r3, r2
 8003058:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f003 0308 	and.w	r3, r3, #8
 8003062:	2b00      	cmp	r3, #0
 8003064:	d009      	beq.n	800307a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003066:	4b12      	ldr	r3, [pc, #72]	; (80030b0 <HAL_RCC_ClockConfig+0x1bc>)
 8003068:	689b      	ldr	r3, [r3, #8]
 800306a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	691b      	ldr	r3, [r3, #16]
 8003072:	00db      	lsls	r3, r3, #3
 8003074:	490e      	ldr	r1, [pc, #56]	; (80030b0 <HAL_RCC_ClockConfig+0x1bc>)
 8003076:	4313      	orrs	r3, r2
 8003078:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800307a:	f000 f821 	bl	80030c0 <HAL_RCC_GetSysClockFreq>
 800307e:	4602      	mov	r2, r0
 8003080:	4b0b      	ldr	r3, [pc, #44]	; (80030b0 <HAL_RCC_ClockConfig+0x1bc>)
 8003082:	689b      	ldr	r3, [r3, #8]
 8003084:	091b      	lsrs	r3, r3, #4
 8003086:	f003 030f 	and.w	r3, r3, #15
 800308a:	490a      	ldr	r1, [pc, #40]	; (80030b4 <HAL_RCC_ClockConfig+0x1c0>)
 800308c:	5ccb      	ldrb	r3, [r1, r3]
 800308e:	fa22 f303 	lsr.w	r3, r2, r3
 8003092:	4a09      	ldr	r2, [pc, #36]	; (80030b8 <HAL_RCC_ClockConfig+0x1c4>)
 8003094:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003096:	4b09      	ldr	r3, [pc, #36]	; (80030bc <HAL_RCC_ClockConfig+0x1c8>)
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	4618      	mov	r0, r3
 800309c:	f7fd fa94 	bl	80005c8 <HAL_InitTick>

  return HAL_OK;
 80030a0:	2300      	movs	r3, #0
}
 80030a2:	4618      	mov	r0, r3
 80030a4:	3710      	adds	r7, #16
 80030a6:	46bd      	mov	sp, r7
 80030a8:	bd80      	pop	{r7, pc}
 80030aa:	bf00      	nop
 80030ac:	40023c00 	.word	0x40023c00
 80030b0:	40023800 	.word	0x40023800
 80030b4:	0800a470 	.word	0x0800a470
 80030b8:	2000015c 	.word	0x2000015c
 80030bc:	20000000 	.word	0x20000000

080030c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80030c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80030c4:	b090      	sub	sp, #64	; 0x40
 80030c6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80030c8:	2300      	movs	r3, #0
 80030ca:	637b      	str	r3, [r7, #52]	; 0x34
 80030cc:	2300      	movs	r3, #0
 80030ce:	63fb      	str	r3, [r7, #60]	; 0x3c
 80030d0:	2300      	movs	r3, #0
 80030d2:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80030d4:	2300      	movs	r3, #0
 80030d6:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80030d8:	4b59      	ldr	r3, [pc, #356]	; (8003240 <HAL_RCC_GetSysClockFreq+0x180>)
 80030da:	689b      	ldr	r3, [r3, #8]
 80030dc:	f003 030c 	and.w	r3, r3, #12
 80030e0:	2b08      	cmp	r3, #8
 80030e2:	d00d      	beq.n	8003100 <HAL_RCC_GetSysClockFreq+0x40>
 80030e4:	2b08      	cmp	r3, #8
 80030e6:	f200 80a1 	bhi.w	800322c <HAL_RCC_GetSysClockFreq+0x16c>
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d002      	beq.n	80030f4 <HAL_RCC_GetSysClockFreq+0x34>
 80030ee:	2b04      	cmp	r3, #4
 80030f0:	d003      	beq.n	80030fa <HAL_RCC_GetSysClockFreq+0x3a>
 80030f2:	e09b      	b.n	800322c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80030f4:	4b53      	ldr	r3, [pc, #332]	; (8003244 <HAL_RCC_GetSysClockFreq+0x184>)
 80030f6:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80030f8:	e09b      	b.n	8003232 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80030fa:	4b53      	ldr	r3, [pc, #332]	; (8003248 <HAL_RCC_GetSysClockFreq+0x188>)
 80030fc:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80030fe:	e098      	b.n	8003232 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003100:	4b4f      	ldr	r3, [pc, #316]	; (8003240 <HAL_RCC_GetSysClockFreq+0x180>)
 8003102:	685b      	ldr	r3, [r3, #4]
 8003104:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003108:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800310a:	4b4d      	ldr	r3, [pc, #308]	; (8003240 <HAL_RCC_GetSysClockFreq+0x180>)
 800310c:	685b      	ldr	r3, [r3, #4]
 800310e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003112:	2b00      	cmp	r3, #0
 8003114:	d028      	beq.n	8003168 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003116:	4b4a      	ldr	r3, [pc, #296]	; (8003240 <HAL_RCC_GetSysClockFreq+0x180>)
 8003118:	685b      	ldr	r3, [r3, #4]
 800311a:	099b      	lsrs	r3, r3, #6
 800311c:	2200      	movs	r2, #0
 800311e:	623b      	str	r3, [r7, #32]
 8003120:	627a      	str	r2, [r7, #36]	; 0x24
 8003122:	6a3b      	ldr	r3, [r7, #32]
 8003124:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003128:	2100      	movs	r1, #0
 800312a:	4b47      	ldr	r3, [pc, #284]	; (8003248 <HAL_RCC_GetSysClockFreq+0x188>)
 800312c:	fb03 f201 	mul.w	r2, r3, r1
 8003130:	2300      	movs	r3, #0
 8003132:	fb00 f303 	mul.w	r3, r0, r3
 8003136:	4413      	add	r3, r2
 8003138:	4a43      	ldr	r2, [pc, #268]	; (8003248 <HAL_RCC_GetSysClockFreq+0x188>)
 800313a:	fba0 1202 	umull	r1, r2, r0, r2
 800313e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003140:	460a      	mov	r2, r1
 8003142:	62ba      	str	r2, [r7, #40]	; 0x28
 8003144:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003146:	4413      	add	r3, r2
 8003148:	62fb      	str	r3, [r7, #44]	; 0x2c
 800314a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800314c:	2200      	movs	r2, #0
 800314e:	61bb      	str	r3, [r7, #24]
 8003150:	61fa      	str	r2, [r7, #28]
 8003152:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003156:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800315a:	f7fd f891 	bl	8000280 <__aeabi_uldivmod>
 800315e:	4602      	mov	r2, r0
 8003160:	460b      	mov	r3, r1
 8003162:	4613      	mov	r3, r2
 8003164:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003166:	e053      	b.n	8003210 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003168:	4b35      	ldr	r3, [pc, #212]	; (8003240 <HAL_RCC_GetSysClockFreq+0x180>)
 800316a:	685b      	ldr	r3, [r3, #4]
 800316c:	099b      	lsrs	r3, r3, #6
 800316e:	2200      	movs	r2, #0
 8003170:	613b      	str	r3, [r7, #16]
 8003172:	617a      	str	r2, [r7, #20]
 8003174:	693b      	ldr	r3, [r7, #16]
 8003176:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800317a:	f04f 0b00 	mov.w	fp, #0
 800317e:	4652      	mov	r2, sl
 8003180:	465b      	mov	r3, fp
 8003182:	f04f 0000 	mov.w	r0, #0
 8003186:	f04f 0100 	mov.w	r1, #0
 800318a:	0159      	lsls	r1, r3, #5
 800318c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003190:	0150      	lsls	r0, r2, #5
 8003192:	4602      	mov	r2, r0
 8003194:	460b      	mov	r3, r1
 8003196:	ebb2 080a 	subs.w	r8, r2, sl
 800319a:	eb63 090b 	sbc.w	r9, r3, fp
 800319e:	f04f 0200 	mov.w	r2, #0
 80031a2:	f04f 0300 	mov.w	r3, #0
 80031a6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80031aa:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80031ae:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80031b2:	ebb2 0408 	subs.w	r4, r2, r8
 80031b6:	eb63 0509 	sbc.w	r5, r3, r9
 80031ba:	f04f 0200 	mov.w	r2, #0
 80031be:	f04f 0300 	mov.w	r3, #0
 80031c2:	00eb      	lsls	r3, r5, #3
 80031c4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80031c8:	00e2      	lsls	r2, r4, #3
 80031ca:	4614      	mov	r4, r2
 80031cc:	461d      	mov	r5, r3
 80031ce:	eb14 030a 	adds.w	r3, r4, sl
 80031d2:	603b      	str	r3, [r7, #0]
 80031d4:	eb45 030b 	adc.w	r3, r5, fp
 80031d8:	607b      	str	r3, [r7, #4]
 80031da:	f04f 0200 	mov.w	r2, #0
 80031de:	f04f 0300 	mov.w	r3, #0
 80031e2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80031e6:	4629      	mov	r1, r5
 80031e8:	028b      	lsls	r3, r1, #10
 80031ea:	4621      	mov	r1, r4
 80031ec:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80031f0:	4621      	mov	r1, r4
 80031f2:	028a      	lsls	r2, r1, #10
 80031f4:	4610      	mov	r0, r2
 80031f6:	4619      	mov	r1, r3
 80031f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80031fa:	2200      	movs	r2, #0
 80031fc:	60bb      	str	r3, [r7, #8]
 80031fe:	60fa      	str	r2, [r7, #12]
 8003200:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003204:	f7fd f83c 	bl	8000280 <__aeabi_uldivmod>
 8003208:	4602      	mov	r2, r0
 800320a:	460b      	mov	r3, r1
 800320c:	4613      	mov	r3, r2
 800320e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003210:	4b0b      	ldr	r3, [pc, #44]	; (8003240 <HAL_RCC_GetSysClockFreq+0x180>)
 8003212:	685b      	ldr	r3, [r3, #4]
 8003214:	0c1b      	lsrs	r3, r3, #16
 8003216:	f003 0303 	and.w	r3, r3, #3
 800321a:	3301      	adds	r3, #1
 800321c:	005b      	lsls	r3, r3, #1
 800321e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8003220:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003222:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003224:	fbb2 f3f3 	udiv	r3, r2, r3
 8003228:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800322a:	e002      	b.n	8003232 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800322c:	4b05      	ldr	r3, [pc, #20]	; (8003244 <HAL_RCC_GetSysClockFreq+0x184>)
 800322e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003230:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003232:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003234:	4618      	mov	r0, r3
 8003236:	3740      	adds	r7, #64	; 0x40
 8003238:	46bd      	mov	sp, r7
 800323a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800323e:	bf00      	nop
 8003240:	40023800 	.word	0x40023800
 8003244:	00f42400 	.word	0x00f42400
 8003248:	00b71b00 	.word	0x00b71b00

0800324c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800324c:	b480      	push	{r7}
 800324e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003250:	4b03      	ldr	r3, [pc, #12]	; (8003260 <HAL_RCC_GetHCLKFreq+0x14>)
 8003252:	681b      	ldr	r3, [r3, #0]
}
 8003254:	4618      	mov	r0, r3
 8003256:	46bd      	mov	sp, r7
 8003258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325c:	4770      	bx	lr
 800325e:	bf00      	nop
 8003260:	2000015c 	.word	0x2000015c

08003264 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003264:	b580      	push	{r7, lr}
 8003266:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003268:	f7ff fff0 	bl	800324c <HAL_RCC_GetHCLKFreq>
 800326c:	4602      	mov	r2, r0
 800326e:	4b05      	ldr	r3, [pc, #20]	; (8003284 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003270:	689b      	ldr	r3, [r3, #8]
 8003272:	0a9b      	lsrs	r3, r3, #10
 8003274:	f003 0307 	and.w	r3, r3, #7
 8003278:	4903      	ldr	r1, [pc, #12]	; (8003288 <HAL_RCC_GetPCLK1Freq+0x24>)
 800327a:	5ccb      	ldrb	r3, [r1, r3]
 800327c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003280:	4618      	mov	r0, r3
 8003282:	bd80      	pop	{r7, pc}
 8003284:	40023800 	.word	0x40023800
 8003288:	0800a480 	.word	0x0800a480

0800328c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800328c:	b580      	push	{r7, lr}
 800328e:	b082      	sub	sp, #8
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	2b00      	cmp	r3, #0
 8003298:	d101      	bne.n	800329e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800329a:	2301      	movs	r3, #1
 800329c:	e041      	b.n	8003322 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032a4:	b2db      	uxtb	r3, r3
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d106      	bne.n	80032b8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	2200      	movs	r2, #0
 80032ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80032b2:	6878      	ldr	r0, [r7, #4]
 80032b4:	f004 ff4a 	bl	800814c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	2202      	movs	r2, #2
 80032bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681a      	ldr	r2, [r3, #0]
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	3304      	adds	r3, #4
 80032c8:	4619      	mov	r1, r3
 80032ca:	4610      	mov	r0, r2
 80032cc:	f000 faa0 	bl	8003810 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	2201      	movs	r2, #1
 80032d4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2201      	movs	r2, #1
 80032dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2201      	movs	r2, #1
 80032e4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2201      	movs	r2, #1
 80032ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2201      	movs	r2, #1
 80032f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2201      	movs	r2, #1
 80032fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2201      	movs	r2, #1
 8003304:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2201      	movs	r2, #1
 800330c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	2201      	movs	r2, #1
 8003314:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	2201      	movs	r2, #1
 800331c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003320:	2300      	movs	r3, #0
}
 8003322:	4618      	mov	r0, r3
 8003324:	3708      	adds	r7, #8
 8003326:	46bd      	mov	sp, r7
 8003328:	bd80      	pop	{r7, pc}
	...

0800332c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800332c:	b480      	push	{r7}
 800332e:	b085      	sub	sp, #20
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800333a:	b2db      	uxtb	r3, r3
 800333c:	2b01      	cmp	r3, #1
 800333e:	d001      	beq.n	8003344 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003340:	2301      	movs	r3, #1
 8003342:	e04e      	b.n	80033e2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2202      	movs	r2, #2
 8003348:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	68da      	ldr	r2, [r3, #12]
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f042 0201 	orr.w	r2, r2, #1
 800335a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	4a23      	ldr	r2, [pc, #140]	; (80033f0 <HAL_TIM_Base_Start_IT+0xc4>)
 8003362:	4293      	cmp	r3, r2
 8003364:	d022      	beq.n	80033ac <HAL_TIM_Base_Start_IT+0x80>
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800336e:	d01d      	beq.n	80033ac <HAL_TIM_Base_Start_IT+0x80>
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	4a1f      	ldr	r2, [pc, #124]	; (80033f4 <HAL_TIM_Base_Start_IT+0xc8>)
 8003376:	4293      	cmp	r3, r2
 8003378:	d018      	beq.n	80033ac <HAL_TIM_Base_Start_IT+0x80>
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	4a1e      	ldr	r2, [pc, #120]	; (80033f8 <HAL_TIM_Base_Start_IT+0xcc>)
 8003380:	4293      	cmp	r3, r2
 8003382:	d013      	beq.n	80033ac <HAL_TIM_Base_Start_IT+0x80>
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	4a1c      	ldr	r2, [pc, #112]	; (80033fc <HAL_TIM_Base_Start_IT+0xd0>)
 800338a:	4293      	cmp	r3, r2
 800338c:	d00e      	beq.n	80033ac <HAL_TIM_Base_Start_IT+0x80>
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	4a1b      	ldr	r2, [pc, #108]	; (8003400 <HAL_TIM_Base_Start_IT+0xd4>)
 8003394:	4293      	cmp	r3, r2
 8003396:	d009      	beq.n	80033ac <HAL_TIM_Base_Start_IT+0x80>
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	4a19      	ldr	r2, [pc, #100]	; (8003404 <HAL_TIM_Base_Start_IT+0xd8>)
 800339e:	4293      	cmp	r3, r2
 80033a0:	d004      	beq.n	80033ac <HAL_TIM_Base_Start_IT+0x80>
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	4a18      	ldr	r2, [pc, #96]	; (8003408 <HAL_TIM_Base_Start_IT+0xdc>)
 80033a8:	4293      	cmp	r3, r2
 80033aa:	d111      	bne.n	80033d0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	689b      	ldr	r3, [r3, #8]
 80033b2:	f003 0307 	and.w	r3, r3, #7
 80033b6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	2b06      	cmp	r3, #6
 80033bc:	d010      	beq.n	80033e0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	681a      	ldr	r2, [r3, #0]
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f042 0201 	orr.w	r2, r2, #1
 80033cc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80033ce:	e007      	b.n	80033e0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	681a      	ldr	r2, [r3, #0]
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f042 0201 	orr.w	r2, r2, #1
 80033de:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80033e0:	2300      	movs	r3, #0
}
 80033e2:	4618      	mov	r0, r3
 80033e4:	3714      	adds	r7, #20
 80033e6:	46bd      	mov	sp, r7
 80033e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ec:	4770      	bx	lr
 80033ee:	bf00      	nop
 80033f0:	40010000 	.word	0x40010000
 80033f4:	40000400 	.word	0x40000400
 80033f8:	40000800 	.word	0x40000800
 80033fc:	40000c00 	.word	0x40000c00
 8003400:	40010400 	.word	0x40010400
 8003404:	40014000 	.word	0x40014000
 8003408:	40001800 	.word	0x40001800

0800340c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800340c:	b580      	push	{r7, lr}
 800340e:	b082      	sub	sp, #8
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	691b      	ldr	r3, [r3, #16]
 800341a:	f003 0302 	and.w	r3, r3, #2
 800341e:	2b02      	cmp	r3, #2
 8003420:	d122      	bne.n	8003468 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	68db      	ldr	r3, [r3, #12]
 8003428:	f003 0302 	and.w	r3, r3, #2
 800342c:	2b02      	cmp	r3, #2
 800342e:	d11b      	bne.n	8003468 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f06f 0202 	mvn.w	r2, #2
 8003438:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	2201      	movs	r2, #1
 800343e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	699b      	ldr	r3, [r3, #24]
 8003446:	f003 0303 	and.w	r3, r3, #3
 800344a:	2b00      	cmp	r3, #0
 800344c:	d003      	beq.n	8003456 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800344e:	6878      	ldr	r0, [r7, #4]
 8003450:	f000 f9bf 	bl	80037d2 <HAL_TIM_IC_CaptureCallback>
 8003454:	e005      	b.n	8003462 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003456:	6878      	ldr	r0, [r7, #4]
 8003458:	f000 f9b1 	bl	80037be <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800345c:	6878      	ldr	r0, [r7, #4]
 800345e:	f000 f9c2 	bl	80037e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	2200      	movs	r2, #0
 8003466:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	691b      	ldr	r3, [r3, #16]
 800346e:	f003 0304 	and.w	r3, r3, #4
 8003472:	2b04      	cmp	r3, #4
 8003474:	d122      	bne.n	80034bc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	68db      	ldr	r3, [r3, #12]
 800347c:	f003 0304 	and.w	r3, r3, #4
 8003480:	2b04      	cmp	r3, #4
 8003482:	d11b      	bne.n	80034bc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f06f 0204 	mvn.w	r2, #4
 800348c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	2202      	movs	r2, #2
 8003492:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	699b      	ldr	r3, [r3, #24]
 800349a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d003      	beq.n	80034aa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80034a2:	6878      	ldr	r0, [r7, #4]
 80034a4:	f000 f995 	bl	80037d2 <HAL_TIM_IC_CaptureCallback>
 80034a8:	e005      	b.n	80034b6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80034aa:	6878      	ldr	r0, [r7, #4]
 80034ac:	f000 f987 	bl	80037be <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034b0:	6878      	ldr	r0, [r7, #4]
 80034b2:	f000 f998 	bl	80037e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	2200      	movs	r2, #0
 80034ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	691b      	ldr	r3, [r3, #16]
 80034c2:	f003 0308 	and.w	r3, r3, #8
 80034c6:	2b08      	cmp	r3, #8
 80034c8:	d122      	bne.n	8003510 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	68db      	ldr	r3, [r3, #12]
 80034d0:	f003 0308 	and.w	r3, r3, #8
 80034d4:	2b08      	cmp	r3, #8
 80034d6:	d11b      	bne.n	8003510 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f06f 0208 	mvn.w	r2, #8
 80034e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	2204      	movs	r2, #4
 80034e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	69db      	ldr	r3, [r3, #28]
 80034ee:	f003 0303 	and.w	r3, r3, #3
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d003      	beq.n	80034fe <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80034f6:	6878      	ldr	r0, [r7, #4]
 80034f8:	f000 f96b 	bl	80037d2 <HAL_TIM_IC_CaptureCallback>
 80034fc:	e005      	b.n	800350a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80034fe:	6878      	ldr	r0, [r7, #4]
 8003500:	f000 f95d 	bl	80037be <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003504:	6878      	ldr	r0, [r7, #4]
 8003506:	f000 f96e 	bl	80037e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	2200      	movs	r2, #0
 800350e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	691b      	ldr	r3, [r3, #16]
 8003516:	f003 0310 	and.w	r3, r3, #16
 800351a:	2b10      	cmp	r3, #16
 800351c:	d122      	bne.n	8003564 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	68db      	ldr	r3, [r3, #12]
 8003524:	f003 0310 	and.w	r3, r3, #16
 8003528:	2b10      	cmp	r3, #16
 800352a:	d11b      	bne.n	8003564 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f06f 0210 	mvn.w	r2, #16
 8003534:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	2208      	movs	r2, #8
 800353a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	69db      	ldr	r3, [r3, #28]
 8003542:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003546:	2b00      	cmp	r3, #0
 8003548:	d003      	beq.n	8003552 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800354a:	6878      	ldr	r0, [r7, #4]
 800354c:	f000 f941 	bl	80037d2 <HAL_TIM_IC_CaptureCallback>
 8003550:	e005      	b.n	800355e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003552:	6878      	ldr	r0, [r7, #4]
 8003554:	f000 f933 	bl	80037be <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003558:	6878      	ldr	r0, [r7, #4]
 800355a:	f000 f944 	bl	80037e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	2200      	movs	r2, #0
 8003562:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	691b      	ldr	r3, [r3, #16]
 800356a:	f003 0301 	and.w	r3, r3, #1
 800356e:	2b01      	cmp	r3, #1
 8003570:	d10e      	bne.n	8003590 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	68db      	ldr	r3, [r3, #12]
 8003578:	f003 0301 	and.w	r3, r3, #1
 800357c:	2b01      	cmp	r3, #1
 800357e:	d107      	bne.n	8003590 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f06f 0201 	mvn.w	r2, #1
 8003588:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800358a:	6878      	ldr	r0, [r7, #4]
 800358c:	f000 f90d 	bl	80037aa <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	691b      	ldr	r3, [r3, #16]
 8003596:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800359a:	2b80      	cmp	r3, #128	; 0x80
 800359c:	d10e      	bne.n	80035bc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	68db      	ldr	r3, [r3, #12]
 80035a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035a8:	2b80      	cmp	r3, #128	; 0x80
 80035aa:	d107      	bne.n	80035bc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80035b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80035b6:	6878      	ldr	r0, [r7, #4]
 80035b8:	f000 faea 	bl	8003b90 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	691b      	ldr	r3, [r3, #16]
 80035c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035c6:	2b40      	cmp	r3, #64	; 0x40
 80035c8:	d10e      	bne.n	80035e8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	68db      	ldr	r3, [r3, #12]
 80035d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035d4:	2b40      	cmp	r3, #64	; 0x40
 80035d6:	d107      	bne.n	80035e8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80035e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80035e2:	6878      	ldr	r0, [r7, #4]
 80035e4:	f000 f909 	bl	80037fa <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	691b      	ldr	r3, [r3, #16]
 80035ee:	f003 0320 	and.w	r3, r3, #32
 80035f2:	2b20      	cmp	r3, #32
 80035f4:	d10e      	bne.n	8003614 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	68db      	ldr	r3, [r3, #12]
 80035fc:	f003 0320 	and.w	r3, r3, #32
 8003600:	2b20      	cmp	r3, #32
 8003602:	d107      	bne.n	8003614 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f06f 0220 	mvn.w	r2, #32
 800360c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800360e:	6878      	ldr	r0, [r7, #4]
 8003610:	f000 fab4 	bl	8003b7c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003614:	bf00      	nop
 8003616:	3708      	adds	r7, #8
 8003618:	46bd      	mov	sp, r7
 800361a:	bd80      	pop	{r7, pc}

0800361c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800361c:	b580      	push	{r7, lr}
 800361e:	b084      	sub	sp, #16
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]
 8003624:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003626:	2300      	movs	r3, #0
 8003628:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003630:	2b01      	cmp	r3, #1
 8003632:	d101      	bne.n	8003638 <HAL_TIM_ConfigClockSource+0x1c>
 8003634:	2302      	movs	r3, #2
 8003636:	e0b4      	b.n	80037a2 <HAL_TIM_ConfigClockSource+0x186>
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2201      	movs	r2, #1
 800363c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2202      	movs	r2, #2
 8003644:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	689b      	ldr	r3, [r3, #8]
 800364e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003650:	68bb      	ldr	r3, [r7, #8]
 8003652:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003656:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003658:	68bb      	ldr	r3, [r7, #8]
 800365a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800365e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	68ba      	ldr	r2, [r7, #8]
 8003666:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003668:	683b      	ldr	r3, [r7, #0]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003670:	d03e      	beq.n	80036f0 <HAL_TIM_ConfigClockSource+0xd4>
 8003672:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003676:	f200 8087 	bhi.w	8003788 <HAL_TIM_ConfigClockSource+0x16c>
 800367a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800367e:	f000 8086 	beq.w	800378e <HAL_TIM_ConfigClockSource+0x172>
 8003682:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003686:	d87f      	bhi.n	8003788 <HAL_TIM_ConfigClockSource+0x16c>
 8003688:	2b70      	cmp	r3, #112	; 0x70
 800368a:	d01a      	beq.n	80036c2 <HAL_TIM_ConfigClockSource+0xa6>
 800368c:	2b70      	cmp	r3, #112	; 0x70
 800368e:	d87b      	bhi.n	8003788 <HAL_TIM_ConfigClockSource+0x16c>
 8003690:	2b60      	cmp	r3, #96	; 0x60
 8003692:	d050      	beq.n	8003736 <HAL_TIM_ConfigClockSource+0x11a>
 8003694:	2b60      	cmp	r3, #96	; 0x60
 8003696:	d877      	bhi.n	8003788 <HAL_TIM_ConfigClockSource+0x16c>
 8003698:	2b50      	cmp	r3, #80	; 0x50
 800369a:	d03c      	beq.n	8003716 <HAL_TIM_ConfigClockSource+0xfa>
 800369c:	2b50      	cmp	r3, #80	; 0x50
 800369e:	d873      	bhi.n	8003788 <HAL_TIM_ConfigClockSource+0x16c>
 80036a0:	2b40      	cmp	r3, #64	; 0x40
 80036a2:	d058      	beq.n	8003756 <HAL_TIM_ConfigClockSource+0x13a>
 80036a4:	2b40      	cmp	r3, #64	; 0x40
 80036a6:	d86f      	bhi.n	8003788 <HAL_TIM_ConfigClockSource+0x16c>
 80036a8:	2b30      	cmp	r3, #48	; 0x30
 80036aa:	d064      	beq.n	8003776 <HAL_TIM_ConfigClockSource+0x15a>
 80036ac:	2b30      	cmp	r3, #48	; 0x30
 80036ae:	d86b      	bhi.n	8003788 <HAL_TIM_ConfigClockSource+0x16c>
 80036b0:	2b20      	cmp	r3, #32
 80036b2:	d060      	beq.n	8003776 <HAL_TIM_ConfigClockSource+0x15a>
 80036b4:	2b20      	cmp	r3, #32
 80036b6:	d867      	bhi.n	8003788 <HAL_TIM_ConfigClockSource+0x16c>
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d05c      	beq.n	8003776 <HAL_TIM_ConfigClockSource+0x15a>
 80036bc:	2b10      	cmp	r3, #16
 80036be:	d05a      	beq.n	8003776 <HAL_TIM_ConfigClockSource+0x15a>
 80036c0:	e062      	b.n	8003788 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6818      	ldr	r0, [r3, #0]
 80036c6:	683b      	ldr	r3, [r7, #0]
 80036c8:	6899      	ldr	r1, [r3, #8]
 80036ca:	683b      	ldr	r3, [r7, #0]
 80036cc:	685a      	ldr	r2, [r3, #4]
 80036ce:	683b      	ldr	r3, [r7, #0]
 80036d0:	68db      	ldr	r3, [r3, #12]
 80036d2:	f000 f9b7 	bl	8003a44 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	689b      	ldr	r3, [r3, #8]
 80036dc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80036de:	68bb      	ldr	r3, [r7, #8]
 80036e0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80036e4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	68ba      	ldr	r2, [r7, #8]
 80036ec:	609a      	str	r2, [r3, #8]
      break;
 80036ee:	e04f      	b.n	8003790 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6818      	ldr	r0, [r3, #0]
 80036f4:	683b      	ldr	r3, [r7, #0]
 80036f6:	6899      	ldr	r1, [r3, #8]
 80036f8:	683b      	ldr	r3, [r7, #0]
 80036fa:	685a      	ldr	r2, [r3, #4]
 80036fc:	683b      	ldr	r3, [r7, #0]
 80036fe:	68db      	ldr	r3, [r3, #12]
 8003700:	f000 f9a0 	bl	8003a44 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	689a      	ldr	r2, [r3, #8]
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003712:	609a      	str	r2, [r3, #8]
      break;
 8003714:	e03c      	b.n	8003790 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	6818      	ldr	r0, [r3, #0]
 800371a:	683b      	ldr	r3, [r7, #0]
 800371c:	6859      	ldr	r1, [r3, #4]
 800371e:	683b      	ldr	r3, [r7, #0]
 8003720:	68db      	ldr	r3, [r3, #12]
 8003722:	461a      	mov	r2, r3
 8003724:	f000 f914 	bl	8003950 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	2150      	movs	r1, #80	; 0x50
 800372e:	4618      	mov	r0, r3
 8003730:	f000 f96d 	bl	8003a0e <TIM_ITRx_SetConfig>
      break;
 8003734:	e02c      	b.n	8003790 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6818      	ldr	r0, [r3, #0]
 800373a:	683b      	ldr	r3, [r7, #0]
 800373c:	6859      	ldr	r1, [r3, #4]
 800373e:	683b      	ldr	r3, [r7, #0]
 8003740:	68db      	ldr	r3, [r3, #12]
 8003742:	461a      	mov	r2, r3
 8003744:	f000 f933 	bl	80039ae <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	2160      	movs	r1, #96	; 0x60
 800374e:	4618      	mov	r0, r3
 8003750:	f000 f95d 	bl	8003a0e <TIM_ITRx_SetConfig>
      break;
 8003754:	e01c      	b.n	8003790 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6818      	ldr	r0, [r3, #0]
 800375a:	683b      	ldr	r3, [r7, #0]
 800375c:	6859      	ldr	r1, [r3, #4]
 800375e:	683b      	ldr	r3, [r7, #0]
 8003760:	68db      	ldr	r3, [r3, #12]
 8003762:	461a      	mov	r2, r3
 8003764:	f000 f8f4 	bl	8003950 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	2140      	movs	r1, #64	; 0x40
 800376e:	4618      	mov	r0, r3
 8003770:	f000 f94d 	bl	8003a0e <TIM_ITRx_SetConfig>
      break;
 8003774:	e00c      	b.n	8003790 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681a      	ldr	r2, [r3, #0]
 800377a:	683b      	ldr	r3, [r7, #0]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	4619      	mov	r1, r3
 8003780:	4610      	mov	r0, r2
 8003782:	f000 f944 	bl	8003a0e <TIM_ITRx_SetConfig>
      break;
 8003786:	e003      	b.n	8003790 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003788:	2301      	movs	r3, #1
 800378a:	73fb      	strb	r3, [r7, #15]
      break;
 800378c:	e000      	b.n	8003790 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800378e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	2201      	movs	r2, #1
 8003794:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	2200      	movs	r2, #0
 800379c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80037a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80037a2:	4618      	mov	r0, r3
 80037a4:	3710      	adds	r7, #16
 80037a6:	46bd      	mov	sp, r7
 80037a8:	bd80      	pop	{r7, pc}

080037aa <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80037aa:	b480      	push	{r7}
 80037ac:	b083      	sub	sp, #12
 80037ae:	af00      	add	r7, sp, #0
 80037b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80037b2:	bf00      	nop
 80037b4:	370c      	adds	r7, #12
 80037b6:	46bd      	mov	sp, r7
 80037b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037bc:	4770      	bx	lr

080037be <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80037be:	b480      	push	{r7}
 80037c0:	b083      	sub	sp, #12
 80037c2:	af00      	add	r7, sp, #0
 80037c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80037c6:	bf00      	nop
 80037c8:	370c      	adds	r7, #12
 80037ca:	46bd      	mov	sp, r7
 80037cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d0:	4770      	bx	lr

080037d2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80037d2:	b480      	push	{r7}
 80037d4:	b083      	sub	sp, #12
 80037d6:	af00      	add	r7, sp, #0
 80037d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80037da:	bf00      	nop
 80037dc:	370c      	adds	r7, #12
 80037de:	46bd      	mov	sp, r7
 80037e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e4:	4770      	bx	lr

080037e6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80037e6:	b480      	push	{r7}
 80037e8:	b083      	sub	sp, #12
 80037ea:	af00      	add	r7, sp, #0
 80037ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80037ee:	bf00      	nop
 80037f0:	370c      	adds	r7, #12
 80037f2:	46bd      	mov	sp, r7
 80037f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f8:	4770      	bx	lr

080037fa <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80037fa:	b480      	push	{r7}
 80037fc:	b083      	sub	sp, #12
 80037fe:	af00      	add	r7, sp, #0
 8003800:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003802:	bf00      	nop
 8003804:	370c      	adds	r7, #12
 8003806:	46bd      	mov	sp, r7
 8003808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380c:	4770      	bx	lr
	...

08003810 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003810:	b480      	push	{r7}
 8003812:	b085      	sub	sp, #20
 8003814:	af00      	add	r7, sp, #0
 8003816:	6078      	str	r0, [r7, #4]
 8003818:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	4a40      	ldr	r2, [pc, #256]	; (8003924 <TIM_Base_SetConfig+0x114>)
 8003824:	4293      	cmp	r3, r2
 8003826:	d013      	beq.n	8003850 <TIM_Base_SetConfig+0x40>
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800382e:	d00f      	beq.n	8003850 <TIM_Base_SetConfig+0x40>
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	4a3d      	ldr	r2, [pc, #244]	; (8003928 <TIM_Base_SetConfig+0x118>)
 8003834:	4293      	cmp	r3, r2
 8003836:	d00b      	beq.n	8003850 <TIM_Base_SetConfig+0x40>
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	4a3c      	ldr	r2, [pc, #240]	; (800392c <TIM_Base_SetConfig+0x11c>)
 800383c:	4293      	cmp	r3, r2
 800383e:	d007      	beq.n	8003850 <TIM_Base_SetConfig+0x40>
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	4a3b      	ldr	r2, [pc, #236]	; (8003930 <TIM_Base_SetConfig+0x120>)
 8003844:	4293      	cmp	r3, r2
 8003846:	d003      	beq.n	8003850 <TIM_Base_SetConfig+0x40>
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	4a3a      	ldr	r2, [pc, #232]	; (8003934 <TIM_Base_SetConfig+0x124>)
 800384c:	4293      	cmp	r3, r2
 800384e:	d108      	bne.n	8003862 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003856:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003858:	683b      	ldr	r3, [r7, #0]
 800385a:	685b      	ldr	r3, [r3, #4]
 800385c:	68fa      	ldr	r2, [r7, #12]
 800385e:	4313      	orrs	r3, r2
 8003860:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	4a2f      	ldr	r2, [pc, #188]	; (8003924 <TIM_Base_SetConfig+0x114>)
 8003866:	4293      	cmp	r3, r2
 8003868:	d02b      	beq.n	80038c2 <TIM_Base_SetConfig+0xb2>
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003870:	d027      	beq.n	80038c2 <TIM_Base_SetConfig+0xb2>
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	4a2c      	ldr	r2, [pc, #176]	; (8003928 <TIM_Base_SetConfig+0x118>)
 8003876:	4293      	cmp	r3, r2
 8003878:	d023      	beq.n	80038c2 <TIM_Base_SetConfig+0xb2>
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	4a2b      	ldr	r2, [pc, #172]	; (800392c <TIM_Base_SetConfig+0x11c>)
 800387e:	4293      	cmp	r3, r2
 8003880:	d01f      	beq.n	80038c2 <TIM_Base_SetConfig+0xb2>
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	4a2a      	ldr	r2, [pc, #168]	; (8003930 <TIM_Base_SetConfig+0x120>)
 8003886:	4293      	cmp	r3, r2
 8003888:	d01b      	beq.n	80038c2 <TIM_Base_SetConfig+0xb2>
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	4a29      	ldr	r2, [pc, #164]	; (8003934 <TIM_Base_SetConfig+0x124>)
 800388e:	4293      	cmp	r3, r2
 8003890:	d017      	beq.n	80038c2 <TIM_Base_SetConfig+0xb2>
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	4a28      	ldr	r2, [pc, #160]	; (8003938 <TIM_Base_SetConfig+0x128>)
 8003896:	4293      	cmp	r3, r2
 8003898:	d013      	beq.n	80038c2 <TIM_Base_SetConfig+0xb2>
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	4a27      	ldr	r2, [pc, #156]	; (800393c <TIM_Base_SetConfig+0x12c>)
 800389e:	4293      	cmp	r3, r2
 80038a0:	d00f      	beq.n	80038c2 <TIM_Base_SetConfig+0xb2>
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	4a26      	ldr	r2, [pc, #152]	; (8003940 <TIM_Base_SetConfig+0x130>)
 80038a6:	4293      	cmp	r3, r2
 80038a8:	d00b      	beq.n	80038c2 <TIM_Base_SetConfig+0xb2>
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	4a25      	ldr	r2, [pc, #148]	; (8003944 <TIM_Base_SetConfig+0x134>)
 80038ae:	4293      	cmp	r3, r2
 80038b0:	d007      	beq.n	80038c2 <TIM_Base_SetConfig+0xb2>
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	4a24      	ldr	r2, [pc, #144]	; (8003948 <TIM_Base_SetConfig+0x138>)
 80038b6:	4293      	cmp	r3, r2
 80038b8:	d003      	beq.n	80038c2 <TIM_Base_SetConfig+0xb2>
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	4a23      	ldr	r2, [pc, #140]	; (800394c <TIM_Base_SetConfig+0x13c>)
 80038be:	4293      	cmp	r3, r2
 80038c0:	d108      	bne.n	80038d4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80038c8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80038ca:	683b      	ldr	r3, [r7, #0]
 80038cc:	68db      	ldr	r3, [r3, #12]
 80038ce:	68fa      	ldr	r2, [r7, #12]
 80038d0:	4313      	orrs	r3, r2
 80038d2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80038da:	683b      	ldr	r3, [r7, #0]
 80038dc:	695b      	ldr	r3, [r3, #20]
 80038de:	4313      	orrs	r3, r2
 80038e0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	68fa      	ldr	r2, [r7, #12]
 80038e6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80038e8:	683b      	ldr	r3, [r7, #0]
 80038ea:	689a      	ldr	r2, [r3, #8]
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80038f0:	683b      	ldr	r3, [r7, #0]
 80038f2:	681a      	ldr	r2, [r3, #0]
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	4a0a      	ldr	r2, [pc, #40]	; (8003924 <TIM_Base_SetConfig+0x114>)
 80038fc:	4293      	cmp	r3, r2
 80038fe:	d003      	beq.n	8003908 <TIM_Base_SetConfig+0xf8>
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	4a0c      	ldr	r2, [pc, #48]	; (8003934 <TIM_Base_SetConfig+0x124>)
 8003904:	4293      	cmp	r3, r2
 8003906:	d103      	bne.n	8003910 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003908:	683b      	ldr	r3, [r7, #0]
 800390a:	691a      	ldr	r2, [r3, #16]
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2201      	movs	r2, #1
 8003914:	615a      	str	r2, [r3, #20]
}
 8003916:	bf00      	nop
 8003918:	3714      	adds	r7, #20
 800391a:	46bd      	mov	sp, r7
 800391c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003920:	4770      	bx	lr
 8003922:	bf00      	nop
 8003924:	40010000 	.word	0x40010000
 8003928:	40000400 	.word	0x40000400
 800392c:	40000800 	.word	0x40000800
 8003930:	40000c00 	.word	0x40000c00
 8003934:	40010400 	.word	0x40010400
 8003938:	40014000 	.word	0x40014000
 800393c:	40014400 	.word	0x40014400
 8003940:	40014800 	.word	0x40014800
 8003944:	40001800 	.word	0x40001800
 8003948:	40001c00 	.word	0x40001c00
 800394c:	40002000 	.word	0x40002000

08003950 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003950:	b480      	push	{r7}
 8003952:	b087      	sub	sp, #28
 8003954:	af00      	add	r7, sp, #0
 8003956:	60f8      	str	r0, [r7, #12]
 8003958:	60b9      	str	r1, [r7, #8]
 800395a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	6a1b      	ldr	r3, [r3, #32]
 8003960:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	6a1b      	ldr	r3, [r3, #32]
 8003966:	f023 0201 	bic.w	r2, r3, #1
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	699b      	ldr	r3, [r3, #24]
 8003972:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003974:	693b      	ldr	r3, [r7, #16]
 8003976:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800397a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	011b      	lsls	r3, r3, #4
 8003980:	693a      	ldr	r2, [r7, #16]
 8003982:	4313      	orrs	r3, r2
 8003984:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003986:	697b      	ldr	r3, [r7, #20]
 8003988:	f023 030a 	bic.w	r3, r3, #10
 800398c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800398e:	697a      	ldr	r2, [r7, #20]
 8003990:	68bb      	ldr	r3, [r7, #8]
 8003992:	4313      	orrs	r3, r2
 8003994:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	693a      	ldr	r2, [r7, #16]
 800399a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	697a      	ldr	r2, [r7, #20]
 80039a0:	621a      	str	r2, [r3, #32]
}
 80039a2:	bf00      	nop
 80039a4:	371c      	adds	r7, #28
 80039a6:	46bd      	mov	sp, r7
 80039a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ac:	4770      	bx	lr

080039ae <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80039ae:	b480      	push	{r7}
 80039b0:	b087      	sub	sp, #28
 80039b2:	af00      	add	r7, sp, #0
 80039b4:	60f8      	str	r0, [r7, #12]
 80039b6:	60b9      	str	r1, [r7, #8]
 80039b8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	6a1b      	ldr	r3, [r3, #32]
 80039be:	f023 0210 	bic.w	r2, r3, #16
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	699b      	ldr	r3, [r3, #24]
 80039ca:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	6a1b      	ldr	r3, [r3, #32]
 80039d0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80039d2:	697b      	ldr	r3, [r7, #20]
 80039d4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80039d8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	031b      	lsls	r3, r3, #12
 80039de:	697a      	ldr	r2, [r7, #20]
 80039e0:	4313      	orrs	r3, r2
 80039e2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80039e4:	693b      	ldr	r3, [r7, #16]
 80039e6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80039ea:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80039ec:	68bb      	ldr	r3, [r7, #8]
 80039ee:	011b      	lsls	r3, r3, #4
 80039f0:	693a      	ldr	r2, [r7, #16]
 80039f2:	4313      	orrs	r3, r2
 80039f4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	697a      	ldr	r2, [r7, #20]
 80039fa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	693a      	ldr	r2, [r7, #16]
 8003a00:	621a      	str	r2, [r3, #32]
}
 8003a02:	bf00      	nop
 8003a04:	371c      	adds	r7, #28
 8003a06:	46bd      	mov	sp, r7
 8003a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0c:	4770      	bx	lr

08003a0e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003a0e:	b480      	push	{r7}
 8003a10:	b085      	sub	sp, #20
 8003a12:	af00      	add	r7, sp, #0
 8003a14:	6078      	str	r0, [r7, #4]
 8003a16:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	689b      	ldr	r3, [r3, #8]
 8003a1c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a24:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003a26:	683a      	ldr	r2, [r7, #0]
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	4313      	orrs	r3, r2
 8003a2c:	f043 0307 	orr.w	r3, r3, #7
 8003a30:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	68fa      	ldr	r2, [r7, #12]
 8003a36:	609a      	str	r2, [r3, #8]
}
 8003a38:	bf00      	nop
 8003a3a:	3714      	adds	r7, #20
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a42:	4770      	bx	lr

08003a44 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003a44:	b480      	push	{r7}
 8003a46:	b087      	sub	sp, #28
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	60f8      	str	r0, [r7, #12]
 8003a4c:	60b9      	str	r1, [r7, #8]
 8003a4e:	607a      	str	r2, [r7, #4]
 8003a50:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	689b      	ldr	r3, [r3, #8]
 8003a56:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003a58:	697b      	ldr	r3, [r7, #20]
 8003a5a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003a5e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003a60:	683b      	ldr	r3, [r7, #0]
 8003a62:	021a      	lsls	r2, r3, #8
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	431a      	orrs	r2, r3
 8003a68:	68bb      	ldr	r3, [r7, #8]
 8003a6a:	4313      	orrs	r3, r2
 8003a6c:	697a      	ldr	r2, [r7, #20]
 8003a6e:	4313      	orrs	r3, r2
 8003a70:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	697a      	ldr	r2, [r7, #20]
 8003a76:	609a      	str	r2, [r3, #8]
}
 8003a78:	bf00      	nop
 8003a7a:	371c      	adds	r7, #28
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a82:	4770      	bx	lr

08003a84 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003a84:	b480      	push	{r7}
 8003a86:	b085      	sub	sp, #20
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]
 8003a8c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a94:	2b01      	cmp	r3, #1
 8003a96:	d101      	bne.n	8003a9c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003a98:	2302      	movs	r3, #2
 8003a9a:	e05a      	b.n	8003b52 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2201      	movs	r2, #1
 8003aa0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2202      	movs	r2, #2
 8003aa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	685b      	ldr	r3, [r3, #4]
 8003ab2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	689b      	ldr	r3, [r3, #8]
 8003aba:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ac2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003ac4:	683b      	ldr	r3, [r7, #0]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	68fa      	ldr	r2, [r7, #12]
 8003aca:	4313      	orrs	r3, r2
 8003acc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	68fa      	ldr	r2, [r7, #12]
 8003ad4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	4a21      	ldr	r2, [pc, #132]	; (8003b60 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003adc:	4293      	cmp	r3, r2
 8003ade:	d022      	beq.n	8003b26 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ae8:	d01d      	beq.n	8003b26 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	4a1d      	ldr	r2, [pc, #116]	; (8003b64 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003af0:	4293      	cmp	r3, r2
 8003af2:	d018      	beq.n	8003b26 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	4a1b      	ldr	r2, [pc, #108]	; (8003b68 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003afa:	4293      	cmp	r3, r2
 8003afc:	d013      	beq.n	8003b26 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	4a1a      	ldr	r2, [pc, #104]	; (8003b6c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003b04:	4293      	cmp	r3, r2
 8003b06:	d00e      	beq.n	8003b26 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	4a18      	ldr	r2, [pc, #96]	; (8003b70 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003b0e:	4293      	cmp	r3, r2
 8003b10:	d009      	beq.n	8003b26 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	4a17      	ldr	r2, [pc, #92]	; (8003b74 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003b18:	4293      	cmp	r3, r2
 8003b1a:	d004      	beq.n	8003b26 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	4a15      	ldr	r2, [pc, #84]	; (8003b78 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003b22:	4293      	cmp	r3, r2
 8003b24:	d10c      	bne.n	8003b40 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003b26:	68bb      	ldr	r3, [r7, #8]
 8003b28:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003b2c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003b2e:	683b      	ldr	r3, [r7, #0]
 8003b30:	685b      	ldr	r3, [r3, #4]
 8003b32:	68ba      	ldr	r2, [r7, #8]
 8003b34:	4313      	orrs	r3, r2
 8003b36:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	68ba      	ldr	r2, [r7, #8]
 8003b3e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	2201      	movs	r2, #1
 8003b44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2200      	movs	r2, #0
 8003b4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003b50:	2300      	movs	r3, #0
}
 8003b52:	4618      	mov	r0, r3
 8003b54:	3714      	adds	r7, #20
 8003b56:	46bd      	mov	sp, r7
 8003b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5c:	4770      	bx	lr
 8003b5e:	bf00      	nop
 8003b60:	40010000 	.word	0x40010000
 8003b64:	40000400 	.word	0x40000400
 8003b68:	40000800 	.word	0x40000800
 8003b6c:	40000c00 	.word	0x40000c00
 8003b70:	40010400 	.word	0x40010400
 8003b74:	40014000 	.word	0x40014000
 8003b78:	40001800 	.word	0x40001800

08003b7c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003b7c:	b480      	push	{r7}
 8003b7e:	b083      	sub	sp, #12
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003b84:	bf00      	nop
 8003b86:	370c      	adds	r7, #12
 8003b88:	46bd      	mov	sp, r7
 8003b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8e:	4770      	bx	lr

08003b90 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003b90:	b480      	push	{r7}
 8003b92:	b083      	sub	sp, #12
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003b98:	bf00      	nop
 8003b9a:	370c      	adds	r7, #12
 8003b9c:	46bd      	mov	sp, r7
 8003b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba2:	4770      	bx	lr

08003ba4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003ba4:	b084      	sub	sp, #16
 8003ba6:	b580      	push	{r7, lr}
 8003ba8:	b084      	sub	sp, #16
 8003baa:	af00      	add	r7, sp, #0
 8003bac:	6078      	str	r0, [r7, #4]
 8003bae:	f107 001c 	add.w	r0, r7, #28
 8003bb2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003bb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bb8:	2b01      	cmp	r3, #1
 8003bba:	d122      	bne.n	8003c02 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bc0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	68db      	ldr	r3, [r3, #12]
 8003bcc:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8003bd0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003bd4:	687a      	ldr	r2, [r7, #4]
 8003bd6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	68db      	ldr	r3, [r3, #12]
 8003bdc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003be4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003be6:	2b01      	cmp	r3, #1
 8003be8:	d105      	bne.n	8003bf6 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	68db      	ldr	r3, [r3, #12]
 8003bee:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003bf6:	6878      	ldr	r0, [r7, #4]
 8003bf8:	f001 fbee 	bl	80053d8 <USB_CoreReset>
 8003bfc:	4603      	mov	r3, r0
 8003bfe:	73fb      	strb	r3, [r7, #15]
 8003c00:	e01a      	b.n	8003c38 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	68db      	ldr	r3, [r3, #12]
 8003c06:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003c0e:	6878      	ldr	r0, [r7, #4]
 8003c10:	f001 fbe2 	bl	80053d8 <USB_CoreReset>
 8003c14:	4603      	mov	r3, r0
 8003c16:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8003c18:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d106      	bne.n	8003c2c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c22:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	639a      	str	r2, [r3, #56]	; 0x38
 8003c2a:	e005      	b.n	8003c38 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c30:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8003c38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c3a:	2b01      	cmp	r3, #1
 8003c3c:	d10b      	bne.n	8003c56 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	689b      	ldr	r3, [r3, #8]
 8003c42:	f043 0206 	orr.w	r2, r3, #6
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	689b      	ldr	r3, [r3, #8]
 8003c4e:	f043 0220 	orr.w	r2, r3, #32
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003c56:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c58:	4618      	mov	r0, r3
 8003c5a:	3710      	adds	r7, #16
 8003c5c:	46bd      	mov	sp, r7
 8003c5e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003c62:	b004      	add	sp, #16
 8003c64:	4770      	bx	lr
	...

08003c68 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8003c68:	b480      	push	{r7}
 8003c6a:	b087      	sub	sp, #28
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	60f8      	str	r0, [r7, #12]
 8003c70:	60b9      	str	r1, [r7, #8]
 8003c72:	4613      	mov	r3, r2
 8003c74:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8003c76:	79fb      	ldrb	r3, [r7, #7]
 8003c78:	2b02      	cmp	r3, #2
 8003c7a:	d165      	bne.n	8003d48 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8003c7c:	68bb      	ldr	r3, [r7, #8]
 8003c7e:	4a41      	ldr	r2, [pc, #260]	; (8003d84 <USB_SetTurnaroundTime+0x11c>)
 8003c80:	4293      	cmp	r3, r2
 8003c82:	d906      	bls.n	8003c92 <USB_SetTurnaroundTime+0x2a>
 8003c84:	68bb      	ldr	r3, [r7, #8]
 8003c86:	4a40      	ldr	r2, [pc, #256]	; (8003d88 <USB_SetTurnaroundTime+0x120>)
 8003c88:	4293      	cmp	r3, r2
 8003c8a:	d202      	bcs.n	8003c92 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8003c8c:	230f      	movs	r3, #15
 8003c8e:	617b      	str	r3, [r7, #20]
 8003c90:	e062      	b.n	8003d58 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8003c92:	68bb      	ldr	r3, [r7, #8]
 8003c94:	4a3c      	ldr	r2, [pc, #240]	; (8003d88 <USB_SetTurnaroundTime+0x120>)
 8003c96:	4293      	cmp	r3, r2
 8003c98:	d306      	bcc.n	8003ca8 <USB_SetTurnaroundTime+0x40>
 8003c9a:	68bb      	ldr	r3, [r7, #8]
 8003c9c:	4a3b      	ldr	r2, [pc, #236]	; (8003d8c <USB_SetTurnaroundTime+0x124>)
 8003c9e:	4293      	cmp	r3, r2
 8003ca0:	d202      	bcs.n	8003ca8 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8003ca2:	230e      	movs	r3, #14
 8003ca4:	617b      	str	r3, [r7, #20]
 8003ca6:	e057      	b.n	8003d58 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8003ca8:	68bb      	ldr	r3, [r7, #8]
 8003caa:	4a38      	ldr	r2, [pc, #224]	; (8003d8c <USB_SetTurnaroundTime+0x124>)
 8003cac:	4293      	cmp	r3, r2
 8003cae:	d306      	bcc.n	8003cbe <USB_SetTurnaroundTime+0x56>
 8003cb0:	68bb      	ldr	r3, [r7, #8]
 8003cb2:	4a37      	ldr	r2, [pc, #220]	; (8003d90 <USB_SetTurnaroundTime+0x128>)
 8003cb4:	4293      	cmp	r3, r2
 8003cb6:	d202      	bcs.n	8003cbe <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8003cb8:	230d      	movs	r3, #13
 8003cba:	617b      	str	r3, [r7, #20]
 8003cbc:	e04c      	b.n	8003d58 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8003cbe:	68bb      	ldr	r3, [r7, #8]
 8003cc0:	4a33      	ldr	r2, [pc, #204]	; (8003d90 <USB_SetTurnaroundTime+0x128>)
 8003cc2:	4293      	cmp	r3, r2
 8003cc4:	d306      	bcc.n	8003cd4 <USB_SetTurnaroundTime+0x6c>
 8003cc6:	68bb      	ldr	r3, [r7, #8]
 8003cc8:	4a32      	ldr	r2, [pc, #200]	; (8003d94 <USB_SetTurnaroundTime+0x12c>)
 8003cca:	4293      	cmp	r3, r2
 8003ccc:	d802      	bhi.n	8003cd4 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8003cce:	230c      	movs	r3, #12
 8003cd0:	617b      	str	r3, [r7, #20]
 8003cd2:	e041      	b.n	8003d58 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8003cd4:	68bb      	ldr	r3, [r7, #8]
 8003cd6:	4a2f      	ldr	r2, [pc, #188]	; (8003d94 <USB_SetTurnaroundTime+0x12c>)
 8003cd8:	4293      	cmp	r3, r2
 8003cda:	d906      	bls.n	8003cea <USB_SetTurnaroundTime+0x82>
 8003cdc:	68bb      	ldr	r3, [r7, #8]
 8003cde:	4a2e      	ldr	r2, [pc, #184]	; (8003d98 <USB_SetTurnaroundTime+0x130>)
 8003ce0:	4293      	cmp	r3, r2
 8003ce2:	d802      	bhi.n	8003cea <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8003ce4:	230b      	movs	r3, #11
 8003ce6:	617b      	str	r3, [r7, #20]
 8003ce8:	e036      	b.n	8003d58 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8003cea:	68bb      	ldr	r3, [r7, #8]
 8003cec:	4a2a      	ldr	r2, [pc, #168]	; (8003d98 <USB_SetTurnaroundTime+0x130>)
 8003cee:	4293      	cmp	r3, r2
 8003cf0:	d906      	bls.n	8003d00 <USB_SetTurnaroundTime+0x98>
 8003cf2:	68bb      	ldr	r3, [r7, #8]
 8003cf4:	4a29      	ldr	r2, [pc, #164]	; (8003d9c <USB_SetTurnaroundTime+0x134>)
 8003cf6:	4293      	cmp	r3, r2
 8003cf8:	d802      	bhi.n	8003d00 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8003cfa:	230a      	movs	r3, #10
 8003cfc:	617b      	str	r3, [r7, #20]
 8003cfe:	e02b      	b.n	8003d58 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8003d00:	68bb      	ldr	r3, [r7, #8]
 8003d02:	4a26      	ldr	r2, [pc, #152]	; (8003d9c <USB_SetTurnaroundTime+0x134>)
 8003d04:	4293      	cmp	r3, r2
 8003d06:	d906      	bls.n	8003d16 <USB_SetTurnaroundTime+0xae>
 8003d08:	68bb      	ldr	r3, [r7, #8]
 8003d0a:	4a25      	ldr	r2, [pc, #148]	; (8003da0 <USB_SetTurnaroundTime+0x138>)
 8003d0c:	4293      	cmp	r3, r2
 8003d0e:	d202      	bcs.n	8003d16 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8003d10:	2309      	movs	r3, #9
 8003d12:	617b      	str	r3, [r7, #20]
 8003d14:	e020      	b.n	8003d58 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8003d16:	68bb      	ldr	r3, [r7, #8]
 8003d18:	4a21      	ldr	r2, [pc, #132]	; (8003da0 <USB_SetTurnaroundTime+0x138>)
 8003d1a:	4293      	cmp	r3, r2
 8003d1c:	d306      	bcc.n	8003d2c <USB_SetTurnaroundTime+0xc4>
 8003d1e:	68bb      	ldr	r3, [r7, #8]
 8003d20:	4a20      	ldr	r2, [pc, #128]	; (8003da4 <USB_SetTurnaroundTime+0x13c>)
 8003d22:	4293      	cmp	r3, r2
 8003d24:	d802      	bhi.n	8003d2c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8003d26:	2308      	movs	r3, #8
 8003d28:	617b      	str	r3, [r7, #20]
 8003d2a:	e015      	b.n	8003d58 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8003d2c:	68bb      	ldr	r3, [r7, #8]
 8003d2e:	4a1d      	ldr	r2, [pc, #116]	; (8003da4 <USB_SetTurnaroundTime+0x13c>)
 8003d30:	4293      	cmp	r3, r2
 8003d32:	d906      	bls.n	8003d42 <USB_SetTurnaroundTime+0xda>
 8003d34:	68bb      	ldr	r3, [r7, #8]
 8003d36:	4a1c      	ldr	r2, [pc, #112]	; (8003da8 <USB_SetTurnaroundTime+0x140>)
 8003d38:	4293      	cmp	r3, r2
 8003d3a:	d202      	bcs.n	8003d42 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8003d3c:	2307      	movs	r3, #7
 8003d3e:	617b      	str	r3, [r7, #20]
 8003d40:	e00a      	b.n	8003d58 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8003d42:	2306      	movs	r3, #6
 8003d44:	617b      	str	r3, [r7, #20]
 8003d46:	e007      	b.n	8003d58 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8003d48:	79fb      	ldrb	r3, [r7, #7]
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d102      	bne.n	8003d54 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8003d4e:	2309      	movs	r3, #9
 8003d50:	617b      	str	r3, [r7, #20]
 8003d52:	e001      	b.n	8003d58 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8003d54:	2309      	movs	r3, #9
 8003d56:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	68db      	ldr	r3, [r3, #12]
 8003d5c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	68da      	ldr	r2, [r3, #12]
 8003d68:	697b      	ldr	r3, [r7, #20]
 8003d6a:	029b      	lsls	r3, r3, #10
 8003d6c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8003d70:	431a      	orrs	r2, r3
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003d76:	2300      	movs	r3, #0
}
 8003d78:	4618      	mov	r0, r3
 8003d7a:	371c      	adds	r7, #28
 8003d7c:	46bd      	mov	sp, r7
 8003d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d82:	4770      	bx	lr
 8003d84:	00d8acbf 	.word	0x00d8acbf
 8003d88:	00e4e1c0 	.word	0x00e4e1c0
 8003d8c:	00f42400 	.word	0x00f42400
 8003d90:	01067380 	.word	0x01067380
 8003d94:	011a499f 	.word	0x011a499f
 8003d98:	01312cff 	.word	0x01312cff
 8003d9c:	014ca43f 	.word	0x014ca43f
 8003da0:	016e3600 	.word	0x016e3600
 8003da4:	01a6ab1f 	.word	0x01a6ab1f
 8003da8:	01e84800 	.word	0x01e84800

08003dac <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003dac:	b480      	push	{r7}
 8003dae:	b083      	sub	sp, #12
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	689b      	ldr	r3, [r3, #8]
 8003db8:	f043 0201 	orr.w	r2, r3, #1
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003dc0:	2300      	movs	r3, #0
}
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	370c      	adds	r7, #12
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dcc:	4770      	bx	lr

08003dce <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003dce:	b480      	push	{r7}
 8003dd0:	b083      	sub	sp, #12
 8003dd2:	af00      	add	r7, sp, #0
 8003dd4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	689b      	ldr	r3, [r3, #8]
 8003dda:	f023 0201 	bic.w	r2, r3, #1
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003de2:	2300      	movs	r3, #0
}
 8003de4:	4618      	mov	r0, r3
 8003de6:	370c      	adds	r7, #12
 8003de8:	46bd      	mov	sp, r7
 8003dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dee:	4770      	bx	lr

08003df0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003df0:	b580      	push	{r7, lr}
 8003df2:	b084      	sub	sp, #16
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	6078      	str	r0, [r7, #4]
 8003df8:	460b      	mov	r3, r1
 8003dfa:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8003dfc:	2300      	movs	r3, #0
 8003dfe:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	68db      	ldr	r3, [r3, #12]
 8003e04:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003e0c:	78fb      	ldrb	r3, [r7, #3]
 8003e0e:	2b01      	cmp	r3, #1
 8003e10:	d115      	bne.n	8003e3e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	68db      	ldr	r3, [r3, #12]
 8003e16:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003e1e:	2001      	movs	r0, #1
 8003e20:	f7fc fc22 	bl	8000668 <HAL_Delay>
      ms++;
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	3301      	adds	r3, #1
 8003e28:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8003e2a:	6878      	ldr	r0, [r7, #4]
 8003e2c:	f001 fa45 	bl	80052ba <USB_GetMode>
 8003e30:	4603      	mov	r3, r0
 8003e32:	2b01      	cmp	r3, #1
 8003e34:	d01e      	beq.n	8003e74 <USB_SetCurrentMode+0x84>
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	2b31      	cmp	r3, #49	; 0x31
 8003e3a:	d9f0      	bls.n	8003e1e <USB_SetCurrentMode+0x2e>
 8003e3c:	e01a      	b.n	8003e74 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8003e3e:	78fb      	ldrb	r3, [r7, #3]
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d115      	bne.n	8003e70 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	68db      	ldr	r3, [r3, #12]
 8003e48:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003e50:	2001      	movs	r0, #1
 8003e52:	f7fc fc09 	bl	8000668 <HAL_Delay>
      ms++;
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	3301      	adds	r3, #1
 8003e5a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8003e5c:	6878      	ldr	r0, [r7, #4]
 8003e5e:	f001 fa2c 	bl	80052ba <USB_GetMode>
 8003e62:	4603      	mov	r3, r0
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d005      	beq.n	8003e74 <USB_SetCurrentMode+0x84>
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	2b31      	cmp	r3, #49	; 0x31
 8003e6c:	d9f0      	bls.n	8003e50 <USB_SetCurrentMode+0x60>
 8003e6e:	e001      	b.n	8003e74 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8003e70:	2301      	movs	r3, #1
 8003e72:	e005      	b.n	8003e80 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	2b32      	cmp	r3, #50	; 0x32
 8003e78:	d101      	bne.n	8003e7e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8003e7a:	2301      	movs	r3, #1
 8003e7c:	e000      	b.n	8003e80 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8003e7e:	2300      	movs	r3, #0
}
 8003e80:	4618      	mov	r0, r3
 8003e82:	3710      	adds	r7, #16
 8003e84:	46bd      	mov	sp, r7
 8003e86:	bd80      	pop	{r7, pc}

08003e88 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003e88:	b084      	sub	sp, #16
 8003e8a:	b580      	push	{r7, lr}
 8003e8c:	b086      	sub	sp, #24
 8003e8e:	af00      	add	r7, sp, #0
 8003e90:	6078      	str	r0, [r7, #4]
 8003e92:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8003e96:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8003e9a:	2300      	movs	r3, #0
 8003e9c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8003ea2:	2300      	movs	r3, #0
 8003ea4:	613b      	str	r3, [r7, #16]
 8003ea6:	e009      	b.n	8003ebc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003ea8:	687a      	ldr	r2, [r7, #4]
 8003eaa:	693b      	ldr	r3, [r7, #16]
 8003eac:	3340      	adds	r3, #64	; 0x40
 8003eae:	009b      	lsls	r3, r3, #2
 8003eb0:	4413      	add	r3, r2
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8003eb6:	693b      	ldr	r3, [r7, #16]
 8003eb8:	3301      	adds	r3, #1
 8003eba:	613b      	str	r3, [r7, #16]
 8003ebc:	693b      	ldr	r3, [r7, #16]
 8003ebe:	2b0e      	cmp	r3, #14
 8003ec0:	d9f2      	bls.n	8003ea8 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8003ec2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d11c      	bne.n	8003f02 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ece:	685b      	ldr	r3, [r3, #4]
 8003ed0:	68fa      	ldr	r2, [r7, #12]
 8003ed2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003ed6:	f043 0302 	orr.w	r3, r3, #2
 8003eda:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ee0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003eec:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ef8:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	639a      	str	r2, [r3, #56]	; 0x38
 8003f00:	e00b      	b.n	8003f1a <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f06:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f12:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003f20:	461a      	mov	r2, r3
 8003f22:	2300      	movs	r3, #0
 8003f24:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f2c:	4619      	mov	r1, r3
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f34:	461a      	mov	r2, r3
 8003f36:	680b      	ldr	r3, [r1, #0]
 8003f38:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003f3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f3c:	2b01      	cmp	r3, #1
 8003f3e:	d10c      	bne.n	8003f5a <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003f40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d104      	bne.n	8003f50 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003f46:	2100      	movs	r1, #0
 8003f48:	6878      	ldr	r0, [r7, #4]
 8003f4a:	f000 f965 	bl	8004218 <USB_SetDevSpeed>
 8003f4e:	e008      	b.n	8003f62 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003f50:	2101      	movs	r1, #1
 8003f52:	6878      	ldr	r0, [r7, #4]
 8003f54:	f000 f960 	bl	8004218 <USB_SetDevSpeed>
 8003f58:	e003      	b.n	8003f62 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003f5a:	2103      	movs	r1, #3
 8003f5c:	6878      	ldr	r0, [r7, #4]
 8003f5e:	f000 f95b 	bl	8004218 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003f62:	2110      	movs	r1, #16
 8003f64:	6878      	ldr	r0, [r7, #4]
 8003f66:	f000 f8f3 	bl	8004150 <USB_FlushTxFifo>
 8003f6a:	4603      	mov	r3, r0
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d001      	beq.n	8003f74 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8003f70:	2301      	movs	r3, #1
 8003f72:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003f74:	6878      	ldr	r0, [r7, #4]
 8003f76:	f000 f91f 	bl	80041b8 <USB_FlushRxFifo>
 8003f7a:	4603      	mov	r3, r0
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d001      	beq.n	8003f84 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8003f80:	2301      	movs	r3, #1
 8003f82:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f8a:	461a      	mov	r2, r3
 8003f8c:	2300      	movs	r3, #0
 8003f8e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f96:	461a      	mov	r2, r3
 8003f98:	2300      	movs	r3, #0
 8003f9a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003fa2:	461a      	mov	r2, r3
 8003fa4:	2300      	movs	r3, #0
 8003fa6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003fa8:	2300      	movs	r3, #0
 8003faa:	613b      	str	r3, [r7, #16]
 8003fac:	e043      	b.n	8004036 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003fae:	693b      	ldr	r3, [r7, #16]
 8003fb0:	015a      	lsls	r2, r3, #5
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	4413      	add	r3, r2
 8003fb6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003fc0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003fc4:	d118      	bne.n	8003ff8 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8003fc6:	693b      	ldr	r3, [r7, #16]
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d10a      	bne.n	8003fe2 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003fcc:	693b      	ldr	r3, [r7, #16]
 8003fce:	015a      	lsls	r2, r3, #5
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	4413      	add	r3, r2
 8003fd4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003fd8:	461a      	mov	r2, r3
 8003fda:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003fde:	6013      	str	r3, [r2, #0]
 8003fe0:	e013      	b.n	800400a <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003fe2:	693b      	ldr	r3, [r7, #16]
 8003fe4:	015a      	lsls	r2, r3, #5
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	4413      	add	r3, r2
 8003fea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003fee:	461a      	mov	r2, r3
 8003ff0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003ff4:	6013      	str	r3, [r2, #0]
 8003ff6:	e008      	b.n	800400a <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003ff8:	693b      	ldr	r3, [r7, #16]
 8003ffa:	015a      	lsls	r2, r3, #5
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	4413      	add	r3, r2
 8004000:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004004:	461a      	mov	r2, r3
 8004006:	2300      	movs	r3, #0
 8004008:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800400a:	693b      	ldr	r3, [r7, #16]
 800400c:	015a      	lsls	r2, r3, #5
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	4413      	add	r3, r2
 8004012:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004016:	461a      	mov	r2, r3
 8004018:	2300      	movs	r3, #0
 800401a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800401c:	693b      	ldr	r3, [r7, #16]
 800401e:	015a      	lsls	r2, r3, #5
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	4413      	add	r3, r2
 8004024:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004028:	461a      	mov	r2, r3
 800402a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800402e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004030:	693b      	ldr	r3, [r7, #16]
 8004032:	3301      	adds	r3, #1
 8004034:	613b      	str	r3, [r7, #16]
 8004036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004038:	693a      	ldr	r2, [r7, #16]
 800403a:	429a      	cmp	r2, r3
 800403c:	d3b7      	bcc.n	8003fae <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800403e:	2300      	movs	r3, #0
 8004040:	613b      	str	r3, [r7, #16]
 8004042:	e043      	b.n	80040cc <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004044:	693b      	ldr	r3, [r7, #16]
 8004046:	015a      	lsls	r2, r3, #5
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	4413      	add	r3, r2
 800404c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004056:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800405a:	d118      	bne.n	800408e <USB_DevInit+0x206>
    {
      if (i == 0U)
 800405c:	693b      	ldr	r3, [r7, #16]
 800405e:	2b00      	cmp	r3, #0
 8004060:	d10a      	bne.n	8004078 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004062:	693b      	ldr	r3, [r7, #16]
 8004064:	015a      	lsls	r2, r3, #5
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	4413      	add	r3, r2
 800406a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800406e:	461a      	mov	r2, r3
 8004070:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004074:	6013      	str	r3, [r2, #0]
 8004076:	e013      	b.n	80040a0 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004078:	693b      	ldr	r3, [r7, #16]
 800407a:	015a      	lsls	r2, r3, #5
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	4413      	add	r3, r2
 8004080:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004084:	461a      	mov	r2, r3
 8004086:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800408a:	6013      	str	r3, [r2, #0]
 800408c:	e008      	b.n	80040a0 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800408e:	693b      	ldr	r3, [r7, #16]
 8004090:	015a      	lsls	r2, r3, #5
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	4413      	add	r3, r2
 8004096:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800409a:	461a      	mov	r2, r3
 800409c:	2300      	movs	r3, #0
 800409e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80040a0:	693b      	ldr	r3, [r7, #16]
 80040a2:	015a      	lsls	r2, r3, #5
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	4413      	add	r3, r2
 80040a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040ac:	461a      	mov	r2, r3
 80040ae:	2300      	movs	r3, #0
 80040b0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80040b2:	693b      	ldr	r3, [r7, #16]
 80040b4:	015a      	lsls	r2, r3, #5
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	4413      	add	r3, r2
 80040ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040be:	461a      	mov	r2, r3
 80040c0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80040c4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80040c6:	693b      	ldr	r3, [r7, #16]
 80040c8:	3301      	adds	r3, #1
 80040ca:	613b      	str	r3, [r7, #16]
 80040cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040ce:	693a      	ldr	r2, [r7, #16]
 80040d0:	429a      	cmp	r2, r3
 80040d2:	d3b7      	bcc.n	8004044 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80040da:	691b      	ldr	r3, [r3, #16]
 80040dc:	68fa      	ldr	r2, [r7, #12]
 80040de:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80040e2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80040e6:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2200      	movs	r2, #0
 80040ec:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80040f4:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80040f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d105      	bne.n	8004108 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	699b      	ldr	r3, [r3, #24]
 8004100:	f043 0210 	orr.w	r2, r3, #16
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	699a      	ldr	r2, [r3, #24]
 800410c:	4b0f      	ldr	r3, [pc, #60]	; (800414c <USB_DevInit+0x2c4>)
 800410e:	4313      	orrs	r3, r2
 8004110:	687a      	ldr	r2, [r7, #4]
 8004112:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004114:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004116:	2b00      	cmp	r3, #0
 8004118:	d005      	beq.n	8004126 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	699b      	ldr	r3, [r3, #24]
 800411e:	f043 0208 	orr.w	r2, r3, #8
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004126:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004128:	2b01      	cmp	r3, #1
 800412a:	d107      	bne.n	800413c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	699b      	ldr	r3, [r3, #24]
 8004130:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004134:	f043 0304 	orr.w	r3, r3, #4
 8004138:	687a      	ldr	r2, [r7, #4]
 800413a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800413c:	7dfb      	ldrb	r3, [r7, #23]
}
 800413e:	4618      	mov	r0, r3
 8004140:	3718      	adds	r7, #24
 8004142:	46bd      	mov	sp, r7
 8004144:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004148:	b004      	add	sp, #16
 800414a:	4770      	bx	lr
 800414c:	803c3800 	.word	0x803c3800

08004150 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004150:	b480      	push	{r7}
 8004152:	b085      	sub	sp, #20
 8004154:	af00      	add	r7, sp, #0
 8004156:	6078      	str	r0, [r7, #4]
 8004158:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800415a:	2300      	movs	r3, #0
 800415c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	3301      	adds	r3, #1
 8004162:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	4a13      	ldr	r2, [pc, #76]	; (80041b4 <USB_FlushTxFifo+0x64>)
 8004168:	4293      	cmp	r3, r2
 800416a:	d901      	bls.n	8004170 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800416c:	2303      	movs	r3, #3
 800416e:	e01b      	b.n	80041a8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	691b      	ldr	r3, [r3, #16]
 8004174:	2b00      	cmp	r3, #0
 8004176:	daf2      	bge.n	800415e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004178:	2300      	movs	r3, #0
 800417a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800417c:	683b      	ldr	r3, [r7, #0]
 800417e:	019b      	lsls	r3, r3, #6
 8004180:	f043 0220 	orr.w	r2, r3, #32
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	3301      	adds	r3, #1
 800418c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	4a08      	ldr	r2, [pc, #32]	; (80041b4 <USB_FlushTxFifo+0x64>)
 8004192:	4293      	cmp	r3, r2
 8004194:	d901      	bls.n	800419a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004196:	2303      	movs	r3, #3
 8004198:	e006      	b.n	80041a8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	691b      	ldr	r3, [r3, #16]
 800419e:	f003 0320 	and.w	r3, r3, #32
 80041a2:	2b20      	cmp	r3, #32
 80041a4:	d0f0      	beq.n	8004188 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80041a6:	2300      	movs	r3, #0
}
 80041a8:	4618      	mov	r0, r3
 80041aa:	3714      	adds	r7, #20
 80041ac:	46bd      	mov	sp, r7
 80041ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b2:	4770      	bx	lr
 80041b4:	00030d40 	.word	0x00030d40

080041b8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80041b8:	b480      	push	{r7}
 80041ba:	b085      	sub	sp, #20
 80041bc:	af00      	add	r7, sp, #0
 80041be:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80041c0:	2300      	movs	r3, #0
 80041c2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	3301      	adds	r3, #1
 80041c8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	4a11      	ldr	r2, [pc, #68]	; (8004214 <USB_FlushRxFifo+0x5c>)
 80041ce:	4293      	cmp	r3, r2
 80041d0:	d901      	bls.n	80041d6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80041d2:	2303      	movs	r3, #3
 80041d4:	e018      	b.n	8004208 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	691b      	ldr	r3, [r3, #16]
 80041da:	2b00      	cmp	r3, #0
 80041dc:	daf2      	bge.n	80041c4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80041de:	2300      	movs	r3, #0
 80041e0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	2210      	movs	r2, #16
 80041e6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	3301      	adds	r3, #1
 80041ec:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	4a08      	ldr	r2, [pc, #32]	; (8004214 <USB_FlushRxFifo+0x5c>)
 80041f2:	4293      	cmp	r3, r2
 80041f4:	d901      	bls.n	80041fa <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80041f6:	2303      	movs	r3, #3
 80041f8:	e006      	b.n	8004208 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	691b      	ldr	r3, [r3, #16]
 80041fe:	f003 0310 	and.w	r3, r3, #16
 8004202:	2b10      	cmp	r3, #16
 8004204:	d0f0      	beq.n	80041e8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004206:	2300      	movs	r3, #0
}
 8004208:	4618      	mov	r0, r3
 800420a:	3714      	adds	r7, #20
 800420c:	46bd      	mov	sp, r7
 800420e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004212:	4770      	bx	lr
 8004214:	00030d40 	.word	0x00030d40

08004218 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004218:	b480      	push	{r7}
 800421a:	b085      	sub	sp, #20
 800421c:	af00      	add	r7, sp, #0
 800421e:	6078      	str	r0, [r7, #4]
 8004220:	460b      	mov	r3, r1
 8004222:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800422e:	681a      	ldr	r2, [r3, #0]
 8004230:	78fb      	ldrb	r3, [r7, #3]
 8004232:	68f9      	ldr	r1, [r7, #12]
 8004234:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004238:	4313      	orrs	r3, r2
 800423a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800423c:	2300      	movs	r3, #0
}
 800423e:	4618      	mov	r0, r3
 8004240:	3714      	adds	r7, #20
 8004242:	46bd      	mov	sp, r7
 8004244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004248:	4770      	bx	lr

0800424a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800424a:	b480      	push	{r7}
 800424c:	b087      	sub	sp, #28
 800424e:	af00      	add	r7, sp, #0
 8004250:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8004256:	693b      	ldr	r3, [r7, #16]
 8004258:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800425c:	689b      	ldr	r3, [r3, #8]
 800425e:	f003 0306 	and.w	r3, r3, #6
 8004262:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	2b00      	cmp	r3, #0
 8004268:	d102      	bne.n	8004270 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800426a:	2300      	movs	r3, #0
 800426c:	75fb      	strb	r3, [r7, #23]
 800426e:	e00a      	b.n	8004286 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	2b02      	cmp	r3, #2
 8004274:	d002      	beq.n	800427c <USB_GetDevSpeed+0x32>
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	2b06      	cmp	r3, #6
 800427a:	d102      	bne.n	8004282 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800427c:	2302      	movs	r3, #2
 800427e:	75fb      	strb	r3, [r7, #23]
 8004280:	e001      	b.n	8004286 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8004282:	230f      	movs	r3, #15
 8004284:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8004286:	7dfb      	ldrb	r3, [r7, #23]
}
 8004288:	4618      	mov	r0, r3
 800428a:	371c      	adds	r7, #28
 800428c:	46bd      	mov	sp, r7
 800428e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004292:	4770      	bx	lr

08004294 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004294:	b480      	push	{r7}
 8004296:	b085      	sub	sp, #20
 8004298:	af00      	add	r7, sp, #0
 800429a:	6078      	str	r0, [r7, #4]
 800429c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80042a2:	683b      	ldr	r3, [r7, #0]
 80042a4:	781b      	ldrb	r3, [r3, #0]
 80042a6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80042a8:	683b      	ldr	r3, [r7, #0]
 80042aa:	785b      	ldrb	r3, [r3, #1]
 80042ac:	2b01      	cmp	r3, #1
 80042ae:	d13a      	bne.n	8004326 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042b6:	69da      	ldr	r2, [r3, #28]
 80042b8:	683b      	ldr	r3, [r7, #0]
 80042ba:	781b      	ldrb	r3, [r3, #0]
 80042bc:	f003 030f 	and.w	r3, r3, #15
 80042c0:	2101      	movs	r1, #1
 80042c2:	fa01 f303 	lsl.w	r3, r1, r3
 80042c6:	b29b      	uxth	r3, r3
 80042c8:	68f9      	ldr	r1, [r7, #12]
 80042ca:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80042ce:	4313      	orrs	r3, r2
 80042d0:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80042d2:	68bb      	ldr	r3, [r7, #8]
 80042d4:	015a      	lsls	r2, r3, #5
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	4413      	add	r3, r2
 80042da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d155      	bne.n	8004394 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80042e8:	68bb      	ldr	r3, [r7, #8]
 80042ea:	015a      	lsls	r2, r3, #5
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	4413      	add	r3, r2
 80042f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042f4:	681a      	ldr	r2, [r3, #0]
 80042f6:	683b      	ldr	r3, [r7, #0]
 80042f8:	68db      	ldr	r3, [r3, #12]
 80042fa:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80042fe:	683b      	ldr	r3, [r7, #0]
 8004300:	791b      	ldrb	r3, [r3, #4]
 8004302:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004304:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004306:	68bb      	ldr	r3, [r7, #8]
 8004308:	059b      	lsls	r3, r3, #22
 800430a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800430c:	4313      	orrs	r3, r2
 800430e:	68ba      	ldr	r2, [r7, #8]
 8004310:	0151      	lsls	r1, r2, #5
 8004312:	68fa      	ldr	r2, [r7, #12]
 8004314:	440a      	add	r2, r1
 8004316:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800431a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800431e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004322:	6013      	str	r3, [r2, #0]
 8004324:	e036      	b.n	8004394 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800432c:	69da      	ldr	r2, [r3, #28]
 800432e:	683b      	ldr	r3, [r7, #0]
 8004330:	781b      	ldrb	r3, [r3, #0]
 8004332:	f003 030f 	and.w	r3, r3, #15
 8004336:	2101      	movs	r1, #1
 8004338:	fa01 f303 	lsl.w	r3, r1, r3
 800433c:	041b      	lsls	r3, r3, #16
 800433e:	68f9      	ldr	r1, [r7, #12]
 8004340:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004344:	4313      	orrs	r3, r2
 8004346:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8004348:	68bb      	ldr	r3, [r7, #8]
 800434a:	015a      	lsls	r2, r3, #5
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	4413      	add	r3, r2
 8004350:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800435a:	2b00      	cmp	r3, #0
 800435c:	d11a      	bne.n	8004394 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800435e:	68bb      	ldr	r3, [r7, #8]
 8004360:	015a      	lsls	r2, r3, #5
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	4413      	add	r3, r2
 8004366:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800436a:	681a      	ldr	r2, [r3, #0]
 800436c:	683b      	ldr	r3, [r7, #0]
 800436e:	68db      	ldr	r3, [r3, #12]
 8004370:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8004374:	683b      	ldr	r3, [r7, #0]
 8004376:	791b      	ldrb	r3, [r3, #4]
 8004378:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800437a:	430b      	orrs	r3, r1
 800437c:	4313      	orrs	r3, r2
 800437e:	68ba      	ldr	r2, [r7, #8]
 8004380:	0151      	lsls	r1, r2, #5
 8004382:	68fa      	ldr	r2, [r7, #12]
 8004384:	440a      	add	r2, r1
 8004386:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800438a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800438e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004392:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8004394:	2300      	movs	r3, #0
}
 8004396:	4618      	mov	r0, r3
 8004398:	3714      	adds	r7, #20
 800439a:	46bd      	mov	sp, r7
 800439c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a0:	4770      	bx	lr
	...

080043a4 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80043a4:	b480      	push	{r7}
 80043a6:	b085      	sub	sp, #20
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	6078      	str	r0, [r7, #4]
 80043ac:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80043b2:	683b      	ldr	r3, [r7, #0]
 80043b4:	781b      	ldrb	r3, [r3, #0]
 80043b6:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80043b8:	683b      	ldr	r3, [r7, #0]
 80043ba:	785b      	ldrb	r3, [r3, #1]
 80043bc:	2b01      	cmp	r3, #1
 80043be:	d161      	bne.n	8004484 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80043c0:	68bb      	ldr	r3, [r7, #8]
 80043c2:	015a      	lsls	r2, r3, #5
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	4413      	add	r3, r2
 80043c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80043d2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80043d6:	d11f      	bne.n	8004418 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80043d8:	68bb      	ldr	r3, [r7, #8]
 80043da:	015a      	lsls	r2, r3, #5
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	4413      	add	r3, r2
 80043e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	68ba      	ldr	r2, [r7, #8]
 80043e8:	0151      	lsls	r1, r2, #5
 80043ea:	68fa      	ldr	r2, [r7, #12]
 80043ec:	440a      	add	r2, r1
 80043ee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80043f2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80043f6:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80043f8:	68bb      	ldr	r3, [r7, #8]
 80043fa:	015a      	lsls	r2, r3, #5
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	4413      	add	r3, r2
 8004400:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	68ba      	ldr	r2, [r7, #8]
 8004408:	0151      	lsls	r1, r2, #5
 800440a:	68fa      	ldr	r2, [r7, #12]
 800440c:	440a      	add	r2, r1
 800440e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004412:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004416:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800441e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004420:	683b      	ldr	r3, [r7, #0]
 8004422:	781b      	ldrb	r3, [r3, #0]
 8004424:	f003 030f 	and.w	r3, r3, #15
 8004428:	2101      	movs	r1, #1
 800442a:	fa01 f303 	lsl.w	r3, r1, r3
 800442e:	b29b      	uxth	r3, r3
 8004430:	43db      	mvns	r3, r3
 8004432:	68f9      	ldr	r1, [r7, #12]
 8004434:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004438:	4013      	ands	r3, r2
 800443a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004442:	69da      	ldr	r2, [r3, #28]
 8004444:	683b      	ldr	r3, [r7, #0]
 8004446:	781b      	ldrb	r3, [r3, #0]
 8004448:	f003 030f 	and.w	r3, r3, #15
 800444c:	2101      	movs	r1, #1
 800444e:	fa01 f303 	lsl.w	r3, r1, r3
 8004452:	b29b      	uxth	r3, r3
 8004454:	43db      	mvns	r3, r3
 8004456:	68f9      	ldr	r1, [r7, #12]
 8004458:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800445c:	4013      	ands	r3, r2
 800445e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8004460:	68bb      	ldr	r3, [r7, #8]
 8004462:	015a      	lsls	r2, r3, #5
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	4413      	add	r3, r2
 8004468:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800446c:	681a      	ldr	r2, [r3, #0]
 800446e:	68bb      	ldr	r3, [r7, #8]
 8004470:	0159      	lsls	r1, r3, #5
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	440b      	add	r3, r1
 8004476:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800447a:	4619      	mov	r1, r3
 800447c:	4b35      	ldr	r3, [pc, #212]	; (8004554 <USB_DeactivateEndpoint+0x1b0>)
 800447e:	4013      	ands	r3, r2
 8004480:	600b      	str	r3, [r1, #0]
 8004482:	e060      	b.n	8004546 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004484:	68bb      	ldr	r3, [r7, #8]
 8004486:	015a      	lsls	r2, r3, #5
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	4413      	add	r3, r2
 800448c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004496:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800449a:	d11f      	bne.n	80044dc <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800449c:	68bb      	ldr	r3, [r7, #8]
 800449e:	015a      	lsls	r2, r3, #5
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	4413      	add	r3, r2
 80044a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	68ba      	ldr	r2, [r7, #8]
 80044ac:	0151      	lsls	r1, r2, #5
 80044ae:	68fa      	ldr	r2, [r7, #12]
 80044b0:	440a      	add	r2, r1
 80044b2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80044b6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80044ba:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80044bc:	68bb      	ldr	r3, [r7, #8]
 80044be:	015a      	lsls	r2, r3, #5
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	4413      	add	r3, r2
 80044c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	68ba      	ldr	r2, [r7, #8]
 80044cc:	0151      	lsls	r1, r2, #5
 80044ce:	68fa      	ldr	r2, [r7, #12]
 80044d0:	440a      	add	r2, r1
 80044d2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80044d6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80044da:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044e2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80044e4:	683b      	ldr	r3, [r7, #0]
 80044e6:	781b      	ldrb	r3, [r3, #0]
 80044e8:	f003 030f 	and.w	r3, r3, #15
 80044ec:	2101      	movs	r1, #1
 80044ee:	fa01 f303 	lsl.w	r3, r1, r3
 80044f2:	041b      	lsls	r3, r3, #16
 80044f4:	43db      	mvns	r3, r3
 80044f6:	68f9      	ldr	r1, [r7, #12]
 80044f8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80044fc:	4013      	ands	r3, r2
 80044fe:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004506:	69da      	ldr	r2, [r3, #28]
 8004508:	683b      	ldr	r3, [r7, #0]
 800450a:	781b      	ldrb	r3, [r3, #0]
 800450c:	f003 030f 	and.w	r3, r3, #15
 8004510:	2101      	movs	r1, #1
 8004512:	fa01 f303 	lsl.w	r3, r1, r3
 8004516:	041b      	lsls	r3, r3, #16
 8004518:	43db      	mvns	r3, r3
 800451a:	68f9      	ldr	r1, [r7, #12]
 800451c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004520:	4013      	ands	r3, r2
 8004522:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8004524:	68bb      	ldr	r3, [r7, #8]
 8004526:	015a      	lsls	r2, r3, #5
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	4413      	add	r3, r2
 800452c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004530:	681a      	ldr	r2, [r3, #0]
 8004532:	68bb      	ldr	r3, [r7, #8]
 8004534:	0159      	lsls	r1, r3, #5
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	440b      	add	r3, r1
 800453a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800453e:	4619      	mov	r1, r3
 8004540:	4b05      	ldr	r3, [pc, #20]	; (8004558 <USB_DeactivateEndpoint+0x1b4>)
 8004542:	4013      	ands	r3, r2
 8004544:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8004546:	2300      	movs	r3, #0
}
 8004548:	4618      	mov	r0, r3
 800454a:	3714      	adds	r7, #20
 800454c:	46bd      	mov	sp, r7
 800454e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004552:	4770      	bx	lr
 8004554:	ec337800 	.word	0xec337800
 8004558:	eff37800 	.word	0xeff37800

0800455c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800455c:	b580      	push	{r7, lr}
 800455e:	b08a      	sub	sp, #40	; 0x28
 8004560:	af02      	add	r7, sp, #8
 8004562:	60f8      	str	r0, [r7, #12]
 8004564:	60b9      	str	r1, [r7, #8]
 8004566:	4613      	mov	r3, r2
 8004568:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800456e:	68bb      	ldr	r3, [r7, #8]
 8004570:	781b      	ldrb	r3, [r3, #0]
 8004572:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004574:	68bb      	ldr	r3, [r7, #8]
 8004576:	785b      	ldrb	r3, [r3, #1]
 8004578:	2b01      	cmp	r3, #1
 800457a:	f040 815c 	bne.w	8004836 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800457e:	68bb      	ldr	r3, [r7, #8]
 8004580:	699b      	ldr	r3, [r3, #24]
 8004582:	2b00      	cmp	r3, #0
 8004584:	d132      	bne.n	80045ec <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004586:	69bb      	ldr	r3, [r7, #24]
 8004588:	015a      	lsls	r2, r3, #5
 800458a:	69fb      	ldr	r3, [r7, #28]
 800458c:	4413      	add	r3, r2
 800458e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004592:	691b      	ldr	r3, [r3, #16]
 8004594:	69ba      	ldr	r2, [r7, #24]
 8004596:	0151      	lsls	r1, r2, #5
 8004598:	69fa      	ldr	r2, [r7, #28]
 800459a:	440a      	add	r2, r1
 800459c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80045a0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80045a4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80045a8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80045aa:	69bb      	ldr	r3, [r7, #24]
 80045ac:	015a      	lsls	r2, r3, #5
 80045ae:	69fb      	ldr	r3, [r7, #28]
 80045b0:	4413      	add	r3, r2
 80045b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045b6:	691b      	ldr	r3, [r3, #16]
 80045b8:	69ba      	ldr	r2, [r7, #24]
 80045ba:	0151      	lsls	r1, r2, #5
 80045bc:	69fa      	ldr	r2, [r7, #28]
 80045be:	440a      	add	r2, r1
 80045c0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80045c4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80045c8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80045ca:	69bb      	ldr	r3, [r7, #24]
 80045cc:	015a      	lsls	r2, r3, #5
 80045ce:	69fb      	ldr	r3, [r7, #28]
 80045d0:	4413      	add	r3, r2
 80045d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045d6:	691b      	ldr	r3, [r3, #16]
 80045d8:	69ba      	ldr	r2, [r7, #24]
 80045da:	0151      	lsls	r1, r2, #5
 80045dc:	69fa      	ldr	r2, [r7, #28]
 80045de:	440a      	add	r2, r1
 80045e0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80045e4:	0cdb      	lsrs	r3, r3, #19
 80045e6:	04db      	lsls	r3, r3, #19
 80045e8:	6113      	str	r3, [r2, #16]
 80045ea:	e074      	b.n	80046d6 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80045ec:	69bb      	ldr	r3, [r7, #24]
 80045ee:	015a      	lsls	r2, r3, #5
 80045f0:	69fb      	ldr	r3, [r7, #28]
 80045f2:	4413      	add	r3, r2
 80045f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045f8:	691b      	ldr	r3, [r3, #16]
 80045fa:	69ba      	ldr	r2, [r7, #24]
 80045fc:	0151      	lsls	r1, r2, #5
 80045fe:	69fa      	ldr	r2, [r7, #28]
 8004600:	440a      	add	r2, r1
 8004602:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004606:	0cdb      	lsrs	r3, r3, #19
 8004608:	04db      	lsls	r3, r3, #19
 800460a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800460c:	69bb      	ldr	r3, [r7, #24]
 800460e:	015a      	lsls	r2, r3, #5
 8004610:	69fb      	ldr	r3, [r7, #28]
 8004612:	4413      	add	r3, r2
 8004614:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004618:	691b      	ldr	r3, [r3, #16]
 800461a:	69ba      	ldr	r2, [r7, #24]
 800461c:	0151      	lsls	r1, r2, #5
 800461e:	69fa      	ldr	r2, [r7, #28]
 8004620:	440a      	add	r2, r1
 8004622:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004626:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800462a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800462e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004630:	69bb      	ldr	r3, [r7, #24]
 8004632:	015a      	lsls	r2, r3, #5
 8004634:	69fb      	ldr	r3, [r7, #28]
 8004636:	4413      	add	r3, r2
 8004638:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800463c:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800463e:	68bb      	ldr	r3, [r7, #8]
 8004640:	6999      	ldr	r1, [r3, #24]
 8004642:	68bb      	ldr	r3, [r7, #8]
 8004644:	68db      	ldr	r3, [r3, #12]
 8004646:	440b      	add	r3, r1
 8004648:	1e59      	subs	r1, r3, #1
 800464a:	68bb      	ldr	r3, [r7, #8]
 800464c:	68db      	ldr	r3, [r3, #12]
 800464e:	fbb1 f3f3 	udiv	r3, r1, r3
 8004652:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004654:	4b9d      	ldr	r3, [pc, #628]	; (80048cc <USB_EPStartXfer+0x370>)
 8004656:	400b      	ands	r3, r1
 8004658:	69b9      	ldr	r1, [r7, #24]
 800465a:	0148      	lsls	r0, r1, #5
 800465c:	69f9      	ldr	r1, [r7, #28]
 800465e:	4401      	add	r1, r0
 8004660:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004664:	4313      	orrs	r3, r2
 8004666:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004668:	69bb      	ldr	r3, [r7, #24]
 800466a:	015a      	lsls	r2, r3, #5
 800466c:	69fb      	ldr	r3, [r7, #28]
 800466e:	4413      	add	r3, r2
 8004670:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004674:	691a      	ldr	r2, [r3, #16]
 8004676:	68bb      	ldr	r3, [r7, #8]
 8004678:	699b      	ldr	r3, [r3, #24]
 800467a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800467e:	69b9      	ldr	r1, [r7, #24]
 8004680:	0148      	lsls	r0, r1, #5
 8004682:	69f9      	ldr	r1, [r7, #28]
 8004684:	4401      	add	r1, r0
 8004686:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800468a:	4313      	orrs	r3, r2
 800468c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800468e:	68bb      	ldr	r3, [r7, #8]
 8004690:	791b      	ldrb	r3, [r3, #4]
 8004692:	2b01      	cmp	r3, #1
 8004694:	d11f      	bne.n	80046d6 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8004696:	69bb      	ldr	r3, [r7, #24]
 8004698:	015a      	lsls	r2, r3, #5
 800469a:	69fb      	ldr	r3, [r7, #28]
 800469c:	4413      	add	r3, r2
 800469e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046a2:	691b      	ldr	r3, [r3, #16]
 80046a4:	69ba      	ldr	r2, [r7, #24]
 80046a6:	0151      	lsls	r1, r2, #5
 80046a8:	69fa      	ldr	r2, [r7, #28]
 80046aa:	440a      	add	r2, r1
 80046ac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80046b0:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80046b4:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80046b6:	69bb      	ldr	r3, [r7, #24]
 80046b8:	015a      	lsls	r2, r3, #5
 80046ba:	69fb      	ldr	r3, [r7, #28]
 80046bc:	4413      	add	r3, r2
 80046be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046c2:	691b      	ldr	r3, [r3, #16]
 80046c4:	69ba      	ldr	r2, [r7, #24]
 80046c6:	0151      	lsls	r1, r2, #5
 80046c8:	69fa      	ldr	r2, [r7, #28]
 80046ca:	440a      	add	r2, r1
 80046cc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80046d0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80046d4:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80046d6:	79fb      	ldrb	r3, [r7, #7]
 80046d8:	2b01      	cmp	r3, #1
 80046da:	d14b      	bne.n	8004774 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80046dc:	68bb      	ldr	r3, [r7, #8]
 80046de:	695b      	ldr	r3, [r3, #20]
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d009      	beq.n	80046f8 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80046e4:	69bb      	ldr	r3, [r7, #24]
 80046e6:	015a      	lsls	r2, r3, #5
 80046e8:	69fb      	ldr	r3, [r7, #28]
 80046ea:	4413      	add	r3, r2
 80046ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046f0:	461a      	mov	r2, r3
 80046f2:	68bb      	ldr	r3, [r7, #8]
 80046f4:	695b      	ldr	r3, [r3, #20]
 80046f6:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80046f8:	68bb      	ldr	r3, [r7, #8]
 80046fa:	791b      	ldrb	r3, [r3, #4]
 80046fc:	2b01      	cmp	r3, #1
 80046fe:	d128      	bne.n	8004752 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004700:	69fb      	ldr	r3, [r7, #28]
 8004702:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004706:	689b      	ldr	r3, [r3, #8]
 8004708:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800470c:	2b00      	cmp	r3, #0
 800470e:	d110      	bne.n	8004732 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004710:	69bb      	ldr	r3, [r7, #24]
 8004712:	015a      	lsls	r2, r3, #5
 8004714:	69fb      	ldr	r3, [r7, #28]
 8004716:	4413      	add	r3, r2
 8004718:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	69ba      	ldr	r2, [r7, #24]
 8004720:	0151      	lsls	r1, r2, #5
 8004722:	69fa      	ldr	r2, [r7, #28]
 8004724:	440a      	add	r2, r1
 8004726:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800472a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800472e:	6013      	str	r3, [r2, #0]
 8004730:	e00f      	b.n	8004752 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004732:	69bb      	ldr	r3, [r7, #24]
 8004734:	015a      	lsls	r2, r3, #5
 8004736:	69fb      	ldr	r3, [r7, #28]
 8004738:	4413      	add	r3, r2
 800473a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	69ba      	ldr	r2, [r7, #24]
 8004742:	0151      	lsls	r1, r2, #5
 8004744:	69fa      	ldr	r2, [r7, #28]
 8004746:	440a      	add	r2, r1
 8004748:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800474c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004750:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004752:	69bb      	ldr	r3, [r7, #24]
 8004754:	015a      	lsls	r2, r3, #5
 8004756:	69fb      	ldr	r3, [r7, #28]
 8004758:	4413      	add	r3, r2
 800475a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	69ba      	ldr	r2, [r7, #24]
 8004762:	0151      	lsls	r1, r2, #5
 8004764:	69fa      	ldr	r2, [r7, #28]
 8004766:	440a      	add	r2, r1
 8004768:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800476c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004770:	6013      	str	r3, [r2, #0]
 8004772:	e133      	b.n	80049dc <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004774:	69bb      	ldr	r3, [r7, #24]
 8004776:	015a      	lsls	r2, r3, #5
 8004778:	69fb      	ldr	r3, [r7, #28]
 800477a:	4413      	add	r3, r2
 800477c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	69ba      	ldr	r2, [r7, #24]
 8004784:	0151      	lsls	r1, r2, #5
 8004786:	69fa      	ldr	r2, [r7, #28]
 8004788:	440a      	add	r2, r1
 800478a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800478e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004792:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004794:	68bb      	ldr	r3, [r7, #8]
 8004796:	791b      	ldrb	r3, [r3, #4]
 8004798:	2b01      	cmp	r3, #1
 800479a:	d015      	beq.n	80047c8 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800479c:	68bb      	ldr	r3, [r7, #8]
 800479e:	699b      	ldr	r3, [r3, #24]
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	f000 811b 	beq.w	80049dc <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80047a6:	69fb      	ldr	r3, [r7, #28]
 80047a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047ac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80047ae:	68bb      	ldr	r3, [r7, #8]
 80047b0:	781b      	ldrb	r3, [r3, #0]
 80047b2:	f003 030f 	and.w	r3, r3, #15
 80047b6:	2101      	movs	r1, #1
 80047b8:	fa01 f303 	lsl.w	r3, r1, r3
 80047bc:	69f9      	ldr	r1, [r7, #28]
 80047be:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80047c2:	4313      	orrs	r3, r2
 80047c4:	634b      	str	r3, [r1, #52]	; 0x34
 80047c6:	e109      	b.n	80049dc <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80047c8:	69fb      	ldr	r3, [r7, #28]
 80047ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047ce:	689b      	ldr	r3, [r3, #8]
 80047d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d110      	bne.n	80047fa <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80047d8:	69bb      	ldr	r3, [r7, #24]
 80047da:	015a      	lsls	r2, r3, #5
 80047dc:	69fb      	ldr	r3, [r7, #28]
 80047de:	4413      	add	r3, r2
 80047e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	69ba      	ldr	r2, [r7, #24]
 80047e8:	0151      	lsls	r1, r2, #5
 80047ea:	69fa      	ldr	r2, [r7, #28]
 80047ec:	440a      	add	r2, r1
 80047ee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80047f2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80047f6:	6013      	str	r3, [r2, #0]
 80047f8:	e00f      	b.n	800481a <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80047fa:	69bb      	ldr	r3, [r7, #24]
 80047fc:	015a      	lsls	r2, r3, #5
 80047fe:	69fb      	ldr	r3, [r7, #28]
 8004800:	4413      	add	r3, r2
 8004802:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	69ba      	ldr	r2, [r7, #24]
 800480a:	0151      	lsls	r1, r2, #5
 800480c:	69fa      	ldr	r2, [r7, #28]
 800480e:	440a      	add	r2, r1
 8004810:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004814:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004818:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800481a:	68bb      	ldr	r3, [r7, #8]
 800481c:	6919      	ldr	r1, [r3, #16]
 800481e:	68bb      	ldr	r3, [r7, #8]
 8004820:	781a      	ldrb	r2, [r3, #0]
 8004822:	68bb      	ldr	r3, [r7, #8]
 8004824:	699b      	ldr	r3, [r3, #24]
 8004826:	b298      	uxth	r0, r3
 8004828:	79fb      	ldrb	r3, [r7, #7]
 800482a:	9300      	str	r3, [sp, #0]
 800482c:	4603      	mov	r3, r0
 800482e:	68f8      	ldr	r0, [r7, #12]
 8004830:	f000 fade 	bl	8004df0 <USB_WritePacket>
 8004834:	e0d2      	b.n	80049dc <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004836:	69bb      	ldr	r3, [r7, #24]
 8004838:	015a      	lsls	r2, r3, #5
 800483a:	69fb      	ldr	r3, [r7, #28]
 800483c:	4413      	add	r3, r2
 800483e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004842:	691b      	ldr	r3, [r3, #16]
 8004844:	69ba      	ldr	r2, [r7, #24]
 8004846:	0151      	lsls	r1, r2, #5
 8004848:	69fa      	ldr	r2, [r7, #28]
 800484a:	440a      	add	r2, r1
 800484c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004850:	0cdb      	lsrs	r3, r3, #19
 8004852:	04db      	lsls	r3, r3, #19
 8004854:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004856:	69bb      	ldr	r3, [r7, #24]
 8004858:	015a      	lsls	r2, r3, #5
 800485a:	69fb      	ldr	r3, [r7, #28]
 800485c:	4413      	add	r3, r2
 800485e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004862:	691b      	ldr	r3, [r3, #16]
 8004864:	69ba      	ldr	r2, [r7, #24]
 8004866:	0151      	lsls	r1, r2, #5
 8004868:	69fa      	ldr	r2, [r7, #28]
 800486a:	440a      	add	r2, r1
 800486c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004870:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004874:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004878:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800487a:	68bb      	ldr	r3, [r7, #8]
 800487c:	699b      	ldr	r3, [r3, #24]
 800487e:	2b00      	cmp	r3, #0
 8004880:	d126      	bne.n	80048d0 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8004882:	69bb      	ldr	r3, [r7, #24]
 8004884:	015a      	lsls	r2, r3, #5
 8004886:	69fb      	ldr	r3, [r7, #28]
 8004888:	4413      	add	r3, r2
 800488a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800488e:	691a      	ldr	r2, [r3, #16]
 8004890:	68bb      	ldr	r3, [r7, #8]
 8004892:	68db      	ldr	r3, [r3, #12]
 8004894:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004898:	69b9      	ldr	r1, [r7, #24]
 800489a:	0148      	lsls	r0, r1, #5
 800489c:	69f9      	ldr	r1, [r7, #28]
 800489e:	4401      	add	r1, r0
 80048a0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80048a4:	4313      	orrs	r3, r2
 80048a6:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80048a8:	69bb      	ldr	r3, [r7, #24]
 80048aa:	015a      	lsls	r2, r3, #5
 80048ac:	69fb      	ldr	r3, [r7, #28]
 80048ae:	4413      	add	r3, r2
 80048b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048b4:	691b      	ldr	r3, [r3, #16]
 80048b6:	69ba      	ldr	r2, [r7, #24]
 80048b8:	0151      	lsls	r1, r2, #5
 80048ba:	69fa      	ldr	r2, [r7, #28]
 80048bc:	440a      	add	r2, r1
 80048be:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80048c2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80048c6:	6113      	str	r3, [r2, #16]
 80048c8:	e03a      	b.n	8004940 <USB_EPStartXfer+0x3e4>
 80048ca:	bf00      	nop
 80048cc:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80048d0:	68bb      	ldr	r3, [r7, #8]
 80048d2:	699a      	ldr	r2, [r3, #24]
 80048d4:	68bb      	ldr	r3, [r7, #8]
 80048d6:	68db      	ldr	r3, [r3, #12]
 80048d8:	4413      	add	r3, r2
 80048da:	1e5a      	subs	r2, r3, #1
 80048dc:	68bb      	ldr	r3, [r7, #8]
 80048de:	68db      	ldr	r3, [r3, #12]
 80048e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80048e4:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 80048e6:	68bb      	ldr	r3, [r7, #8]
 80048e8:	68db      	ldr	r3, [r3, #12]
 80048ea:	8afa      	ldrh	r2, [r7, #22]
 80048ec:	fb03 f202 	mul.w	r2, r3, r2
 80048f0:	68bb      	ldr	r3, [r7, #8]
 80048f2:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80048f4:	69bb      	ldr	r3, [r7, #24]
 80048f6:	015a      	lsls	r2, r3, #5
 80048f8:	69fb      	ldr	r3, [r7, #28]
 80048fa:	4413      	add	r3, r2
 80048fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004900:	691a      	ldr	r2, [r3, #16]
 8004902:	8afb      	ldrh	r3, [r7, #22]
 8004904:	04d9      	lsls	r1, r3, #19
 8004906:	4b38      	ldr	r3, [pc, #224]	; (80049e8 <USB_EPStartXfer+0x48c>)
 8004908:	400b      	ands	r3, r1
 800490a:	69b9      	ldr	r1, [r7, #24]
 800490c:	0148      	lsls	r0, r1, #5
 800490e:	69f9      	ldr	r1, [r7, #28]
 8004910:	4401      	add	r1, r0
 8004912:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004916:	4313      	orrs	r3, r2
 8004918:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800491a:	69bb      	ldr	r3, [r7, #24]
 800491c:	015a      	lsls	r2, r3, #5
 800491e:	69fb      	ldr	r3, [r7, #28]
 8004920:	4413      	add	r3, r2
 8004922:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004926:	691a      	ldr	r2, [r3, #16]
 8004928:	68bb      	ldr	r3, [r7, #8]
 800492a:	69db      	ldr	r3, [r3, #28]
 800492c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004930:	69b9      	ldr	r1, [r7, #24]
 8004932:	0148      	lsls	r0, r1, #5
 8004934:	69f9      	ldr	r1, [r7, #28]
 8004936:	4401      	add	r1, r0
 8004938:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800493c:	4313      	orrs	r3, r2
 800493e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004940:	79fb      	ldrb	r3, [r7, #7]
 8004942:	2b01      	cmp	r3, #1
 8004944:	d10d      	bne.n	8004962 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004946:	68bb      	ldr	r3, [r7, #8]
 8004948:	691b      	ldr	r3, [r3, #16]
 800494a:	2b00      	cmp	r3, #0
 800494c:	d009      	beq.n	8004962 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800494e:	68bb      	ldr	r3, [r7, #8]
 8004950:	6919      	ldr	r1, [r3, #16]
 8004952:	69bb      	ldr	r3, [r7, #24]
 8004954:	015a      	lsls	r2, r3, #5
 8004956:	69fb      	ldr	r3, [r7, #28]
 8004958:	4413      	add	r3, r2
 800495a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800495e:	460a      	mov	r2, r1
 8004960:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8004962:	68bb      	ldr	r3, [r7, #8]
 8004964:	791b      	ldrb	r3, [r3, #4]
 8004966:	2b01      	cmp	r3, #1
 8004968:	d128      	bne.n	80049bc <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800496a:	69fb      	ldr	r3, [r7, #28]
 800496c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004970:	689b      	ldr	r3, [r3, #8]
 8004972:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004976:	2b00      	cmp	r3, #0
 8004978:	d110      	bne.n	800499c <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800497a:	69bb      	ldr	r3, [r7, #24]
 800497c:	015a      	lsls	r2, r3, #5
 800497e:	69fb      	ldr	r3, [r7, #28]
 8004980:	4413      	add	r3, r2
 8004982:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	69ba      	ldr	r2, [r7, #24]
 800498a:	0151      	lsls	r1, r2, #5
 800498c:	69fa      	ldr	r2, [r7, #28]
 800498e:	440a      	add	r2, r1
 8004990:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004994:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004998:	6013      	str	r3, [r2, #0]
 800499a:	e00f      	b.n	80049bc <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800499c:	69bb      	ldr	r3, [r7, #24]
 800499e:	015a      	lsls	r2, r3, #5
 80049a0:	69fb      	ldr	r3, [r7, #28]
 80049a2:	4413      	add	r3, r2
 80049a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	69ba      	ldr	r2, [r7, #24]
 80049ac:	0151      	lsls	r1, r2, #5
 80049ae:	69fa      	ldr	r2, [r7, #28]
 80049b0:	440a      	add	r2, r1
 80049b2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80049b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80049ba:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80049bc:	69bb      	ldr	r3, [r7, #24]
 80049be:	015a      	lsls	r2, r3, #5
 80049c0:	69fb      	ldr	r3, [r7, #28]
 80049c2:	4413      	add	r3, r2
 80049c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	69ba      	ldr	r2, [r7, #24]
 80049cc:	0151      	lsls	r1, r2, #5
 80049ce:	69fa      	ldr	r2, [r7, #28]
 80049d0:	440a      	add	r2, r1
 80049d2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80049d6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80049da:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80049dc:	2300      	movs	r3, #0
}
 80049de:	4618      	mov	r0, r3
 80049e0:	3720      	adds	r7, #32
 80049e2:	46bd      	mov	sp, r7
 80049e4:	bd80      	pop	{r7, pc}
 80049e6:	bf00      	nop
 80049e8:	1ff80000 	.word	0x1ff80000

080049ec <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80049ec:	b480      	push	{r7}
 80049ee:	b087      	sub	sp, #28
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	60f8      	str	r0, [r7, #12]
 80049f4:	60b9      	str	r1, [r7, #8]
 80049f6:	4613      	mov	r3, r2
 80049f8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80049fe:	68bb      	ldr	r3, [r7, #8]
 8004a00:	781b      	ldrb	r3, [r3, #0]
 8004a02:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004a04:	68bb      	ldr	r3, [r7, #8]
 8004a06:	785b      	ldrb	r3, [r3, #1]
 8004a08:	2b01      	cmp	r3, #1
 8004a0a:	f040 80ce 	bne.w	8004baa <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004a0e:	68bb      	ldr	r3, [r7, #8]
 8004a10:	699b      	ldr	r3, [r3, #24]
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d132      	bne.n	8004a7c <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004a16:	693b      	ldr	r3, [r7, #16]
 8004a18:	015a      	lsls	r2, r3, #5
 8004a1a:	697b      	ldr	r3, [r7, #20]
 8004a1c:	4413      	add	r3, r2
 8004a1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a22:	691b      	ldr	r3, [r3, #16]
 8004a24:	693a      	ldr	r2, [r7, #16]
 8004a26:	0151      	lsls	r1, r2, #5
 8004a28:	697a      	ldr	r2, [r7, #20]
 8004a2a:	440a      	add	r2, r1
 8004a2c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a30:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004a34:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004a38:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004a3a:	693b      	ldr	r3, [r7, #16]
 8004a3c:	015a      	lsls	r2, r3, #5
 8004a3e:	697b      	ldr	r3, [r7, #20]
 8004a40:	4413      	add	r3, r2
 8004a42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a46:	691b      	ldr	r3, [r3, #16]
 8004a48:	693a      	ldr	r2, [r7, #16]
 8004a4a:	0151      	lsls	r1, r2, #5
 8004a4c:	697a      	ldr	r2, [r7, #20]
 8004a4e:	440a      	add	r2, r1
 8004a50:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a54:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004a58:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004a5a:	693b      	ldr	r3, [r7, #16]
 8004a5c:	015a      	lsls	r2, r3, #5
 8004a5e:	697b      	ldr	r3, [r7, #20]
 8004a60:	4413      	add	r3, r2
 8004a62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a66:	691b      	ldr	r3, [r3, #16]
 8004a68:	693a      	ldr	r2, [r7, #16]
 8004a6a:	0151      	lsls	r1, r2, #5
 8004a6c:	697a      	ldr	r2, [r7, #20]
 8004a6e:	440a      	add	r2, r1
 8004a70:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a74:	0cdb      	lsrs	r3, r3, #19
 8004a76:	04db      	lsls	r3, r3, #19
 8004a78:	6113      	str	r3, [r2, #16]
 8004a7a:	e04e      	b.n	8004b1a <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004a7c:	693b      	ldr	r3, [r7, #16]
 8004a7e:	015a      	lsls	r2, r3, #5
 8004a80:	697b      	ldr	r3, [r7, #20]
 8004a82:	4413      	add	r3, r2
 8004a84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a88:	691b      	ldr	r3, [r3, #16]
 8004a8a:	693a      	ldr	r2, [r7, #16]
 8004a8c:	0151      	lsls	r1, r2, #5
 8004a8e:	697a      	ldr	r2, [r7, #20]
 8004a90:	440a      	add	r2, r1
 8004a92:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a96:	0cdb      	lsrs	r3, r3, #19
 8004a98:	04db      	lsls	r3, r3, #19
 8004a9a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004a9c:	693b      	ldr	r3, [r7, #16]
 8004a9e:	015a      	lsls	r2, r3, #5
 8004aa0:	697b      	ldr	r3, [r7, #20]
 8004aa2:	4413      	add	r3, r2
 8004aa4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004aa8:	691b      	ldr	r3, [r3, #16]
 8004aaa:	693a      	ldr	r2, [r7, #16]
 8004aac:	0151      	lsls	r1, r2, #5
 8004aae:	697a      	ldr	r2, [r7, #20]
 8004ab0:	440a      	add	r2, r1
 8004ab2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ab6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004aba:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004abe:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8004ac0:	68bb      	ldr	r3, [r7, #8]
 8004ac2:	699a      	ldr	r2, [r3, #24]
 8004ac4:	68bb      	ldr	r3, [r7, #8]
 8004ac6:	68db      	ldr	r3, [r3, #12]
 8004ac8:	429a      	cmp	r2, r3
 8004aca:	d903      	bls.n	8004ad4 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8004acc:	68bb      	ldr	r3, [r7, #8]
 8004ace:	68da      	ldr	r2, [r3, #12]
 8004ad0:	68bb      	ldr	r3, [r7, #8]
 8004ad2:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004ad4:	693b      	ldr	r3, [r7, #16]
 8004ad6:	015a      	lsls	r2, r3, #5
 8004ad8:	697b      	ldr	r3, [r7, #20]
 8004ada:	4413      	add	r3, r2
 8004adc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ae0:	691b      	ldr	r3, [r3, #16]
 8004ae2:	693a      	ldr	r2, [r7, #16]
 8004ae4:	0151      	lsls	r1, r2, #5
 8004ae6:	697a      	ldr	r2, [r7, #20]
 8004ae8:	440a      	add	r2, r1
 8004aea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004aee:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004af2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004af4:	693b      	ldr	r3, [r7, #16]
 8004af6:	015a      	lsls	r2, r3, #5
 8004af8:	697b      	ldr	r3, [r7, #20]
 8004afa:	4413      	add	r3, r2
 8004afc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b00:	691a      	ldr	r2, [r3, #16]
 8004b02:	68bb      	ldr	r3, [r7, #8]
 8004b04:	699b      	ldr	r3, [r3, #24]
 8004b06:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004b0a:	6939      	ldr	r1, [r7, #16]
 8004b0c:	0148      	lsls	r0, r1, #5
 8004b0e:	6979      	ldr	r1, [r7, #20]
 8004b10:	4401      	add	r1, r0
 8004b12:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004b16:	4313      	orrs	r3, r2
 8004b18:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004b1a:	79fb      	ldrb	r3, [r7, #7]
 8004b1c:	2b01      	cmp	r3, #1
 8004b1e:	d11e      	bne.n	8004b5e <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004b20:	68bb      	ldr	r3, [r7, #8]
 8004b22:	695b      	ldr	r3, [r3, #20]
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d009      	beq.n	8004b3c <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004b28:	693b      	ldr	r3, [r7, #16]
 8004b2a:	015a      	lsls	r2, r3, #5
 8004b2c:	697b      	ldr	r3, [r7, #20]
 8004b2e:	4413      	add	r3, r2
 8004b30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b34:	461a      	mov	r2, r3
 8004b36:	68bb      	ldr	r3, [r7, #8]
 8004b38:	695b      	ldr	r3, [r3, #20]
 8004b3a:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004b3c:	693b      	ldr	r3, [r7, #16]
 8004b3e:	015a      	lsls	r2, r3, #5
 8004b40:	697b      	ldr	r3, [r7, #20]
 8004b42:	4413      	add	r3, r2
 8004b44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	693a      	ldr	r2, [r7, #16]
 8004b4c:	0151      	lsls	r1, r2, #5
 8004b4e:	697a      	ldr	r2, [r7, #20]
 8004b50:	440a      	add	r2, r1
 8004b52:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b56:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004b5a:	6013      	str	r3, [r2, #0]
 8004b5c:	e097      	b.n	8004c8e <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004b5e:	693b      	ldr	r3, [r7, #16]
 8004b60:	015a      	lsls	r2, r3, #5
 8004b62:	697b      	ldr	r3, [r7, #20]
 8004b64:	4413      	add	r3, r2
 8004b66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	693a      	ldr	r2, [r7, #16]
 8004b6e:	0151      	lsls	r1, r2, #5
 8004b70:	697a      	ldr	r2, [r7, #20]
 8004b72:	440a      	add	r2, r1
 8004b74:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b78:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004b7c:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8004b7e:	68bb      	ldr	r3, [r7, #8]
 8004b80:	699b      	ldr	r3, [r3, #24]
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	f000 8083 	beq.w	8004c8e <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004b88:	697b      	ldr	r3, [r7, #20]
 8004b8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b8e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004b90:	68bb      	ldr	r3, [r7, #8]
 8004b92:	781b      	ldrb	r3, [r3, #0]
 8004b94:	f003 030f 	and.w	r3, r3, #15
 8004b98:	2101      	movs	r1, #1
 8004b9a:	fa01 f303 	lsl.w	r3, r1, r3
 8004b9e:	6979      	ldr	r1, [r7, #20]
 8004ba0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004ba4:	4313      	orrs	r3, r2
 8004ba6:	634b      	str	r3, [r1, #52]	; 0x34
 8004ba8:	e071      	b.n	8004c8e <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004baa:	693b      	ldr	r3, [r7, #16]
 8004bac:	015a      	lsls	r2, r3, #5
 8004bae:	697b      	ldr	r3, [r7, #20]
 8004bb0:	4413      	add	r3, r2
 8004bb2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bb6:	691b      	ldr	r3, [r3, #16]
 8004bb8:	693a      	ldr	r2, [r7, #16]
 8004bba:	0151      	lsls	r1, r2, #5
 8004bbc:	697a      	ldr	r2, [r7, #20]
 8004bbe:	440a      	add	r2, r1
 8004bc0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004bc4:	0cdb      	lsrs	r3, r3, #19
 8004bc6:	04db      	lsls	r3, r3, #19
 8004bc8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004bca:	693b      	ldr	r3, [r7, #16]
 8004bcc:	015a      	lsls	r2, r3, #5
 8004bce:	697b      	ldr	r3, [r7, #20]
 8004bd0:	4413      	add	r3, r2
 8004bd2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bd6:	691b      	ldr	r3, [r3, #16]
 8004bd8:	693a      	ldr	r2, [r7, #16]
 8004bda:	0151      	lsls	r1, r2, #5
 8004bdc:	697a      	ldr	r2, [r7, #20]
 8004bde:	440a      	add	r2, r1
 8004be0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004be4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004be8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004bec:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8004bee:	68bb      	ldr	r3, [r7, #8]
 8004bf0:	699b      	ldr	r3, [r3, #24]
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d003      	beq.n	8004bfe <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8004bf6:	68bb      	ldr	r3, [r7, #8]
 8004bf8:	68da      	ldr	r2, [r3, #12]
 8004bfa:	68bb      	ldr	r3, [r7, #8]
 8004bfc:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8004bfe:	68bb      	ldr	r3, [r7, #8]
 8004c00:	68da      	ldr	r2, [r3, #12]
 8004c02:	68bb      	ldr	r3, [r7, #8]
 8004c04:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004c06:	693b      	ldr	r3, [r7, #16]
 8004c08:	015a      	lsls	r2, r3, #5
 8004c0a:	697b      	ldr	r3, [r7, #20]
 8004c0c:	4413      	add	r3, r2
 8004c0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c12:	691b      	ldr	r3, [r3, #16]
 8004c14:	693a      	ldr	r2, [r7, #16]
 8004c16:	0151      	lsls	r1, r2, #5
 8004c18:	697a      	ldr	r2, [r7, #20]
 8004c1a:	440a      	add	r2, r1
 8004c1c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004c20:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004c24:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8004c26:	693b      	ldr	r3, [r7, #16]
 8004c28:	015a      	lsls	r2, r3, #5
 8004c2a:	697b      	ldr	r3, [r7, #20]
 8004c2c:	4413      	add	r3, r2
 8004c2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c32:	691a      	ldr	r2, [r3, #16]
 8004c34:	68bb      	ldr	r3, [r7, #8]
 8004c36:	69db      	ldr	r3, [r3, #28]
 8004c38:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004c3c:	6939      	ldr	r1, [r7, #16]
 8004c3e:	0148      	lsls	r0, r1, #5
 8004c40:	6979      	ldr	r1, [r7, #20]
 8004c42:	4401      	add	r1, r0
 8004c44:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004c48:	4313      	orrs	r3, r2
 8004c4a:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8004c4c:	79fb      	ldrb	r3, [r7, #7]
 8004c4e:	2b01      	cmp	r3, #1
 8004c50:	d10d      	bne.n	8004c6e <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004c52:	68bb      	ldr	r3, [r7, #8]
 8004c54:	691b      	ldr	r3, [r3, #16]
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d009      	beq.n	8004c6e <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004c5a:	68bb      	ldr	r3, [r7, #8]
 8004c5c:	6919      	ldr	r1, [r3, #16]
 8004c5e:	693b      	ldr	r3, [r7, #16]
 8004c60:	015a      	lsls	r2, r3, #5
 8004c62:	697b      	ldr	r3, [r7, #20]
 8004c64:	4413      	add	r3, r2
 8004c66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c6a:	460a      	mov	r2, r1
 8004c6c:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004c6e:	693b      	ldr	r3, [r7, #16]
 8004c70:	015a      	lsls	r2, r3, #5
 8004c72:	697b      	ldr	r3, [r7, #20]
 8004c74:	4413      	add	r3, r2
 8004c76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	693a      	ldr	r2, [r7, #16]
 8004c7e:	0151      	lsls	r1, r2, #5
 8004c80:	697a      	ldr	r2, [r7, #20]
 8004c82:	440a      	add	r2, r1
 8004c84:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004c88:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004c8c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004c8e:	2300      	movs	r3, #0
}
 8004c90:	4618      	mov	r0, r3
 8004c92:	371c      	adds	r7, #28
 8004c94:	46bd      	mov	sp, r7
 8004c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c9a:	4770      	bx	lr

08004c9c <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004c9c:	b480      	push	{r7}
 8004c9e:	b087      	sub	sp, #28
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	6078      	str	r0, [r7, #4]
 8004ca4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004ca6:	2300      	movs	r3, #0
 8004ca8:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8004caa:	2300      	movs	r3, #0
 8004cac:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004cb2:	683b      	ldr	r3, [r7, #0]
 8004cb4:	785b      	ldrb	r3, [r3, #1]
 8004cb6:	2b01      	cmp	r3, #1
 8004cb8:	d14a      	bne.n	8004d50 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004cba:	683b      	ldr	r3, [r7, #0]
 8004cbc:	781b      	ldrb	r3, [r3, #0]
 8004cbe:	015a      	lsls	r2, r3, #5
 8004cc0:	693b      	ldr	r3, [r7, #16]
 8004cc2:	4413      	add	r3, r2
 8004cc4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004cce:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004cd2:	f040 8086 	bne.w	8004de2 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8004cd6:	683b      	ldr	r3, [r7, #0]
 8004cd8:	781b      	ldrb	r3, [r3, #0]
 8004cda:	015a      	lsls	r2, r3, #5
 8004cdc:	693b      	ldr	r3, [r7, #16]
 8004cde:	4413      	add	r3, r2
 8004ce0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	683a      	ldr	r2, [r7, #0]
 8004ce8:	7812      	ldrb	r2, [r2, #0]
 8004cea:	0151      	lsls	r1, r2, #5
 8004cec:	693a      	ldr	r2, [r7, #16]
 8004cee:	440a      	add	r2, r1
 8004cf0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004cf4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004cf8:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8004cfa:	683b      	ldr	r3, [r7, #0]
 8004cfc:	781b      	ldrb	r3, [r3, #0]
 8004cfe:	015a      	lsls	r2, r3, #5
 8004d00:	693b      	ldr	r3, [r7, #16]
 8004d02:	4413      	add	r3, r2
 8004d04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	683a      	ldr	r2, [r7, #0]
 8004d0c:	7812      	ldrb	r2, [r2, #0]
 8004d0e:	0151      	lsls	r1, r2, #5
 8004d10:	693a      	ldr	r2, [r7, #16]
 8004d12:	440a      	add	r2, r1
 8004d14:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d18:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004d1c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	3301      	adds	r3, #1
 8004d22:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	f242 7210 	movw	r2, #10000	; 0x2710
 8004d2a:	4293      	cmp	r3, r2
 8004d2c:	d902      	bls.n	8004d34 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8004d2e:	2301      	movs	r3, #1
 8004d30:	75fb      	strb	r3, [r7, #23]
          break;
 8004d32:	e056      	b.n	8004de2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8004d34:	683b      	ldr	r3, [r7, #0]
 8004d36:	781b      	ldrb	r3, [r3, #0]
 8004d38:	015a      	lsls	r2, r3, #5
 8004d3a:	693b      	ldr	r3, [r7, #16]
 8004d3c:	4413      	add	r3, r2
 8004d3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004d48:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004d4c:	d0e7      	beq.n	8004d1e <USB_EPStopXfer+0x82>
 8004d4e:	e048      	b.n	8004de2 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004d50:	683b      	ldr	r3, [r7, #0]
 8004d52:	781b      	ldrb	r3, [r3, #0]
 8004d54:	015a      	lsls	r2, r3, #5
 8004d56:	693b      	ldr	r3, [r7, #16]
 8004d58:	4413      	add	r3, r2
 8004d5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004d64:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004d68:	d13b      	bne.n	8004de2 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8004d6a:	683b      	ldr	r3, [r7, #0]
 8004d6c:	781b      	ldrb	r3, [r3, #0]
 8004d6e:	015a      	lsls	r2, r3, #5
 8004d70:	693b      	ldr	r3, [r7, #16]
 8004d72:	4413      	add	r3, r2
 8004d74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	683a      	ldr	r2, [r7, #0]
 8004d7c:	7812      	ldrb	r2, [r2, #0]
 8004d7e:	0151      	lsls	r1, r2, #5
 8004d80:	693a      	ldr	r2, [r7, #16]
 8004d82:	440a      	add	r2, r1
 8004d84:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004d88:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004d8c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8004d8e:	683b      	ldr	r3, [r7, #0]
 8004d90:	781b      	ldrb	r3, [r3, #0]
 8004d92:	015a      	lsls	r2, r3, #5
 8004d94:	693b      	ldr	r3, [r7, #16]
 8004d96:	4413      	add	r3, r2
 8004d98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	683a      	ldr	r2, [r7, #0]
 8004da0:	7812      	ldrb	r2, [r2, #0]
 8004da2:	0151      	lsls	r1, r2, #5
 8004da4:	693a      	ldr	r2, [r7, #16]
 8004da6:	440a      	add	r2, r1
 8004da8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004dac:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004db0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	3301      	adds	r3, #1
 8004db6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	f242 7210 	movw	r2, #10000	; 0x2710
 8004dbe:	4293      	cmp	r3, r2
 8004dc0:	d902      	bls.n	8004dc8 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8004dc2:	2301      	movs	r3, #1
 8004dc4:	75fb      	strb	r3, [r7, #23]
          break;
 8004dc6:	e00c      	b.n	8004de2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8004dc8:	683b      	ldr	r3, [r7, #0]
 8004dca:	781b      	ldrb	r3, [r3, #0]
 8004dcc:	015a      	lsls	r2, r3, #5
 8004dce:	693b      	ldr	r3, [r7, #16]
 8004dd0:	4413      	add	r3, r2
 8004dd2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004ddc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004de0:	d0e7      	beq.n	8004db2 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8004de2:	7dfb      	ldrb	r3, [r7, #23]
}
 8004de4:	4618      	mov	r0, r3
 8004de6:	371c      	adds	r7, #28
 8004de8:	46bd      	mov	sp, r7
 8004dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dee:	4770      	bx	lr

08004df0 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8004df0:	b480      	push	{r7}
 8004df2:	b089      	sub	sp, #36	; 0x24
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	60f8      	str	r0, [r7, #12]
 8004df8:	60b9      	str	r1, [r7, #8]
 8004dfa:	4611      	mov	r1, r2
 8004dfc:	461a      	mov	r2, r3
 8004dfe:	460b      	mov	r3, r1
 8004e00:	71fb      	strb	r3, [r7, #7]
 8004e02:	4613      	mov	r3, r2
 8004e04:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8004e0a:	68bb      	ldr	r3, [r7, #8]
 8004e0c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8004e0e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d123      	bne.n	8004e5e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8004e16:	88bb      	ldrh	r3, [r7, #4]
 8004e18:	3303      	adds	r3, #3
 8004e1a:	089b      	lsrs	r3, r3, #2
 8004e1c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8004e1e:	2300      	movs	r3, #0
 8004e20:	61bb      	str	r3, [r7, #24]
 8004e22:	e018      	b.n	8004e56 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004e24:	79fb      	ldrb	r3, [r7, #7]
 8004e26:	031a      	lsls	r2, r3, #12
 8004e28:	697b      	ldr	r3, [r7, #20]
 8004e2a:	4413      	add	r3, r2
 8004e2c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004e30:	461a      	mov	r2, r3
 8004e32:	69fb      	ldr	r3, [r7, #28]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	6013      	str	r3, [r2, #0]
      pSrc++;
 8004e38:	69fb      	ldr	r3, [r7, #28]
 8004e3a:	3301      	adds	r3, #1
 8004e3c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004e3e:	69fb      	ldr	r3, [r7, #28]
 8004e40:	3301      	adds	r3, #1
 8004e42:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004e44:	69fb      	ldr	r3, [r7, #28]
 8004e46:	3301      	adds	r3, #1
 8004e48:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004e4a:	69fb      	ldr	r3, [r7, #28]
 8004e4c:	3301      	adds	r3, #1
 8004e4e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8004e50:	69bb      	ldr	r3, [r7, #24]
 8004e52:	3301      	adds	r3, #1
 8004e54:	61bb      	str	r3, [r7, #24]
 8004e56:	69ba      	ldr	r2, [r7, #24]
 8004e58:	693b      	ldr	r3, [r7, #16]
 8004e5a:	429a      	cmp	r2, r3
 8004e5c:	d3e2      	bcc.n	8004e24 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8004e5e:	2300      	movs	r3, #0
}
 8004e60:	4618      	mov	r0, r3
 8004e62:	3724      	adds	r7, #36	; 0x24
 8004e64:	46bd      	mov	sp, r7
 8004e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e6a:	4770      	bx	lr

08004e6c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004e6c:	b480      	push	{r7}
 8004e6e:	b08b      	sub	sp, #44	; 0x2c
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	60f8      	str	r0, [r7, #12]
 8004e74:	60b9      	str	r1, [r7, #8]
 8004e76:	4613      	mov	r3, r2
 8004e78:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8004e7e:	68bb      	ldr	r3, [r7, #8]
 8004e80:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8004e82:	88fb      	ldrh	r3, [r7, #6]
 8004e84:	089b      	lsrs	r3, r3, #2
 8004e86:	b29b      	uxth	r3, r3
 8004e88:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8004e8a:	88fb      	ldrh	r3, [r7, #6]
 8004e8c:	f003 0303 	and.w	r3, r3, #3
 8004e90:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8004e92:	2300      	movs	r3, #0
 8004e94:	623b      	str	r3, [r7, #32]
 8004e96:	e014      	b.n	8004ec2 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004e98:	69bb      	ldr	r3, [r7, #24]
 8004e9a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004e9e:	681a      	ldr	r2, [r3, #0]
 8004ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ea2:	601a      	str	r2, [r3, #0]
    pDest++;
 8004ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ea6:	3301      	adds	r3, #1
 8004ea8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eac:	3301      	adds	r3, #1
 8004eae:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eb2:	3301      	adds	r3, #1
 8004eb4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eb8:	3301      	adds	r3, #1
 8004eba:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8004ebc:	6a3b      	ldr	r3, [r7, #32]
 8004ebe:	3301      	adds	r3, #1
 8004ec0:	623b      	str	r3, [r7, #32]
 8004ec2:	6a3a      	ldr	r2, [r7, #32]
 8004ec4:	697b      	ldr	r3, [r7, #20]
 8004ec6:	429a      	cmp	r2, r3
 8004ec8:	d3e6      	bcc.n	8004e98 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8004eca:	8bfb      	ldrh	r3, [r7, #30]
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d01e      	beq.n	8004f0e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8004ed0:	2300      	movs	r3, #0
 8004ed2:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8004ed4:	69bb      	ldr	r3, [r7, #24]
 8004ed6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004eda:	461a      	mov	r2, r3
 8004edc:	f107 0310 	add.w	r3, r7, #16
 8004ee0:	6812      	ldr	r2, [r2, #0]
 8004ee2:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8004ee4:	693a      	ldr	r2, [r7, #16]
 8004ee6:	6a3b      	ldr	r3, [r7, #32]
 8004ee8:	b2db      	uxtb	r3, r3
 8004eea:	00db      	lsls	r3, r3, #3
 8004eec:	fa22 f303 	lsr.w	r3, r2, r3
 8004ef0:	b2da      	uxtb	r2, r3
 8004ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ef4:	701a      	strb	r2, [r3, #0]
      i++;
 8004ef6:	6a3b      	ldr	r3, [r7, #32]
 8004ef8:	3301      	adds	r3, #1
 8004efa:	623b      	str	r3, [r7, #32]
      pDest++;
 8004efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004efe:	3301      	adds	r3, #1
 8004f00:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8004f02:	8bfb      	ldrh	r3, [r7, #30]
 8004f04:	3b01      	subs	r3, #1
 8004f06:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8004f08:	8bfb      	ldrh	r3, [r7, #30]
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d1ea      	bne.n	8004ee4 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8004f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004f10:	4618      	mov	r0, r3
 8004f12:	372c      	adds	r7, #44	; 0x2c
 8004f14:	46bd      	mov	sp, r7
 8004f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f1a:	4770      	bx	lr

08004f1c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004f1c:	b480      	push	{r7}
 8004f1e:	b085      	sub	sp, #20
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	6078      	str	r0, [r7, #4]
 8004f24:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004f2a:	683b      	ldr	r3, [r7, #0]
 8004f2c:	781b      	ldrb	r3, [r3, #0]
 8004f2e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004f30:	683b      	ldr	r3, [r7, #0]
 8004f32:	785b      	ldrb	r3, [r3, #1]
 8004f34:	2b01      	cmp	r3, #1
 8004f36:	d12c      	bne.n	8004f92 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004f38:	68bb      	ldr	r3, [r7, #8]
 8004f3a:	015a      	lsls	r2, r3, #5
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	4413      	add	r3, r2
 8004f40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	db12      	blt.n	8004f70 <USB_EPSetStall+0x54>
 8004f4a:	68bb      	ldr	r3, [r7, #8]
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d00f      	beq.n	8004f70 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8004f50:	68bb      	ldr	r3, [r7, #8]
 8004f52:	015a      	lsls	r2, r3, #5
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	4413      	add	r3, r2
 8004f58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	68ba      	ldr	r2, [r7, #8]
 8004f60:	0151      	lsls	r1, r2, #5
 8004f62:	68fa      	ldr	r2, [r7, #12]
 8004f64:	440a      	add	r2, r1
 8004f66:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f6a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004f6e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8004f70:	68bb      	ldr	r3, [r7, #8]
 8004f72:	015a      	lsls	r2, r3, #5
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	4413      	add	r3, r2
 8004f78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	68ba      	ldr	r2, [r7, #8]
 8004f80:	0151      	lsls	r1, r2, #5
 8004f82:	68fa      	ldr	r2, [r7, #12]
 8004f84:	440a      	add	r2, r1
 8004f86:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f8a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004f8e:	6013      	str	r3, [r2, #0]
 8004f90:	e02b      	b.n	8004fea <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004f92:	68bb      	ldr	r3, [r7, #8]
 8004f94:	015a      	lsls	r2, r3, #5
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	4413      	add	r3, r2
 8004f9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	db12      	blt.n	8004fca <USB_EPSetStall+0xae>
 8004fa4:	68bb      	ldr	r3, [r7, #8]
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d00f      	beq.n	8004fca <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8004faa:	68bb      	ldr	r3, [r7, #8]
 8004fac:	015a      	lsls	r2, r3, #5
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	4413      	add	r3, r2
 8004fb2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	68ba      	ldr	r2, [r7, #8]
 8004fba:	0151      	lsls	r1, r2, #5
 8004fbc:	68fa      	ldr	r2, [r7, #12]
 8004fbe:	440a      	add	r2, r1
 8004fc0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004fc4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004fc8:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8004fca:	68bb      	ldr	r3, [r7, #8]
 8004fcc:	015a      	lsls	r2, r3, #5
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	4413      	add	r3, r2
 8004fd2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	68ba      	ldr	r2, [r7, #8]
 8004fda:	0151      	lsls	r1, r2, #5
 8004fdc:	68fa      	ldr	r2, [r7, #12]
 8004fde:	440a      	add	r2, r1
 8004fe0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004fe4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004fe8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004fea:	2300      	movs	r3, #0
}
 8004fec:	4618      	mov	r0, r3
 8004fee:	3714      	adds	r7, #20
 8004ff0:	46bd      	mov	sp, r7
 8004ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff6:	4770      	bx	lr

08004ff8 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004ff8:	b480      	push	{r7}
 8004ffa:	b085      	sub	sp, #20
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	6078      	str	r0, [r7, #4]
 8005000:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005006:	683b      	ldr	r3, [r7, #0]
 8005008:	781b      	ldrb	r3, [r3, #0]
 800500a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800500c:	683b      	ldr	r3, [r7, #0]
 800500e:	785b      	ldrb	r3, [r3, #1]
 8005010:	2b01      	cmp	r3, #1
 8005012:	d128      	bne.n	8005066 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005014:	68bb      	ldr	r3, [r7, #8]
 8005016:	015a      	lsls	r2, r3, #5
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	4413      	add	r3, r2
 800501c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	68ba      	ldr	r2, [r7, #8]
 8005024:	0151      	lsls	r1, r2, #5
 8005026:	68fa      	ldr	r2, [r7, #12]
 8005028:	440a      	add	r2, r1
 800502a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800502e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005032:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005034:	683b      	ldr	r3, [r7, #0]
 8005036:	791b      	ldrb	r3, [r3, #4]
 8005038:	2b03      	cmp	r3, #3
 800503a:	d003      	beq.n	8005044 <USB_EPClearStall+0x4c>
 800503c:	683b      	ldr	r3, [r7, #0]
 800503e:	791b      	ldrb	r3, [r3, #4]
 8005040:	2b02      	cmp	r3, #2
 8005042:	d138      	bne.n	80050b6 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005044:	68bb      	ldr	r3, [r7, #8]
 8005046:	015a      	lsls	r2, r3, #5
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	4413      	add	r3, r2
 800504c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	68ba      	ldr	r2, [r7, #8]
 8005054:	0151      	lsls	r1, r2, #5
 8005056:	68fa      	ldr	r2, [r7, #12]
 8005058:	440a      	add	r2, r1
 800505a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800505e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005062:	6013      	str	r3, [r2, #0]
 8005064:	e027      	b.n	80050b6 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005066:	68bb      	ldr	r3, [r7, #8]
 8005068:	015a      	lsls	r2, r3, #5
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	4413      	add	r3, r2
 800506e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	68ba      	ldr	r2, [r7, #8]
 8005076:	0151      	lsls	r1, r2, #5
 8005078:	68fa      	ldr	r2, [r7, #12]
 800507a:	440a      	add	r2, r1
 800507c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005080:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005084:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005086:	683b      	ldr	r3, [r7, #0]
 8005088:	791b      	ldrb	r3, [r3, #4]
 800508a:	2b03      	cmp	r3, #3
 800508c:	d003      	beq.n	8005096 <USB_EPClearStall+0x9e>
 800508e:	683b      	ldr	r3, [r7, #0]
 8005090:	791b      	ldrb	r3, [r3, #4]
 8005092:	2b02      	cmp	r3, #2
 8005094:	d10f      	bne.n	80050b6 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005096:	68bb      	ldr	r3, [r7, #8]
 8005098:	015a      	lsls	r2, r3, #5
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	4413      	add	r3, r2
 800509e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	68ba      	ldr	r2, [r7, #8]
 80050a6:	0151      	lsls	r1, r2, #5
 80050a8:	68fa      	ldr	r2, [r7, #12]
 80050aa:	440a      	add	r2, r1
 80050ac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80050b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80050b4:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80050b6:	2300      	movs	r3, #0
}
 80050b8:	4618      	mov	r0, r3
 80050ba:	3714      	adds	r7, #20
 80050bc:	46bd      	mov	sp, r7
 80050be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c2:	4770      	bx	lr

080050c4 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80050c4:	b480      	push	{r7}
 80050c6:	b085      	sub	sp, #20
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	6078      	str	r0, [r7, #4]
 80050cc:	460b      	mov	r3, r1
 80050ce:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	68fa      	ldr	r2, [r7, #12]
 80050de:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80050e2:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80050e6:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050ee:	681a      	ldr	r2, [r3, #0]
 80050f0:	78fb      	ldrb	r3, [r7, #3]
 80050f2:	011b      	lsls	r3, r3, #4
 80050f4:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80050f8:	68f9      	ldr	r1, [r7, #12]
 80050fa:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80050fe:	4313      	orrs	r3, r2
 8005100:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8005102:	2300      	movs	r3, #0
}
 8005104:	4618      	mov	r0, r3
 8005106:	3714      	adds	r7, #20
 8005108:	46bd      	mov	sp, r7
 800510a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800510e:	4770      	bx	lr

08005110 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005110:	b480      	push	{r7}
 8005112:	b085      	sub	sp, #20
 8005114:	af00      	add	r7, sp, #0
 8005116:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	68fa      	ldr	r2, [r7, #12]
 8005126:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800512a:	f023 0303 	bic.w	r3, r3, #3
 800512e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005136:	685b      	ldr	r3, [r3, #4]
 8005138:	68fa      	ldr	r2, [r7, #12]
 800513a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800513e:	f023 0302 	bic.w	r3, r3, #2
 8005142:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005144:	2300      	movs	r3, #0
}
 8005146:	4618      	mov	r0, r3
 8005148:	3714      	adds	r7, #20
 800514a:	46bd      	mov	sp, r7
 800514c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005150:	4770      	bx	lr

08005152 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005152:	b480      	push	{r7}
 8005154:	b085      	sub	sp, #20
 8005156:	af00      	add	r7, sp, #0
 8005158:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	68fa      	ldr	r2, [r7, #12]
 8005168:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800516c:	f023 0303 	bic.w	r3, r3, #3
 8005170:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005178:	685b      	ldr	r3, [r3, #4]
 800517a:	68fa      	ldr	r2, [r7, #12]
 800517c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005180:	f043 0302 	orr.w	r3, r3, #2
 8005184:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005186:	2300      	movs	r3, #0
}
 8005188:	4618      	mov	r0, r3
 800518a:	3714      	adds	r7, #20
 800518c:	46bd      	mov	sp, r7
 800518e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005192:	4770      	bx	lr

08005194 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005194:	b480      	push	{r7}
 8005196:	b085      	sub	sp, #20
 8005198:	af00      	add	r7, sp, #0
 800519a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	695b      	ldr	r3, [r3, #20]
 80051a0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	699b      	ldr	r3, [r3, #24]
 80051a6:	68fa      	ldr	r2, [r7, #12]
 80051a8:	4013      	ands	r3, r2
 80051aa:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80051ac:	68fb      	ldr	r3, [r7, #12]
}
 80051ae:	4618      	mov	r0, r3
 80051b0:	3714      	adds	r7, #20
 80051b2:	46bd      	mov	sp, r7
 80051b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b8:	4770      	bx	lr

080051ba <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80051ba:	b480      	push	{r7}
 80051bc:	b085      	sub	sp, #20
 80051be:	af00      	add	r7, sp, #0
 80051c0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051cc:	699b      	ldr	r3, [r3, #24]
 80051ce:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051d6:	69db      	ldr	r3, [r3, #28]
 80051d8:	68ba      	ldr	r2, [r7, #8]
 80051da:	4013      	ands	r3, r2
 80051dc:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80051de:	68bb      	ldr	r3, [r7, #8]
 80051e0:	0c1b      	lsrs	r3, r3, #16
}
 80051e2:	4618      	mov	r0, r3
 80051e4:	3714      	adds	r7, #20
 80051e6:	46bd      	mov	sp, r7
 80051e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ec:	4770      	bx	lr

080051ee <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80051ee:	b480      	push	{r7}
 80051f0:	b085      	sub	sp, #20
 80051f2:	af00      	add	r7, sp, #0
 80051f4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005200:	699b      	ldr	r3, [r3, #24]
 8005202:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800520a:	69db      	ldr	r3, [r3, #28]
 800520c:	68ba      	ldr	r2, [r7, #8]
 800520e:	4013      	ands	r3, r2
 8005210:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8005212:	68bb      	ldr	r3, [r7, #8]
 8005214:	b29b      	uxth	r3, r3
}
 8005216:	4618      	mov	r0, r3
 8005218:	3714      	adds	r7, #20
 800521a:	46bd      	mov	sp, r7
 800521c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005220:	4770      	bx	lr

08005222 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005222:	b480      	push	{r7}
 8005224:	b085      	sub	sp, #20
 8005226:	af00      	add	r7, sp, #0
 8005228:	6078      	str	r0, [r7, #4]
 800522a:	460b      	mov	r3, r1
 800522c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8005232:	78fb      	ldrb	r3, [r7, #3]
 8005234:	015a      	lsls	r2, r3, #5
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	4413      	add	r3, r2
 800523a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800523e:	689b      	ldr	r3, [r3, #8]
 8005240:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005248:	695b      	ldr	r3, [r3, #20]
 800524a:	68ba      	ldr	r2, [r7, #8]
 800524c:	4013      	ands	r3, r2
 800524e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005250:	68bb      	ldr	r3, [r7, #8]
}
 8005252:	4618      	mov	r0, r3
 8005254:	3714      	adds	r7, #20
 8005256:	46bd      	mov	sp, r7
 8005258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800525c:	4770      	bx	lr

0800525e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800525e:	b480      	push	{r7}
 8005260:	b087      	sub	sp, #28
 8005262:	af00      	add	r7, sp, #0
 8005264:	6078      	str	r0, [r7, #4]
 8005266:	460b      	mov	r3, r1
 8005268:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800526e:	697b      	ldr	r3, [r7, #20]
 8005270:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005274:	691b      	ldr	r3, [r3, #16]
 8005276:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8005278:	697b      	ldr	r3, [r7, #20]
 800527a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800527e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005280:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8005282:	78fb      	ldrb	r3, [r7, #3]
 8005284:	f003 030f 	and.w	r3, r3, #15
 8005288:	68fa      	ldr	r2, [r7, #12]
 800528a:	fa22 f303 	lsr.w	r3, r2, r3
 800528e:	01db      	lsls	r3, r3, #7
 8005290:	b2db      	uxtb	r3, r3
 8005292:	693a      	ldr	r2, [r7, #16]
 8005294:	4313      	orrs	r3, r2
 8005296:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8005298:	78fb      	ldrb	r3, [r7, #3]
 800529a:	015a      	lsls	r2, r3, #5
 800529c:	697b      	ldr	r3, [r7, #20]
 800529e:	4413      	add	r3, r2
 80052a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052a4:	689b      	ldr	r3, [r3, #8]
 80052a6:	693a      	ldr	r2, [r7, #16]
 80052a8:	4013      	ands	r3, r2
 80052aa:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80052ac:	68bb      	ldr	r3, [r7, #8]
}
 80052ae:	4618      	mov	r0, r3
 80052b0:	371c      	adds	r7, #28
 80052b2:	46bd      	mov	sp, r7
 80052b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b8:	4770      	bx	lr

080052ba <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80052ba:	b480      	push	{r7}
 80052bc:	b083      	sub	sp, #12
 80052be:	af00      	add	r7, sp, #0
 80052c0:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	695b      	ldr	r3, [r3, #20]
 80052c6:	f003 0301 	and.w	r3, r3, #1
}
 80052ca:	4618      	mov	r0, r3
 80052cc:	370c      	adds	r7, #12
 80052ce:	46bd      	mov	sp, r7
 80052d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d4:	4770      	bx	lr

080052d6 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80052d6:	b480      	push	{r7}
 80052d8:	b085      	sub	sp, #20
 80052da:	af00      	add	r7, sp, #0
 80052dc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	68fa      	ldr	r2, [r7, #12]
 80052ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80052f0:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80052f4:	f023 0307 	bic.w	r3, r3, #7
 80052f8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005300:	685b      	ldr	r3, [r3, #4]
 8005302:	68fa      	ldr	r2, [r7, #12]
 8005304:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005308:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800530c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800530e:	2300      	movs	r3, #0
}
 8005310:	4618      	mov	r0, r3
 8005312:	3714      	adds	r7, #20
 8005314:	46bd      	mov	sp, r7
 8005316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800531a:	4770      	bx	lr

0800531c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800531c:	b480      	push	{r7}
 800531e:	b087      	sub	sp, #28
 8005320:	af00      	add	r7, sp, #0
 8005322:	60f8      	str	r0, [r7, #12]
 8005324:	460b      	mov	r3, r1
 8005326:	607a      	str	r2, [r7, #4]
 8005328:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	333c      	adds	r3, #60	; 0x3c
 8005332:	3304      	adds	r3, #4
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8005338:	693b      	ldr	r3, [r7, #16]
 800533a:	4a26      	ldr	r2, [pc, #152]	; (80053d4 <USB_EP0_OutStart+0xb8>)
 800533c:	4293      	cmp	r3, r2
 800533e:	d90a      	bls.n	8005356 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005340:	697b      	ldr	r3, [r7, #20]
 8005342:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800534c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005350:	d101      	bne.n	8005356 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8005352:	2300      	movs	r3, #0
 8005354:	e037      	b.n	80053c6 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8005356:	697b      	ldr	r3, [r7, #20]
 8005358:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800535c:	461a      	mov	r2, r3
 800535e:	2300      	movs	r3, #0
 8005360:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005362:	697b      	ldr	r3, [r7, #20]
 8005364:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005368:	691b      	ldr	r3, [r3, #16]
 800536a:	697a      	ldr	r2, [r7, #20]
 800536c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005370:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005374:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8005376:	697b      	ldr	r3, [r7, #20]
 8005378:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800537c:	691b      	ldr	r3, [r3, #16]
 800537e:	697a      	ldr	r2, [r7, #20]
 8005380:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005384:	f043 0318 	orr.w	r3, r3, #24
 8005388:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800538a:	697b      	ldr	r3, [r7, #20]
 800538c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005390:	691b      	ldr	r3, [r3, #16]
 8005392:	697a      	ldr	r2, [r7, #20]
 8005394:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005398:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800539c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800539e:	7afb      	ldrb	r3, [r7, #11]
 80053a0:	2b01      	cmp	r3, #1
 80053a2:	d10f      	bne.n	80053c4 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80053a4:	697b      	ldr	r3, [r7, #20]
 80053a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053aa:	461a      	mov	r2, r3
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80053b0:	697b      	ldr	r3, [r7, #20]
 80053b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	697a      	ldr	r2, [r7, #20]
 80053ba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80053be:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80053c2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80053c4:	2300      	movs	r3, #0
}
 80053c6:	4618      	mov	r0, r3
 80053c8:	371c      	adds	r7, #28
 80053ca:	46bd      	mov	sp, r7
 80053cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d0:	4770      	bx	lr
 80053d2:	bf00      	nop
 80053d4:	4f54300a 	.word	0x4f54300a

080053d8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80053d8:	b480      	push	{r7}
 80053da:	b085      	sub	sp, #20
 80053dc:	af00      	add	r7, sp, #0
 80053de:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80053e0:	2300      	movs	r3, #0
 80053e2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	3301      	adds	r3, #1
 80053e8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	4a13      	ldr	r2, [pc, #76]	; (800543c <USB_CoreReset+0x64>)
 80053ee:	4293      	cmp	r3, r2
 80053f0:	d901      	bls.n	80053f6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80053f2:	2303      	movs	r3, #3
 80053f4:	e01b      	b.n	800542e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	691b      	ldr	r3, [r3, #16]
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	daf2      	bge.n	80053e4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80053fe:	2300      	movs	r3, #0
 8005400:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	691b      	ldr	r3, [r3, #16]
 8005406:	f043 0201 	orr.w	r2, r3, #1
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	3301      	adds	r3, #1
 8005412:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	4a09      	ldr	r2, [pc, #36]	; (800543c <USB_CoreReset+0x64>)
 8005418:	4293      	cmp	r3, r2
 800541a:	d901      	bls.n	8005420 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800541c:	2303      	movs	r3, #3
 800541e:	e006      	b.n	800542e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	691b      	ldr	r3, [r3, #16]
 8005424:	f003 0301 	and.w	r3, r3, #1
 8005428:	2b01      	cmp	r3, #1
 800542a:	d0f0      	beq.n	800540e <USB_CoreReset+0x36>

  return HAL_OK;
 800542c:	2300      	movs	r3, #0
}
 800542e:	4618      	mov	r0, r3
 8005430:	3714      	adds	r7, #20
 8005432:	46bd      	mov	sp, r7
 8005434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005438:	4770      	bx	lr
 800543a:	bf00      	nop
 800543c:	00030d40 	.word	0x00030d40

08005440 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005440:	b580      	push	{r7, lr}
 8005442:	b084      	sub	sp, #16
 8005444:	af00      	add	r7, sp, #0
 8005446:	6078      	str	r0, [r7, #4]
 8005448:	460b      	mov	r3, r1
 800544a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800544c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8005450:	f003 fbb4 	bl	8008bbc <USBD_static_malloc>
 8005454:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	2b00      	cmp	r3, #0
 800545a:	d109      	bne.n	8005470 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	32b0      	adds	r2, #176	; 0xb0
 8005466:	2100      	movs	r1, #0
 8005468:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800546c:	2302      	movs	r3, #2
 800546e:	e0d4      	b.n	800561a <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8005470:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8005474:	2100      	movs	r1, #0
 8005476:	68f8      	ldr	r0, [r7, #12]
 8005478:	f003 fd56 	bl	8008f28 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	32b0      	adds	r2, #176	; 0xb0
 8005486:	68f9      	ldr	r1, [r7, #12]
 8005488:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	32b0      	adds	r2, #176	; 0xb0
 8005496:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	7c1b      	ldrb	r3, [r3, #16]
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d138      	bne.n	800551a <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80054a8:	4b5e      	ldr	r3, [pc, #376]	; (8005624 <USBD_CDC_Init+0x1e4>)
 80054aa:	7819      	ldrb	r1, [r3, #0]
 80054ac:	f44f 7300 	mov.w	r3, #512	; 0x200
 80054b0:	2202      	movs	r2, #2
 80054b2:	6878      	ldr	r0, [r7, #4]
 80054b4:	f003 fa5f 	bl	8008976 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80054b8:	4b5a      	ldr	r3, [pc, #360]	; (8005624 <USBD_CDC_Init+0x1e4>)
 80054ba:	781b      	ldrb	r3, [r3, #0]
 80054bc:	f003 020f 	and.w	r2, r3, #15
 80054c0:	6879      	ldr	r1, [r7, #4]
 80054c2:	4613      	mov	r3, r2
 80054c4:	009b      	lsls	r3, r3, #2
 80054c6:	4413      	add	r3, r2
 80054c8:	009b      	lsls	r3, r3, #2
 80054ca:	440b      	add	r3, r1
 80054cc:	3324      	adds	r3, #36	; 0x24
 80054ce:	2201      	movs	r2, #1
 80054d0:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80054d2:	4b55      	ldr	r3, [pc, #340]	; (8005628 <USBD_CDC_Init+0x1e8>)
 80054d4:	7819      	ldrb	r1, [r3, #0]
 80054d6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80054da:	2202      	movs	r2, #2
 80054dc:	6878      	ldr	r0, [r7, #4]
 80054de:	f003 fa4a 	bl	8008976 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80054e2:	4b51      	ldr	r3, [pc, #324]	; (8005628 <USBD_CDC_Init+0x1e8>)
 80054e4:	781b      	ldrb	r3, [r3, #0]
 80054e6:	f003 020f 	and.w	r2, r3, #15
 80054ea:	6879      	ldr	r1, [r7, #4]
 80054ec:	4613      	mov	r3, r2
 80054ee:	009b      	lsls	r3, r3, #2
 80054f0:	4413      	add	r3, r2
 80054f2:	009b      	lsls	r3, r3, #2
 80054f4:	440b      	add	r3, r1
 80054f6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80054fa:	2201      	movs	r2, #1
 80054fc:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80054fe:	4b4b      	ldr	r3, [pc, #300]	; (800562c <USBD_CDC_Init+0x1ec>)
 8005500:	781b      	ldrb	r3, [r3, #0]
 8005502:	f003 020f 	and.w	r2, r3, #15
 8005506:	6879      	ldr	r1, [r7, #4]
 8005508:	4613      	mov	r3, r2
 800550a:	009b      	lsls	r3, r3, #2
 800550c:	4413      	add	r3, r2
 800550e:	009b      	lsls	r3, r3, #2
 8005510:	440b      	add	r3, r1
 8005512:	3326      	adds	r3, #38	; 0x26
 8005514:	2210      	movs	r2, #16
 8005516:	801a      	strh	r2, [r3, #0]
 8005518:	e035      	b.n	8005586 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800551a:	4b42      	ldr	r3, [pc, #264]	; (8005624 <USBD_CDC_Init+0x1e4>)
 800551c:	7819      	ldrb	r1, [r3, #0]
 800551e:	2340      	movs	r3, #64	; 0x40
 8005520:	2202      	movs	r2, #2
 8005522:	6878      	ldr	r0, [r7, #4]
 8005524:	f003 fa27 	bl	8008976 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8005528:	4b3e      	ldr	r3, [pc, #248]	; (8005624 <USBD_CDC_Init+0x1e4>)
 800552a:	781b      	ldrb	r3, [r3, #0]
 800552c:	f003 020f 	and.w	r2, r3, #15
 8005530:	6879      	ldr	r1, [r7, #4]
 8005532:	4613      	mov	r3, r2
 8005534:	009b      	lsls	r3, r3, #2
 8005536:	4413      	add	r3, r2
 8005538:	009b      	lsls	r3, r3, #2
 800553a:	440b      	add	r3, r1
 800553c:	3324      	adds	r3, #36	; 0x24
 800553e:	2201      	movs	r2, #1
 8005540:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8005542:	4b39      	ldr	r3, [pc, #228]	; (8005628 <USBD_CDC_Init+0x1e8>)
 8005544:	7819      	ldrb	r1, [r3, #0]
 8005546:	2340      	movs	r3, #64	; 0x40
 8005548:	2202      	movs	r2, #2
 800554a:	6878      	ldr	r0, [r7, #4]
 800554c:	f003 fa13 	bl	8008976 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8005550:	4b35      	ldr	r3, [pc, #212]	; (8005628 <USBD_CDC_Init+0x1e8>)
 8005552:	781b      	ldrb	r3, [r3, #0]
 8005554:	f003 020f 	and.w	r2, r3, #15
 8005558:	6879      	ldr	r1, [r7, #4]
 800555a:	4613      	mov	r3, r2
 800555c:	009b      	lsls	r3, r3, #2
 800555e:	4413      	add	r3, r2
 8005560:	009b      	lsls	r3, r3, #2
 8005562:	440b      	add	r3, r1
 8005564:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005568:	2201      	movs	r2, #1
 800556a:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800556c:	4b2f      	ldr	r3, [pc, #188]	; (800562c <USBD_CDC_Init+0x1ec>)
 800556e:	781b      	ldrb	r3, [r3, #0]
 8005570:	f003 020f 	and.w	r2, r3, #15
 8005574:	6879      	ldr	r1, [r7, #4]
 8005576:	4613      	mov	r3, r2
 8005578:	009b      	lsls	r3, r3, #2
 800557a:	4413      	add	r3, r2
 800557c:	009b      	lsls	r3, r3, #2
 800557e:	440b      	add	r3, r1
 8005580:	3326      	adds	r3, #38	; 0x26
 8005582:	2210      	movs	r2, #16
 8005584:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8005586:	4b29      	ldr	r3, [pc, #164]	; (800562c <USBD_CDC_Init+0x1ec>)
 8005588:	7819      	ldrb	r1, [r3, #0]
 800558a:	2308      	movs	r3, #8
 800558c:	2203      	movs	r2, #3
 800558e:	6878      	ldr	r0, [r7, #4]
 8005590:	f003 f9f1 	bl	8008976 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8005594:	4b25      	ldr	r3, [pc, #148]	; (800562c <USBD_CDC_Init+0x1ec>)
 8005596:	781b      	ldrb	r3, [r3, #0]
 8005598:	f003 020f 	and.w	r2, r3, #15
 800559c:	6879      	ldr	r1, [r7, #4]
 800559e:	4613      	mov	r3, r2
 80055a0:	009b      	lsls	r3, r3, #2
 80055a2:	4413      	add	r3, r2
 80055a4:	009b      	lsls	r3, r3, #2
 80055a6:	440b      	add	r3, r1
 80055a8:	3324      	adds	r3, #36	; 0x24
 80055aa:	2201      	movs	r2, #1
 80055ac:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	2200      	movs	r2, #0
 80055b2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80055bc:	687a      	ldr	r2, [r7, #4]
 80055be:	33b0      	adds	r3, #176	; 0xb0
 80055c0:	009b      	lsls	r3, r3, #2
 80055c2:	4413      	add	r3, r2
 80055c4:	685b      	ldr	r3, [r3, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	2200      	movs	r2, #0
 80055ce:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	2200      	movs	r2, #0
 80055d6:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d101      	bne.n	80055e8 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 80055e4:	2302      	movs	r3, #2
 80055e6:	e018      	b.n	800561a <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	7c1b      	ldrb	r3, [r3, #16]
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d10a      	bne.n	8005606 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80055f0:	4b0d      	ldr	r3, [pc, #52]	; (8005628 <USBD_CDC_Init+0x1e8>)
 80055f2:	7819      	ldrb	r1, [r3, #0]
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80055fa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80055fe:	6878      	ldr	r0, [r7, #4]
 8005600:	f003 faa8 	bl	8008b54 <USBD_LL_PrepareReceive>
 8005604:	e008      	b.n	8005618 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005606:	4b08      	ldr	r3, [pc, #32]	; (8005628 <USBD_CDC_Init+0x1e8>)
 8005608:	7819      	ldrb	r1, [r3, #0]
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005610:	2340      	movs	r3, #64	; 0x40
 8005612:	6878      	ldr	r0, [r7, #4]
 8005614:	f003 fa9e 	bl	8008b54 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005618:	2300      	movs	r3, #0
}
 800561a:	4618      	mov	r0, r3
 800561c:	3710      	adds	r7, #16
 800561e:	46bd      	mov	sp, r7
 8005620:	bd80      	pop	{r7, pc}
 8005622:	bf00      	nop
 8005624:	2000008f 	.word	0x2000008f
 8005628:	20000090 	.word	0x20000090
 800562c:	20000091 	.word	0x20000091

08005630 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005630:	b580      	push	{r7, lr}
 8005632:	b082      	sub	sp, #8
 8005634:	af00      	add	r7, sp, #0
 8005636:	6078      	str	r0, [r7, #4]
 8005638:	460b      	mov	r3, r1
 800563a:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800563c:	4b3a      	ldr	r3, [pc, #232]	; (8005728 <USBD_CDC_DeInit+0xf8>)
 800563e:	781b      	ldrb	r3, [r3, #0]
 8005640:	4619      	mov	r1, r3
 8005642:	6878      	ldr	r0, [r7, #4]
 8005644:	f003 f9bd 	bl	80089c2 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8005648:	4b37      	ldr	r3, [pc, #220]	; (8005728 <USBD_CDC_DeInit+0xf8>)
 800564a:	781b      	ldrb	r3, [r3, #0]
 800564c:	f003 020f 	and.w	r2, r3, #15
 8005650:	6879      	ldr	r1, [r7, #4]
 8005652:	4613      	mov	r3, r2
 8005654:	009b      	lsls	r3, r3, #2
 8005656:	4413      	add	r3, r2
 8005658:	009b      	lsls	r3, r3, #2
 800565a:	440b      	add	r3, r1
 800565c:	3324      	adds	r3, #36	; 0x24
 800565e:	2200      	movs	r2, #0
 8005660:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8005662:	4b32      	ldr	r3, [pc, #200]	; (800572c <USBD_CDC_DeInit+0xfc>)
 8005664:	781b      	ldrb	r3, [r3, #0]
 8005666:	4619      	mov	r1, r3
 8005668:	6878      	ldr	r0, [r7, #4]
 800566a:	f003 f9aa 	bl	80089c2 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800566e:	4b2f      	ldr	r3, [pc, #188]	; (800572c <USBD_CDC_DeInit+0xfc>)
 8005670:	781b      	ldrb	r3, [r3, #0]
 8005672:	f003 020f 	and.w	r2, r3, #15
 8005676:	6879      	ldr	r1, [r7, #4]
 8005678:	4613      	mov	r3, r2
 800567a:	009b      	lsls	r3, r3, #2
 800567c:	4413      	add	r3, r2
 800567e:	009b      	lsls	r3, r3, #2
 8005680:	440b      	add	r3, r1
 8005682:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005686:	2200      	movs	r2, #0
 8005688:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800568a:	4b29      	ldr	r3, [pc, #164]	; (8005730 <USBD_CDC_DeInit+0x100>)
 800568c:	781b      	ldrb	r3, [r3, #0]
 800568e:	4619      	mov	r1, r3
 8005690:	6878      	ldr	r0, [r7, #4]
 8005692:	f003 f996 	bl	80089c2 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8005696:	4b26      	ldr	r3, [pc, #152]	; (8005730 <USBD_CDC_DeInit+0x100>)
 8005698:	781b      	ldrb	r3, [r3, #0]
 800569a:	f003 020f 	and.w	r2, r3, #15
 800569e:	6879      	ldr	r1, [r7, #4]
 80056a0:	4613      	mov	r3, r2
 80056a2:	009b      	lsls	r3, r3, #2
 80056a4:	4413      	add	r3, r2
 80056a6:	009b      	lsls	r3, r3, #2
 80056a8:	440b      	add	r3, r1
 80056aa:	3324      	adds	r3, #36	; 0x24
 80056ac:	2200      	movs	r2, #0
 80056ae:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 80056b0:	4b1f      	ldr	r3, [pc, #124]	; (8005730 <USBD_CDC_DeInit+0x100>)
 80056b2:	781b      	ldrb	r3, [r3, #0]
 80056b4:	f003 020f 	and.w	r2, r3, #15
 80056b8:	6879      	ldr	r1, [r7, #4]
 80056ba:	4613      	mov	r3, r2
 80056bc:	009b      	lsls	r3, r3, #2
 80056be:	4413      	add	r3, r2
 80056c0:	009b      	lsls	r3, r3, #2
 80056c2:	440b      	add	r3, r1
 80056c4:	3326      	adds	r3, #38	; 0x26
 80056c6:	2200      	movs	r2, #0
 80056c8:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	32b0      	adds	r2, #176	; 0xb0
 80056d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d01f      	beq.n	800571c <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80056e2:	687a      	ldr	r2, [r7, #4]
 80056e4:	33b0      	adds	r3, #176	; 0xb0
 80056e6:	009b      	lsls	r3, r3, #2
 80056e8:	4413      	add	r3, r2
 80056ea:	685b      	ldr	r3, [r3, #4]
 80056ec:	685b      	ldr	r3, [r3, #4]
 80056ee:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	32b0      	adds	r2, #176	; 0xb0
 80056fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80056fe:	4618      	mov	r0, r3
 8005700:	f003 fa6a 	bl	8008bd8 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	32b0      	adds	r2, #176	; 0xb0
 800570e:	2100      	movs	r1, #0
 8005710:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	2200      	movs	r2, #0
 8005718:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800571c:	2300      	movs	r3, #0
}
 800571e:	4618      	mov	r0, r3
 8005720:	3708      	adds	r7, #8
 8005722:	46bd      	mov	sp, r7
 8005724:	bd80      	pop	{r7, pc}
 8005726:	bf00      	nop
 8005728:	2000008f 	.word	0x2000008f
 800572c:	20000090 	.word	0x20000090
 8005730:	20000091 	.word	0x20000091

08005734 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8005734:	b580      	push	{r7, lr}
 8005736:	b086      	sub	sp, #24
 8005738:	af00      	add	r7, sp, #0
 800573a:	6078      	str	r0, [r7, #4]
 800573c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	32b0      	adds	r2, #176	; 0xb0
 8005748:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800574c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800574e:	2300      	movs	r3, #0
 8005750:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8005752:	2300      	movs	r3, #0
 8005754:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8005756:	2300      	movs	r3, #0
 8005758:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800575a:	693b      	ldr	r3, [r7, #16]
 800575c:	2b00      	cmp	r3, #0
 800575e:	d101      	bne.n	8005764 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8005760:	2303      	movs	r3, #3
 8005762:	e0bf      	b.n	80058e4 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005764:	683b      	ldr	r3, [r7, #0]
 8005766:	781b      	ldrb	r3, [r3, #0]
 8005768:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800576c:	2b00      	cmp	r3, #0
 800576e:	d050      	beq.n	8005812 <USBD_CDC_Setup+0xde>
 8005770:	2b20      	cmp	r3, #32
 8005772:	f040 80af 	bne.w	80058d4 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8005776:	683b      	ldr	r3, [r7, #0]
 8005778:	88db      	ldrh	r3, [r3, #6]
 800577a:	2b00      	cmp	r3, #0
 800577c:	d03a      	beq.n	80057f4 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800577e:	683b      	ldr	r3, [r7, #0]
 8005780:	781b      	ldrb	r3, [r3, #0]
 8005782:	b25b      	sxtb	r3, r3
 8005784:	2b00      	cmp	r3, #0
 8005786:	da1b      	bge.n	80057c0 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800578e:	687a      	ldr	r2, [r7, #4]
 8005790:	33b0      	adds	r3, #176	; 0xb0
 8005792:	009b      	lsls	r3, r3, #2
 8005794:	4413      	add	r3, r2
 8005796:	685b      	ldr	r3, [r3, #4]
 8005798:	689b      	ldr	r3, [r3, #8]
 800579a:	683a      	ldr	r2, [r7, #0]
 800579c:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800579e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80057a0:	683a      	ldr	r2, [r7, #0]
 80057a2:	88d2      	ldrh	r2, [r2, #6]
 80057a4:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80057a6:	683b      	ldr	r3, [r7, #0]
 80057a8:	88db      	ldrh	r3, [r3, #6]
 80057aa:	2b07      	cmp	r3, #7
 80057ac:	bf28      	it	cs
 80057ae:	2307      	movcs	r3, #7
 80057b0:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80057b2:	693b      	ldr	r3, [r7, #16]
 80057b4:	89fa      	ldrh	r2, [r7, #14]
 80057b6:	4619      	mov	r1, r3
 80057b8:	6878      	ldr	r0, [r7, #4]
 80057ba:	f001 fda5 	bl	8007308 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 80057be:	e090      	b.n	80058e2 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 80057c0:	683b      	ldr	r3, [r7, #0]
 80057c2:	785a      	ldrb	r2, [r3, #1]
 80057c4:	693b      	ldr	r3, [r7, #16]
 80057c6:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 80057ca:	683b      	ldr	r3, [r7, #0]
 80057cc:	88db      	ldrh	r3, [r3, #6]
 80057ce:	2b3f      	cmp	r3, #63	; 0x3f
 80057d0:	d803      	bhi.n	80057da <USBD_CDC_Setup+0xa6>
 80057d2:	683b      	ldr	r3, [r7, #0]
 80057d4:	88db      	ldrh	r3, [r3, #6]
 80057d6:	b2da      	uxtb	r2, r3
 80057d8:	e000      	b.n	80057dc <USBD_CDC_Setup+0xa8>
 80057da:	2240      	movs	r2, #64	; 0x40
 80057dc:	693b      	ldr	r3, [r7, #16]
 80057de:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 80057e2:	6939      	ldr	r1, [r7, #16]
 80057e4:	693b      	ldr	r3, [r7, #16]
 80057e6:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 80057ea:	461a      	mov	r2, r3
 80057ec:	6878      	ldr	r0, [r7, #4]
 80057ee:	f001 fdb7 	bl	8007360 <USBD_CtlPrepareRx>
      break;
 80057f2:	e076      	b.n	80058e2 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80057fa:	687a      	ldr	r2, [r7, #4]
 80057fc:	33b0      	adds	r3, #176	; 0xb0
 80057fe:	009b      	lsls	r3, r3, #2
 8005800:	4413      	add	r3, r2
 8005802:	685b      	ldr	r3, [r3, #4]
 8005804:	689b      	ldr	r3, [r3, #8]
 8005806:	683a      	ldr	r2, [r7, #0]
 8005808:	7850      	ldrb	r0, [r2, #1]
 800580a:	2200      	movs	r2, #0
 800580c:	6839      	ldr	r1, [r7, #0]
 800580e:	4798      	blx	r3
      break;
 8005810:	e067      	b.n	80058e2 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005812:	683b      	ldr	r3, [r7, #0]
 8005814:	785b      	ldrb	r3, [r3, #1]
 8005816:	2b0b      	cmp	r3, #11
 8005818:	d851      	bhi.n	80058be <USBD_CDC_Setup+0x18a>
 800581a:	a201      	add	r2, pc, #4	; (adr r2, 8005820 <USBD_CDC_Setup+0xec>)
 800581c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005820:	08005851 	.word	0x08005851
 8005824:	080058cd 	.word	0x080058cd
 8005828:	080058bf 	.word	0x080058bf
 800582c:	080058bf 	.word	0x080058bf
 8005830:	080058bf 	.word	0x080058bf
 8005834:	080058bf 	.word	0x080058bf
 8005838:	080058bf 	.word	0x080058bf
 800583c:	080058bf 	.word	0x080058bf
 8005840:	080058bf 	.word	0x080058bf
 8005844:	080058bf 	.word	0x080058bf
 8005848:	0800587b 	.word	0x0800587b
 800584c:	080058a5 	.word	0x080058a5
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005856:	b2db      	uxtb	r3, r3
 8005858:	2b03      	cmp	r3, #3
 800585a:	d107      	bne.n	800586c <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800585c:	f107 030a 	add.w	r3, r7, #10
 8005860:	2202      	movs	r2, #2
 8005862:	4619      	mov	r1, r3
 8005864:	6878      	ldr	r0, [r7, #4]
 8005866:	f001 fd4f 	bl	8007308 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800586a:	e032      	b.n	80058d2 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800586c:	6839      	ldr	r1, [r7, #0]
 800586e:	6878      	ldr	r0, [r7, #4]
 8005870:	f001 fcd9 	bl	8007226 <USBD_CtlError>
            ret = USBD_FAIL;
 8005874:	2303      	movs	r3, #3
 8005876:	75fb      	strb	r3, [r7, #23]
          break;
 8005878:	e02b      	b.n	80058d2 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005880:	b2db      	uxtb	r3, r3
 8005882:	2b03      	cmp	r3, #3
 8005884:	d107      	bne.n	8005896 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8005886:	f107 030d 	add.w	r3, r7, #13
 800588a:	2201      	movs	r2, #1
 800588c:	4619      	mov	r1, r3
 800588e:	6878      	ldr	r0, [r7, #4]
 8005890:	f001 fd3a 	bl	8007308 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005894:	e01d      	b.n	80058d2 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8005896:	6839      	ldr	r1, [r7, #0]
 8005898:	6878      	ldr	r0, [r7, #4]
 800589a:	f001 fcc4 	bl	8007226 <USBD_CtlError>
            ret = USBD_FAIL;
 800589e:	2303      	movs	r3, #3
 80058a0:	75fb      	strb	r3, [r7, #23]
          break;
 80058a2:	e016      	b.n	80058d2 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80058aa:	b2db      	uxtb	r3, r3
 80058ac:	2b03      	cmp	r3, #3
 80058ae:	d00f      	beq.n	80058d0 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 80058b0:	6839      	ldr	r1, [r7, #0]
 80058b2:	6878      	ldr	r0, [r7, #4]
 80058b4:	f001 fcb7 	bl	8007226 <USBD_CtlError>
            ret = USBD_FAIL;
 80058b8:	2303      	movs	r3, #3
 80058ba:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80058bc:	e008      	b.n	80058d0 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80058be:	6839      	ldr	r1, [r7, #0]
 80058c0:	6878      	ldr	r0, [r7, #4]
 80058c2:	f001 fcb0 	bl	8007226 <USBD_CtlError>
          ret = USBD_FAIL;
 80058c6:	2303      	movs	r3, #3
 80058c8:	75fb      	strb	r3, [r7, #23]
          break;
 80058ca:	e002      	b.n	80058d2 <USBD_CDC_Setup+0x19e>
          break;
 80058cc:	bf00      	nop
 80058ce:	e008      	b.n	80058e2 <USBD_CDC_Setup+0x1ae>
          break;
 80058d0:	bf00      	nop
      }
      break;
 80058d2:	e006      	b.n	80058e2 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 80058d4:	6839      	ldr	r1, [r7, #0]
 80058d6:	6878      	ldr	r0, [r7, #4]
 80058d8:	f001 fca5 	bl	8007226 <USBD_CtlError>
      ret = USBD_FAIL;
 80058dc:	2303      	movs	r3, #3
 80058de:	75fb      	strb	r3, [r7, #23]
      break;
 80058e0:	bf00      	nop
  }

  return (uint8_t)ret;
 80058e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80058e4:	4618      	mov	r0, r3
 80058e6:	3718      	adds	r7, #24
 80058e8:	46bd      	mov	sp, r7
 80058ea:	bd80      	pop	{r7, pc}

080058ec <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80058ec:	b580      	push	{r7, lr}
 80058ee:	b084      	sub	sp, #16
 80058f0:	af00      	add	r7, sp, #0
 80058f2:	6078      	str	r0, [r7, #4]
 80058f4:	460b      	mov	r3, r1
 80058f6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80058fe:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	32b0      	adds	r2, #176	; 0xb0
 800590a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800590e:	2b00      	cmp	r3, #0
 8005910:	d101      	bne.n	8005916 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8005912:	2303      	movs	r3, #3
 8005914:	e065      	b.n	80059e2 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	32b0      	adds	r2, #176	; 0xb0
 8005920:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005924:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8005926:	78fb      	ldrb	r3, [r7, #3]
 8005928:	f003 020f 	and.w	r2, r3, #15
 800592c:	6879      	ldr	r1, [r7, #4]
 800592e:	4613      	mov	r3, r2
 8005930:	009b      	lsls	r3, r3, #2
 8005932:	4413      	add	r3, r2
 8005934:	009b      	lsls	r3, r3, #2
 8005936:	440b      	add	r3, r1
 8005938:	3318      	adds	r3, #24
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	2b00      	cmp	r3, #0
 800593e:	d02f      	beq.n	80059a0 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8005940:	78fb      	ldrb	r3, [r7, #3]
 8005942:	f003 020f 	and.w	r2, r3, #15
 8005946:	6879      	ldr	r1, [r7, #4]
 8005948:	4613      	mov	r3, r2
 800594a:	009b      	lsls	r3, r3, #2
 800594c:	4413      	add	r3, r2
 800594e:	009b      	lsls	r3, r3, #2
 8005950:	440b      	add	r3, r1
 8005952:	3318      	adds	r3, #24
 8005954:	681a      	ldr	r2, [r3, #0]
 8005956:	78fb      	ldrb	r3, [r7, #3]
 8005958:	f003 010f 	and.w	r1, r3, #15
 800595c:	68f8      	ldr	r0, [r7, #12]
 800595e:	460b      	mov	r3, r1
 8005960:	00db      	lsls	r3, r3, #3
 8005962:	440b      	add	r3, r1
 8005964:	009b      	lsls	r3, r3, #2
 8005966:	4403      	add	r3, r0
 8005968:	3348      	adds	r3, #72	; 0x48
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	fbb2 f1f3 	udiv	r1, r2, r3
 8005970:	fb01 f303 	mul.w	r3, r1, r3
 8005974:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8005976:	2b00      	cmp	r3, #0
 8005978:	d112      	bne.n	80059a0 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800597a:	78fb      	ldrb	r3, [r7, #3]
 800597c:	f003 020f 	and.w	r2, r3, #15
 8005980:	6879      	ldr	r1, [r7, #4]
 8005982:	4613      	mov	r3, r2
 8005984:	009b      	lsls	r3, r3, #2
 8005986:	4413      	add	r3, r2
 8005988:	009b      	lsls	r3, r3, #2
 800598a:	440b      	add	r3, r1
 800598c:	3318      	adds	r3, #24
 800598e:	2200      	movs	r2, #0
 8005990:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8005992:	78f9      	ldrb	r1, [r7, #3]
 8005994:	2300      	movs	r3, #0
 8005996:	2200      	movs	r2, #0
 8005998:	6878      	ldr	r0, [r7, #4]
 800599a:	f003 f8ba 	bl	8008b12 <USBD_LL_Transmit>
 800599e:	e01f      	b.n	80059e0 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 80059a0:	68bb      	ldr	r3, [r7, #8]
 80059a2:	2200      	movs	r2, #0
 80059a4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80059ae:	687a      	ldr	r2, [r7, #4]
 80059b0:	33b0      	adds	r3, #176	; 0xb0
 80059b2:	009b      	lsls	r3, r3, #2
 80059b4:	4413      	add	r3, r2
 80059b6:	685b      	ldr	r3, [r3, #4]
 80059b8:	691b      	ldr	r3, [r3, #16]
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d010      	beq.n	80059e0 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80059c4:	687a      	ldr	r2, [r7, #4]
 80059c6:	33b0      	adds	r3, #176	; 0xb0
 80059c8:	009b      	lsls	r3, r3, #2
 80059ca:	4413      	add	r3, r2
 80059cc:	685b      	ldr	r3, [r3, #4]
 80059ce:	691b      	ldr	r3, [r3, #16]
 80059d0:	68ba      	ldr	r2, [r7, #8]
 80059d2:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 80059d6:	68ba      	ldr	r2, [r7, #8]
 80059d8:	f502 7104 	add.w	r1, r2, #528	; 0x210
 80059dc:	78fa      	ldrb	r2, [r7, #3]
 80059de:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80059e0:	2300      	movs	r3, #0
}
 80059e2:	4618      	mov	r0, r3
 80059e4:	3710      	adds	r7, #16
 80059e6:	46bd      	mov	sp, r7
 80059e8:	bd80      	pop	{r7, pc}

080059ea <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80059ea:	b580      	push	{r7, lr}
 80059ec:	b084      	sub	sp, #16
 80059ee:	af00      	add	r7, sp, #0
 80059f0:	6078      	str	r0, [r7, #4]
 80059f2:	460b      	mov	r3, r1
 80059f4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	32b0      	adds	r2, #176	; 0xb0
 8005a00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a04:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	32b0      	adds	r2, #176	; 0xb0
 8005a10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d101      	bne.n	8005a1c <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8005a18:	2303      	movs	r3, #3
 8005a1a:	e01a      	b.n	8005a52 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8005a1c:	78fb      	ldrb	r3, [r7, #3]
 8005a1e:	4619      	mov	r1, r3
 8005a20:	6878      	ldr	r0, [r7, #4]
 8005a22:	f003 f8b8 	bl	8008b96 <USBD_LL_GetRxDataSize>
 8005a26:	4602      	mov	r2, r0
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005a34:	687a      	ldr	r2, [r7, #4]
 8005a36:	33b0      	adds	r3, #176	; 0xb0
 8005a38:	009b      	lsls	r3, r3, #2
 8005a3a:	4413      	add	r3, r2
 8005a3c:	685b      	ldr	r3, [r3, #4]
 8005a3e:	68db      	ldr	r3, [r3, #12]
 8005a40:	68fa      	ldr	r2, [r7, #12]
 8005a42:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8005a46:	68fa      	ldr	r2, [r7, #12]
 8005a48:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8005a4c:	4611      	mov	r1, r2
 8005a4e:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8005a50:	2300      	movs	r3, #0
}
 8005a52:	4618      	mov	r0, r3
 8005a54:	3710      	adds	r7, #16
 8005a56:	46bd      	mov	sp, r7
 8005a58:	bd80      	pop	{r7, pc}

08005a5a <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8005a5a:	b580      	push	{r7, lr}
 8005a5c:	b084      	sub	sp, #16
 8005a5e:	af00      	add	r7, sp, #0
 8005a60:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	32b0      	adds	r2, #176	; 0xb0
 8005a6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a70:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d101      	bne.n	8005a7c <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8005a78:	2303      	movs	r3, #3
 8005a7a:	e025      	b.n	8005ac8 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005a82:	687a      	ldr	r2, [r7, #4]
 8005a84:	33b0      	adds	r3, #176	; 0xb0
 8005a86:	009b      	lsls	r3, r3, #2
 8005a88:	4413      	add	r3, r2
 8005a8a:	685b      	ldr	r3, [r3, #4]
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d01a      	beq.n	8005ac6 <USBD_CDC_EP0_RxReady+0x6c>
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8005a96:	2bff      	cmp	r3, #255	; 0xff
 8005a98:	d015      	beq.n	8005ac6 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005aa0:	687a      	ldr	r2, [r7, #4]
 8005aa2:	33b0      	adds	r3, #176	; 0xb0
 8005aa4:	009b      	lsls	r3, r3, #2
 8005aa6:	4413      	add	r3, r2
 8005aa8:	685b      	ldr	r3, [r3, #4]
 8005aaa:	689b      	ldr	r3, [r3, #8]
 8005aac:	68fa      	ldr	r2, [r7, #12]
 8005aae:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8005ab2:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8005ab4:	68fa      	ldr	r2, [r7, #12]
 8005ab6:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8005aba:	b292      	uxth	r2, r2
 8005abc:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	22ff      	movs	r2, #255	; 0xff
 8005ac2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8005ac6:	2300      	movs	r3, #0
}
 8005ac8:	4618      	mov	r0, r3
 8005aca:	3710      	adds	r7, #16
 8005acc:	46bd      	mov	sp, r7
 8005ace:	bd80      	pop	{r7, pc}

08005ad0 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8005ad0:	b580      	push	{r7, lr}
 8005ad2:	b086      	sub	sp, #24
 8005ad4:	af00      	add	r7, sp, #0
 8005ad6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005ad8:	2182      	movs	r1, #130	; 0x82
 8005ada:	4818      	ldr	r0, [pc, #96]	; (8005b3c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005adc:	f000 fd6b 	bl	80065b6 <USBD_GetEpDesc>
 8005ae0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8005ae2:	2101      	movs	r1, #1
 8005ae4:	4815      	ldr	r0, [pc, #84]	; (8005b3c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005ae6:	f000 fd66 	bl	80065b6 <USBD_GetEpDesc>
 8005aea:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005aec:	2181      	movs	r1, #129	; 0x81
 8005aee:	4813      	ldr	r0, [pc, #76]	; (8005b3c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005af0:	f000 fd61 	bl	80065b6 <USBD_GetEpDesc>
 8005af4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8005af6:	697b      	ldr	r3, [r7, #20]
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d002      	beq.n	8005b02 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8005afc:	697b      	ldr	r3, [r7, #20]
 8005afe:	2210      	movs	r2, #16
 8005b00:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8005b02:	693b      	ldr	r3, [r7, #16]
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d006      	beq.n	8005b16 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005b08:	693b      	ldr	r3, [r7, #16]
 8005b0a:	2200      	movs	r2, #0
 8005b0c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005b10:	711a      	strb	r2, [r3, #4]
 8005b12:	2200      	movs	r2, #0
 8005b14:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d006      	beq.n	8005b2a <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	2200      	movs	r2, #0
 8005b20:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005b24:	711a      	strb	r2, [r3, #4]
 8005b26:	2200      	movs	r2, #0
 8005b28:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	2243      	movs	r2, #67	; 0x43
 8005b2e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8005b30:	4b02      	ldr	r3, [pc, #8]	; (8005b3c <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8005b32:	4618      	mov	r0, r3
 8005b34:	3718      	adds	r7, #24
 8005b36:	46bd      	mov	sp, r7
 8005b38:	bd80      	pop	{r7, pc}
 8005b3a:	bf00      	nop
 8005b3c:	2000004c 	.word	0x2000004c

08005b40 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8005b40:	b580      	push	{r7, lr}
 8005b42:	b086      	sub	sp, #24
 8005b44:	af00      	add	r7, sp, #0
 8005b46:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005b48:	2182      	movs	r1, #130	; 0x82
 8005b4a:	4818      	ldr	r0, [pc, #96]	; (8005bac <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005b4c:	f000 fd33 	bl	80065b6 <USBD_GetEpDesc>
 8005b50:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8005b52:	2101      	movs	r1, #1
 8005b54:	4815      	ldr	r0, [pc, #84]	; (8005bac <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005b56:	f000 fd2e 	bl	80065b6 <USBD_GetEpDesc>
 8005b5a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005b5c:	2181      	movs	r1, #129	; 0x81
 8005b5e:	4813      	ldr	r0, [pc, #76]	; (8005bac <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005b60:	f000 fd29 	bl	80065b6 <USBD_GetEpDesc>
 8005b64:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8005b66:	697b      	ldr	r3, [r7, #20]
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d002      	beq.n	8005b72 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8005b6c:	697b      	ldr	r3, [r7, #20]
 8005b6e:	2210      	movs	r2, #16
 8005b70:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8005b72:	693b      	ldr	r3, [r7, #16]
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d006      	beq.n	8005b86 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8005b78:	693b      	ldr	r3, [r7, #16]
 8005b7a:	2200      	movs	r2, #0
 8005b7c:	711a      	strb	r2, [r3, #4]
 8005b7e:	2200      	movs	r2, #0
 8005b80:	f042 0202 	orr.w	r2, r2, #2
 8005b84:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d006      	beq.n	8005b9a <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	2200      	movs	r2, #0
 8005b90:	711a      	strb	r2, [r3, #4]
 8005b92:	2200      	movs	r2, #0
 8005b94:	f042 0202 	orr.w	r2, r2, #2
 8005b98:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	2243      	movs	r2, #67	; 0x43
 8005b9e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8005ba0:	4b02      	ldr	r3, [pc, #8]	; (8005bac <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8005ba2:	4618      	mov	r0, r3
 8005ba4:	3718      	adds	r7, #24
 8005ba6:	46bd      	mov	sp, r7
 8005ba8:	bd80      	pop	{r7, pc}
 8005baa:	bf00      	nop
 8005bac:	2000004c 	.word	0x2000004c

08005bb0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8005bb0:	b580      	push	{r7, lr}
 8005bb2:	b086      	sub	sp, #24
 8005bb4:	af00      	add	r7, sp, #0
 8005bb6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005bb8:	2182      	movs	r1, #130	; 0x82
 8005bba:	4818      	ldr	r0, [pc, #96]	; (8005c1c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8005bbc:	f000 fcfb 	bl	80065b6 <USBD_GetEpDesc>
 8005bc0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8005bc2:	2101      	movs	r1, #1
 8005bc4:	4815      	ldr	r0, [pc, #84]	; (8005c1c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8005bc6:	f000 fcf6 	bl	80065b6 <USBD_GetEpDesc>
 8005bca:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005bcc:	2181      	movs	r1, #129	; 0x81
 8005bce:	4813      	ldr	r0, [pc, #76]	; (8005c1c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8005bd0:	f000 fcf1 	bl	80065b6 <USBD_GetEpDesc>
 8005bd4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8005bd6:	697b      	ldr	r3, [r7, #20]
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d002      	beq.n	8005be2 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8005bdc:	697b      	ldr	r3, [r7, #20]
 8005bde:	2210      	movs	r2, #16
 8005be0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8005be2:	693b      	ldr	r3, [r7, #16]
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d006      	beq.n	8005bf6 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005be8:	693b      	ldr	r3, [r7, #16]
 8005bea:	2200      	movs	r2, #0
 8005bec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005bf0:	711a      	strb	r2, [r3, #4]
 8005bf2:	2200      	movs	r2, #0
 8005bf4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d006      	beq.n	8005c0a <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	2200      	movs	r2, #0
 8005c00:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005c04:	711a      	strb	r2, [r3, #4]
 8005c06:	2200      	movs	r2, #0
 8005c08:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	2243      	movs	r2, #67	; 0x43
 8005c0e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8005c10:	4b02      	ldr	r3, [pc, #8]	; (8005c1c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8005c12:	4618      	mov	r0, r3
 8005c14:	3718      	adds	r7, #24
 8005c16:	46bd      	mov	sp, r7
 8005c18:	bd80      	pop	{r7, pc}
 8005c1a:	bf00      	nop
 8005c1c:	2000004c 	.word	0x2000004c

08005c20 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8005c20:	b480      	push	{r7}
 8005c22:	b083      	sub	sp, #12
 8005c24:	af00      	add	r7, sp, #0
 8005c26:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	220a      	movs	r2, #10
 8005c2c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8005c2e:	4b03      	ldr	r3, [pc, #12]	; (8005c3c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8005c30:	4618      	mov	r0, r3
 8005c32:	370c      	adds	r7, #12
 8005c34:	46bd      	mov	sp, r7
 8005c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c3a:	4770      	bx	lr
 8005c3c:	20000008 	.word	0x20000008

08005c40 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8005c40:	b480      	push	{r7}
 8005c42:	b083      	sub	sp, #12
 8005c44:	af00      	add	r7, sp, #0
 8005c46:	6078      	str	r0, [r7, #4]
 8005c48:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8005c4a:	683b      	ldr	r3, [r7, #0]
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d101      	bne.n	8005c54 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8005c50:	2303      	movs	r3, #3
 8005c52:	e009      	b.n	8005c68 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005c5a:	687a      	ldr	r2, [r7, #4]
 8005c5c:	33b0      	adds	r3, #176	; 0xb0
 8005c5e:	009b      	lsls	r3, r3, #2
 8005c60:	4413      	add	r3, r2
 8005c62:	683a      	ldr	r2, [r7, #0]
 8005c64:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8005c66:	2300      	movs	r3, #0
}
 8005c68:	4618      	mov	r0, r3
 8005c6a:	370c      	adds	r7, #12
 8005c6c:	46bd      	mov	sp, r7
 8005c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c72:	4770      	bx	lr

08005c74 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8005c74:	b480      	push	{r7}
 8005c76:	b087      	sub	sp, #28
 8005c78:	af00      	add	r7, sp, #0
 8005c7a:	60f8      	str	r0, [r7, #12]
 8005c7c:	60b9      	str	r1, [r7, #8]
 8005c7e:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	32b0      	adds	r2, #176	; 0xb0
 8005c8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c8e:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8005c90:	697b      	ldr	r3, [r7, #20]
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d101      	bne.n	8005c9a <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8005c96:	2303      	movs	r3, #3
 8005c98:	e008      	b.n	8005cac <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8005c9a:	697b      	ldr	r3, [r7, #20]
 8005c9c:	68ba      	ldr	r2, [r7, #8]
 8005c9e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8005ca2:	697b      	ldr	r3, [r7, #20]
 8005ca4:	687a      	ldr	r2, [r7, #4]
 8005ca6:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8005caa:	2300      	movs	r3, #0
}
 8005cac:	4618      	mov	r0, r3
 8005cae:	371c      	adds	r7, #28
 8005cb0:	46bd      	mov	sp, r7
 8005cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb6:	4770      	bx	lr

08005cb8 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8005cb8:	b480      	push	{r7}
 8005cba:	b085      	sub	sp, #20
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	6078      	str	r0, [r7, #4]
 8005cc0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	32b0      	adds	r2, #176	; 0xb0
 8005ccc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005cd0:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d101      	bne.n	8005cdc <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8005cd8:	2303      	movs	r3, #3
 8005cda:	e004      	b.n	8005ce6 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	683a      	ldr	r2, [r7, #0]
 8005ce0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8005ce4:	2300      	movs	r3, #0
}
 8005ce6:	4618      	mov	r0, r3
 8005ce8:	3714      	adds	r7, #20
 8005cea:	46bd      	mov	sp, r7
 8005cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf0:	4770      	bx	lr
	...

08005cf4 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8005cf4:	b580      	push	{r7, lr}
 8005cf6:	b084      	sub	sp, #16
 8005cf8:	af00      	add	r7, sp, #0
 8005cfa:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	32b0      	adds	r2, #176	; 0xb0
 8005d06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d0a:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8005d0c:	2301      	movs	r3, #1
 8005d0e:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	32b0      	adds	r2, #176	; 0xb0
 8005d1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d101      	bne.n	8005d26 <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8005d22:	2303      	movs	r3, #3
 8005d24:	e025      	b.n	8005d72 <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 8005d26:	68bb      	ldr	r3, [r7, #8]
 8005d28:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d11f      	bne.n	8005d70 <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8005d30:	68bb      	ldr	r3, [r7, #8]
 8005d32:	2201      	movs	r2, #1
 8005d34:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8005d38:	4b10      	ldr	r3, [pc, #64]	; (8005d7c <USBD_CDC_TransmitPacket+0x88>)
 8005d3a:	781b      	ldrb	r3, [r3, #0]
 8005d3c:	f003 020f 	and.w	r2, r3, #15
 8005d40:	68bb      	ldr	r3, [r7, #8]
 8005d42:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 8005d46:	6878      	ldr	r0, [r7, #4]
 8005d48:	4613      	mov	r3, r2
 8005d4a:	009b      	lsls	r3, r3, #2
 8005d4c:	4413      	add	r3, r2
 8005d4e:	009b      	lsls	r3, r3, #2
 8005d50:	4403      	add	r3, r0
 8005d52:	3318      	adds	r3, #24
 8005d54:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8005d56:	4b09      	ldr	r3, [pc, #36]	; (8005d7c <USBD_CDC_TransmitPacket+0x88>)
 8005d58:	7819      	ldrb	r1, [r3, #0]
 8005d5a:	68bb      	ldr	r3, [r7, #8]
 8005d5c:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8005d60:	68bb      	ldr	r3, [r7, #8]
 8005d62:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8005d66:	6878      	ldr	r0, [r7, #4]
 8005d68:	f002 fed3 	bl	8008b12 <USBD_LL_Transmit>

    ret = USBD_OK;
 8005d6c:	2300      	movs	r3, #0
 8005d6e:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8005d70:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d72:	4618      	mov	r0, r3
 8005d74:	3710      	adds	r7, #16
 8005d76:	46bd      	mov	sp, r7
 8005d78:	bd80      	pop	{r7, pc}
 8005d7a:	bf00      	nop
 8005d7c:	2000008f 	.word	0x2000008f

08005d80 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8005d80:	b580      	push	{r7, lr}
 8005d82:	b084      	sub	sp, #16
 8005d84:	af00      	add	r7, sp, #0
 8005d86:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	32b0      	adds	r2, #176	; 0xb0
 8005d92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d96:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	32b0      	adds	r2, #176	; 0xb0
 8005da2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d101      	bne.n	8005dae <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8005daa:	2303      	movs	r3, #3
 8005dac:	e018      	b.n	8005de0 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	7c1b      	ldrb	r3, [r3, #16]
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d10a      	bne.n	8005dcc <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005db6:	4b0c      	ldr	r3, [pc, #48]	; (8005de8 <USBD_CDC_ReceivePacket+0x68>)
 8005db8:	7819      	ldrb	r1, [r3, #0]
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005dc0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005dc4:	6878      	ldr	r0, [r7, #4]
 8005dc6:	f002 fec5 	bl	8008b54 <USBD_LL_PrepareReceive>
 8005dca:	e008      	b.n	8005dde <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005dcc:	4b06      	ldr	r3, [pc, #24]	; (8005de8 <USBD_CDC_ReceivePacket+0x68>)
 8005dce:	7819      	ldrb	r1, [r3, #0]
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005dd6:	2340      	movs	r3, #64	; 0x40
 8005dd8:	6878      	ldr	r0, [r7, #4]
 8005dda:	f002 febb 	bl	8008b54 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005dde:	2300      	movs	r3, #0
}
 8005de0:	4618      	mov	r0, r3
 8005de2:	3710      	adds	r7, #16
 8005de4:	46bd      	mov	sp, r7
 8005de6:	bd80      	pop	{r7, pc}
 8005de8:	20000090 	.word	0x20000090

08005dec <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005dec:	b580      	push	{r7, lr}
 8005dee:	b086      	sub	sp, #24
 8005df0:	af00      	add	r7, sp, #0
 8005df2:	60f8      	str	r0, [r7, #12]
 8005df4:	60b9      	str	r1, [r7, #8]
 8005df6:	4613      	mov	r3, r2
 8005df8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d10a      	bne.n	8005e16 <USBD_Init+0x2a>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
 8005e00:	4817      	ldr	r0, [pc, #92]	; (8005e60 <USBD_Init+0x74>)
 8005e02:	f003 f899 	bl	8008f38 <iprintf>
 8005e06:	4817      	ldr	r0, [pc, #92]	; (8005e64 <USBD_Init+0x78>)
 8005e08:	f003 f896 	bl	8008f38 <iprintf>
 8005e0c:	200a      	movs	r0, #10
 8005e0e:	f003 f8ab 	bl	8008f68 <putchar>
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8005e12:	2303      	movs	r3, #3
 8005e14:	e01f      	b.n	8005e56 <USBD_Init+0x6a>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	2200      	movs	r2, #0
 8005e1a:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	2200      	movs	r2, #0
 8005e22:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	2200      	movs	r2, #0
 8005e2a:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005e2e:	68bb      	ldr	r3, [r7, #8]
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d003      	beq.n	8005e3c <USBD_Init+0x50>
  {
    pdev->pDesc = pdesc;
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	68ba      	ldr	r2, [r7, #8]
 8005e38:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	2201      	movs	r2, #1
 8005e40:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	79fa      	ldrb	r2, [r7, #7]
 8005e48:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8005e4a:	68f8      	ldr	r0, [r7, #12]
 8005e4c:	f002 fd2c 	bl	80088a8 <USBD_LL_Init>
 8005e50:	4603      	mov	r3, r0
 8005e52:	75fb      	strb	r3, [r7, #23]

  return ret;
 8005e54:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e56:	4618      	mov	r0, r3
 8005e58:	3718      	adds	r7, #24
 8005e5a:	46bd      	mov	sp, r7
 8005e5c:	bd80      	pop	{r7, pc}
 8005e5e:	bf00      	nop
 8005e60:	0800a2c4 	.word	0x0800a2c4
 8005e64:	0800a2cc 	.word	0x0800a2cc

08005e68 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005e68:	b580      	push	{r7, lr}
 8005e6a:	b084      	sub	sp, #16
 8005e6c:	af00      	add	r7, sp, #0
 8005e6e:	6078      	str	r0, [r7, #4]
 8005e70:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005e72:	2300      	movs	r3, #0
 8005e74:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8005e76:	683b      	ldr	r3, [r7, #0]
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d10a      	bne.n	8005e92 <USBD_RegisterClass+0x2a>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
 8005e7c:	481a      	ldr	r0, [pc, #104]	; (8005ee8 <USBD_RegisterClass+0x80>)
 8005e7e:	f003 f85b 	bl	8008f38 <iprintf>
 8005e82:	481a      	ldr	r0, [pc, #104]	; (8005eec <USBD_RegisterClass+0x84>)
 8005e84:	f003 f858 	bl	8008f38 <iprintf>
 8005e88:	200a      	movs	r0, #10
 8005e8a:	f003 f86d 	bl	8008f68 <putchar>
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8005e8e:	2303      	movs	r3, #3
 8005e90:	e025      	b.n	8005ede <USBD_RegisterClass+0x76>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	683a      	ldr	r2, [r7, #0]
 8005e96:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	32ae      	adds	r2, #174	; 0xae
 8005ea4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ea8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d00f      	beq.n	8005ece <USBD_RegisterClass+0x66>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	32ae      	adds	r2, #174	; 0xae
 8005eb8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ebc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ebe:	f107 020e 	add.w	r2, r7, #14
 8005ec2:	4610      	mov	r0, r2
 8005ec4:	4798      	blx	r3
 8005ec6:	4602      	mov	r2, r0
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8005ed4:	1c5a      	adds	r2, r3, #1
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8005edc:	2300      	movs	r3, #0
}
 8005ede:	4618      	mov	r0, r3
 8005ee0:	3710      	adds	r7, #16
 8005ee2:	46bd      	mov	sp, r7
 8005ee4:	bd80      	pop	{r7, pc}
 8005ee6:	bf00      	nop
 8005ee8:	0800a2c4 	.word	0x0800a2c4
 8005eec:	0800a2e4 	.word	0x0800a2e4

08005ef0 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8005ef0:	b580      	push	{r7, lr}
 8005ef2:	b082      	sub	sp, #8
 8005ef4:	af00      	add	r7, sp, #0
 8005ef6:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8005ef8:	6878      	ldr	r0, [r7, #4]
 8005efa:	f002 fd21 	bl	8008940 <USBD_LL_Start>
 8005efe:	4603      	mov	r3, r0
}
 8005f00:	4618      	mov	r0, r3
 8005f02:	3708      	adds	r7, #8
 8005f04:	46bd      	mov	sp, r7
 8005f06:	bd80      	pop	{r7, pc}

08005f08 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8005f08:	b480      	push	{r7}
 8005f0a:	b083      	sub	sp, #12
 8005f0c:	af00      	add	r7, sp, #0
 8005f0e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005f10:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8005f12:	4618      	mov	r0, r3
 8005f14:	370c      	adds	r7, #12
 8005f16:	46bd      	mov	sp, r7
 8005f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f1c:	4770      	bx	lr

08005f1e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005f1e:	b580      	push	{r7, lr}
 8005f20:	b084      	sub	sp, #16
 8005f22:	af00      	add	r7, sp, #0
 8005f24:	6078      	str	r0, [r7, #4]
 8005f26:	460b      	mov	r3, r1
 8005f28:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8005f2a:	2300      	movs	r3, #0
 8005f2c:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d009      	beq.n	8005f4c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	78fa      	ldrb	r2, [r7, #3]
 8005f42:	4611      	mov	r1, r2
 8005f44:	6878      	ldr	r0, [r7, #4]
 8005f46:	4798      	blx	r3
 8005f48:	4603      	mov	r3, r0
 8005f4a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005f4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f4e:	4618      	mov	r0, r3
 8005f50:	3710      	adds	r7, #16
 8005f52:	46bd      	mov	sp, r7
 8005f54:	bd80      	pop	{r7, pc}

08005f56 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005f56:	b580      	push	{r7, lr}
 8005f58:	b084      	sub	sp, #16
 8005f5a:	af00      	add	r7, sp, #0
 8005f5c:	6078      	str	r0, [r7, #4]
 8005f5e:	460b      	mov	r3, r1
 8005f60:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8005f62:	2300      	movs	r3, #0
 8005f64:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f6c:	685b      	ldr	r3, [r3, #4]
 8005f6e:	78fa      	ldrb	r2, [r7, #3]
 8005f70:	4611      	mov	r1, r2
 8005f72:	6878      	ldr	r0, [r7, #4]
 8005f74:	4798      	blx	r3
 8005f76:	4603      	mov	r3, r0
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d001      	beq.n	8005f80 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8005f7c:	2303      	movs	r3, #3
 8005f7e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005f80:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f82:	4618      	mov	r0, r3
 8005f84:	3710      	adds	r7, #16
 8005f86:	46bd      	mov	sp, r7
 8005f88:	bd80      	pop	{r7, pc}

08005f8a <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005f8a:	b580      	push	{r7, lr}
 8005f8c:	b084      	sub	sp, #16
 8005f8e:	af00      	add	r7, sp, #0
 8005f90:	6078      	str	r0, [r7, #4]
 8005f92:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005f9a:	6839      	ldr	r1, [r7, #0]
 8005f9c:	4618      	mov	r0, r3
 8005f9e:	f001 f908 	bl	80071b2 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	2201      	movs	r2, #1
 8005fa6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8005fb0:	461a      	mov	r2, r3
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005fbe:	f003 031f 	and.w	r3, r3, #31
 8005fc2:	2b02      	cmp	r3, #2
 8005fc4:	d01a      	beq.n	8005ffc <USBD_LL_SetupStage+0x72>
 8005fc6:	2b02      	cmp	r3, #2
 8005fc8:	d822      	bhi.n	8006010 <USBD_LL_SetupStage+0x86>
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d002      	beq.n	8005fd4 <USBD_LL_SetupStage+0x4a>
 8005fce:	2b01      	cmp	r3, #1
 8005fd0:	d00a      	beq.n	8005fe8 <USBD_LL_SetupStage+0x5e>
 8005fd2:	e01d      	b.n	8006010 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005fda:	4619      	mov	r1, r3
 8005fdc:	6878      	ldr	r0, [r7, #4]
 8005fde:	f000 fb5f 	bl	80066a0 <USBD_StdDevReq>
 8005fe2:	4603      	mov	r3, r0
 8005fe4:	73fb      	strb	r3, [r7, #15]
      break;
 8005fe6:	e020      	b.n	800602a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005fee:	4619      	mov	r1, r3
 8005ff0:	6878      	ldr	r0, [r7, #4]
 8005ff2:	f000 fbc7 	bl	8006784 <USBD_StdItfReq>
 8005ff6:	4603      	mov	r3, r0
 8005ff8:	73fb      	strb	r3, [r7, #15]
      break;
 8005ffa:	e016      	b.n	800602a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006002:	4619      	mov	r1, r3
 8006004:	6878      	ldr	r0, [r7, #4]
 8006006:	f000 fc29 	bl	800685c <USBD_StdEPReq>
 800600a:	4603      	mov	r3, r0
 800600c:	73fb      	strb	r3, [r7, #15]
      break;
 800600e:	e00c      	b.n	800602a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006016:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800601a:	b2db      	uxtb	r3, r3
 800601c:	4619      	mov	r1, r3
 800601e:	6878      	ldr	r0, [r7, #4]
 8006020:	f002 fcee 	bl	8008a00 <USBD_LL_StallEP>
 8006024:	4603      	mov	r3, r0
 8006026:	73fb      	strb	r3, [r7, #15]
      break;
 8006028:	bf00      	nop
  }

  return ret;
 800602a:	7bfb      	ldrb	r3, [r7, #15]
}
 800602c:	4618      	mov	r0, r3
 800602e:	3710      	adds	r7, #16
 8006030:	46bd      	mov	sp, r7
 8006032:	bd80      	pop	{r7, pc}

08006034 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006034:	b580      	push	{r7, lr}
 8006036:	b086      	sub	sp, #24
 8006038:	af00      	add	r7, sp, #0
 800603a:	60f8      	str	r0, [r7, #12]
 800603c:	460b      	mov	r3, r1
 800603e:	607a      	str	r2, [r7, #4]
 8006040:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8006042:	2300      	movs	r3, #0
 8006044:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8006046:	7afb      	ldrb	r3, [r7, #11]
 8006048:	2b00      	cmp	r3, #0
 800604a:	d16e      	bne.n	800612a <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8006052:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800605a:	2b03      	cmp	r3, #3
 800605c:	f040 8098 	bne.w	8006190 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8006060:	693b      	ldr	r3, [r7, #16]
 8006062:	689a      	ldr	r2, [r3, #8]
 8006064:	693b      	ldr	r3, [r7, #16]
 8006066:	68db      	ldr	r3, [r3, #12]
 8006068:	429a      	cmp	r2, r3
 800606a:	d913      	bls.n	8006094 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800606c:	693b      	ldr	r3, [r7, #16]
 800606e:	689a      	ldr	r2, [r3, #8]
 8006070:	693b      	ldr	r3, [r7, #16]
 8006072:	68db      	ldr	r3, [r3, #12]
 8006074:	1ad2      	subs	r2, r2, r3
 8006076:	693b      	ldr	r3, [r7, #16]
 8006078:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800607a:	693b      	ldr	r3, [r7, #16]
 800607c:	68da      	ldr	r2, [r3, #12]
 800607e:	693b      	ldr	r3, [r7, #16]
 8006080:	689b      	ldr	r3, [r3, #8]
 8006082:	4293      	cmp	r3, r2
 8006084:	bf28      	it	cs
 8006086:	4613      	movcs	r3, r2
 8006088:	461a      	mov	r2, r3
 800608a:	6879      	ldr	r1, [r7, #4]
 800608c:	68f8      	ldr	r0, [r7, #12]
 800608e:	f001 f984 	bl	800739a <USBD_CtlContinueRx>
 8006092:	e07d      	b.n	8006190 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800609a:	f003 031f 	and.w	r3, r3, #31
 800609e:	2b02      	cmp	r3, #2
 80060a0:	d014      	beq.n	80060cc <USBD_LL_DataOutStage+0x98>
 80060a2:	2b02      	cmp	r3, #2
 80060a4:	d81d      	bhi.n	80060e2 <USBD_LL_DataOutStage+0xae>
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d002      	beq.n	80060b0 <USBD_LL_DataOutStage+0x7c>
 80060aa:	2b01      	cmp	r3, #1
 80060ac:	d003      	beq.n	80060b6 <USBD_LL_DataOutStage+0x82>
 80060ae:	e018      	b.n	80060e2 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80060b0:	2300      	movs	r3, #0
 80060b2:	75bb      	strb	r3, [r7, #22]
            break;
 80060b4:	e018      	b.n	80060e8 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80060bc:	b2db      	uxtb	r3, r3
 80060be:	4619      	mov	r1, r3
 80060c0:	68f8      	ldr	r0, [r7, #12]
 80060c2:	f000 fa5e 	bl	8006582 <USBD_CoreFindIF>
 80060c6:	4603      	mov	r3, r0
 80060c8:	75bb      	strb	r3, [r7, #22]
            break;
 80060ca:	e00d      	b.n	80060e8 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80060d2:	b2db      	uxtb	r3, r3
 80060d4:	4619      	mov	r1, r3
 80060d6:	68f8      	ldr	r0, [r7, #12]
 80060d8:	f000 fa60 	bl	800659c <USBD_CoreFindEP>
 80060dc:	4603      	mov	r3, r0
 80060de:	75bb      	strb	r3, [r7, #22]
            break;
 80060e0:	e002      	b.n	80060e8 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80060e2:	2300      	movs	r3, #0
 80060e4:	75bb      	strb	r3, [r7, #22]
            break;
 80060e6:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80060e8:	7dbb      	ldrb	r3, [r7, #22]
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d119      	bne.n	8006122 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80060f4:	b2db      	uxtb	r3, r3
 80060f6:	2b03      	cmp	r3, #3
 80060f8:	d113      	bne.n	8006122 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 80060fa:	7dba      	ldrb	r2, [r7, #22]
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	32ae      	adds	r2, #174	; 0xae
 8006100:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006104:	691b      	ldr	r3, [r3, #16]
 8006106:	2b00      	cmp	r3, #0
 8006108:	d00b      	beq.n	8006122 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800610a:	7dba      	ldrb	r2, [r7, #22]
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8006112:	7dba      	ldrb	r2, [r7, #22]
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	32ae      	adds	r2, #174	; 0xae
 8006118:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800611c:	691b      	ldr	r3, [r3, #16]
 800611e:	68f8      	ldr	r0, [r7, #12]
 8006120:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8006122:	68f8      	ldr	r0, [r7, #12]
 8006124:	f001 f94a 	bl	80073bc <USBD_CtlSendStatus>
 8006128:	e032      	b.n	8006190 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800612a:	7afb      	ldrb	r3, [r7, #11]
 800612c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006130:	b2db      	uxtb	r3, r3
 8006132:	4619      	mov	r1, r3
 8006134:	68f8      	ldr	r0, [r7, #12]
 8006136:	f000 fa31 	bl	800659c <USBD_CoreFindEP>
 800613a:	4603      	mov	r3, r0
 800613c:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800613e:	7dbb      	ldrb	r3, [r7, #22]
 8006140:	2bff      	cmp	r3, #255	; 0xff
 8006142:	d025      	beq.n	8006190 <USBD_LL_DataOutStage+0x15c>
 8006144:	7dbb      	ldrb	r3, [r7, #22]
 8006146:	2b00      	cmp	r3, #0
 8006148:	d122      	bne.n	8006190 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006150:	b2db      	uxtb	r3, r3
 8006152:	2b03      	cmp	r3, #3
 8006154:	d117      	bne.n	8006186 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8006156:	7dba      	ldrb	r2, [r7, #22]
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	32ae      	adds	r2, #174	; 0xae
 800615c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006160:	699b      	ldr	r3, [r3, #24]
 8006162:	2b00      	cmp	r3, #0
 8006164:	d00f      	beq.n	8006186 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8006166:	7dba      	ldrb	r2, [r7, #22]
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800616e:	7dba      	ldrb	r2, [r7, #22]
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	32ae      	adds	r2, #174	; 0xae
 8006174:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006178:	699b      	ldr	r3, [r3, #24]
 800617a:	7afa      	ldrb	r2, [r7, #11]
 800617c:	4611      	mov	r1, r2
 800617e:	68f8      	ldr	r0, [r7, #12]
 8006180:	4798      	blx	r3
 8006182:	4603      	mov	r3, r0
 8006184:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8006186:	7dfb      	ldrb	r3, [r7, #23]
 8006188:	2b00      	cmp	r3, #0
 800618a:	d001      	beq.n	8006190 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800618c:	7dfb      	ldrb	r3, [r7, #23]
 800618e:	e000      	b.n	8006192 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8006190:	2300      	movs	r3, #0
}
 8006192:	4618      	mov	r0, r3
 8006194:	3718      	adds	r7, #24
 8006196:	46bd      	mov	sp, r7
 8006198:	bd80      	pop	{r7, pc}

0800619a <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800619a:	b580      	push	{r7, lr}
 800619c:	b086      	sub	sp, #24
 800619e:	af00      	add	r7, sp, #0
 80061a0:	60f8      	str	r0, [r7, #12]
 80061a2:	460b      	mov	r3, r1
 80061a4:	607a      	str	r2, [r7, #4]
 80061a6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 80061a8:	7afb      	ldrb	r3, [r7, #11]
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d16f      	bne.n	800628e <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	3314      	adds	r3, #20
 80061b2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80061ba:	2b02      	cmp	r3, #2
 80061bc:	d15a      	bne.n	8006274 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 80061be:	693b      	ldr	r3, [r7, #16]
 80061c0:	689a      	ldr	r2, [r3, #8]
 80061c2:	693b      	ldr	r3, [r7, #16]
 80061c4:	68db      	ldr	r3, [r3, #12]
 80061c6:	429a      	cmp	r2, r3
 80061c8:	d914      	bls.n	80061f4 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80061ca:	693b      	ldr	r3, [r7, #16]
 80061cc:	689a      	ldr	r2, [r3, #8]
 80061ce:	693b      	ldr	r3, [r7, #16]
 80061d0:	68db      	ldr	r3, [r3, #12]
 80061d2:	1ad2      	subs	r2, r2, r3
 80061d4:	693b      	ldr	r3, [r7, #16]
 80061d6:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80061d8:	693b      	ldr	r3, [r7, #16]
 80061da:	689b      	ldr	r3, [r3, #8]
 80061dc:	461a      	mov	r2, r3
 80061de:	6879      	ldr	r1, [r7, #4]
 80061e0:	68f8      	ldr	r0, [r7, #12]
 80061e2:	f001 f8ac 	bl	800733e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80061e6:	2300      	movs	r3, #0
 80061e8:	2200      	movs	r2, #0
 80061ea:	2100      	movs	r1, #0
 80061ec:	68f8      	ldr	r0, [r7, #12]
 80061ee:	f002 fcb1 	bl	8008b54 <USBD_LL_PrepareReceive>
 80061f2:	e03f      	b.n	8006274 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80061f4:	693b      	ldr	r3, [r7, #16]
 80061f6:	68da      	ldr	r2, [r3, #12]
 80061f8:	693b      	ldr	r3, [r7, #16]
 80061fa:	689b      	ldr	r3, [r3, #8]
 80061fc:	429a      	cmp	r2, r3
 80061fe:	d11c      	bne.n	800623a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8006200:	693b      	ldr	r3, [r7, #16]
 8006202:	685a      	ldr	r2, [r3, #4]
 8006204:	693b      	ldr	r3, [r7, #16]
 8006206:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8006208:	429a      	cmp	r2, r3
 800620a:	d316      	bcc.n	800623a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800620c:	693b      	ldr	r3, [r7, #16]
 800620e:	685a      	ldr	r2, [r3, #4]
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006216:	429a      	cmp	r2, r3
 8006218:	d20f      	bcs.n	800623a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800621a:	2200      	movs	r2, #0
 800621c:	2100      	movs	r1, #0
 800621e:	68f8      	ldr	r0, [r7, #12]
 8006220:	f001 f88d 	bl	800733e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	2200      	movs	r2, #0
 8006228:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800622c:	2300      	movs	r3, #0
 800622e:	2200      	movs	r2, #0
 8006230:	2100      	movs	r1, #0
 8006232:	68f8      	ldr	r0, [r7, #12]
 8006234:	f002 fc8e 	bl	8008b54 <USBD_LL_PrepareReceive>
 8006238:	e01c      	b.n	8006274 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006240:	b2db      	uxtb	r3, r3
 8006242:	2b03      	cmp	r3, #3
 8006244:	d10f      	bne.n	8006266 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800624c:	68db      	ldr	r3, [r3, #12]
 800624e:	2b00      	cmp	r3, #0
 8006250:	d009      	beq.n	8006266 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	2200      	movs	r2, #0
 8006256:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006260:	68db      	ldr	r3, [r3, #12]
 8006262:	68f8      	ldr	r0, [r7, #12]
 8006264:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006266:	2180      	movs	r1, #128	; 0x80
 8006268:	68f8      	ldr	r0, [r7, #12]
 800626a:	f002 fbc9 	bl	8008a00 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800626e:	68f8      	ldr	r0, [r7, #12]
 8006270:	f001 f8b7 	bl	80073e2 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800627a:	2b00      	cmp	r3, #0
 800627c:	d03a      	beq.n	80062f4 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800627e:	68f8      	ldr	r0, [r7, #12]
 8006280:	f7ff fe42 	bl	8005f08 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	2200      	movs	r2, #0
 8006288:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800628c:	e032      	b.n	80062f4 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800628e:	7afb      	ldrb	r3, [r7, #11]
 8006290:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006294:	b2db      	uxtb	r3, r3
 8006296:	4619      	mov	r1, r3
 8006298:	68f8      	ldr	r0, [r7, #12]
 800629a:	f000 f97f 	bl	800659c <USBD_CoreFindEP>
 800629e:	4603      	mov	r3, r0
 80062a0:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80062a2:	7dfb      	ldrb	r3, [r7, #23]
 80062a4:	2bff      	cmp	r3, #255	; 0xff
 80062a6:	d025      	beq.n	80062f4 <USBD_LL_DataInStage+0x15a>
 80062a8:	7dfb      	ldrb	r3, [r7, #23]
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d122      	bne.n	80062f4 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80062b4:	b2db      	uxtb	r3, r3
 80062b6:	2b03      	cmp	r3, #3
 80062b8:	d11c      	bne.n	80062f4 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80062ba:	7dfa      	ldrb	r2, [r7, #23]
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	32ae      	adds	r2, #174	; 0xae
 80062c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80062c4:	695b      	ldr	r3, [r3, #20]
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d014      	beq.n	80062f4 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 80062ca:	7dfa      	ldrb	r2, [r7, #23]
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80062d2:	7dfa      	ldrb	r2, [r7, #23]
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	32ae      	adds	r2, #174	; 0xae
 80062d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80062dc:	695b      	ldr	r3, [r3, #20]
 80062de:	7afa      	ldrb	r2, [r7, #11]
 80062e0:	4611      	mov	r1, r2
 80062e2:	68f8      	ldr	r0, [r7, #12]
 80062e4:	4798      	blx	r3
 80062e6:	4603      	mov	r3, r0
 80062e8:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80062ea:	7dbb      	ldrb	r3, [r7, #22]
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d001      	beq.n	80062f4 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 80062f0:	7dbb      	ldrb	r3, [r7, #22]
 80062f2:	e000      	b.n	80062f6 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 80062f4:	2300      	movs	r3, #0
}
 80062f6:	4618      	mov	r0, r3
 80062f8:	3718      	adds	r7, #24
 80062fa:	46bd      	mov	sp, r7
 80062fc:	bd80      	pop	{r7, pc}

080062fe <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80062fe:	b580      	push	{r7, lr}
 8006300:	b084      	sub	sp, #16
 8006302:	af00      	add	r7, sp, #0
 8006304:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8006306:	2300      	movs	r3, #0
 8006308:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	2201      	movs	r2, #1
 800630e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	2200      	movs	r2, #0
 8006316:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	2200      	movs	r2, #0
 800631e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	2200      	movs	r2, #0
 8006324:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	2200      	movs	r2, #0
 800632c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006336:	2b00      	cmp	r3, #0
 8006338:	d014      	beq.n	8006364 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006340:	685b      	ldr	r3, [r3, #4]
 8006342:	2b00      	cmp	r3, #0
 8006344:	d00e      	beq.n	8006364 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800634c:	685b      	ldr	r3, [r3, #4]
 800634e:	687a      	ldr	r2, [r7, #4]
 8006350:	6852      	ldr	r2, [r2, #4]
 8006352:	b2d2      	uxtb	r2, r2
 8006354:	4611      	mov	r1, r2
 8006356:	6878      	ldr	r0, [r7, #4]
 8006358:	4798      	blx	r3
 800635a:	4603      	mov	r3, r0
 800635c:	2b00      	cmp	r3, #0
 800635e:	d001      	beq.n	8006364 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8006360:	2303      	movs	r3, #3
 8006362:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006364:	2340      	movs	r3, #64	; 0x40
 8006366:	2200      	movs	r2, #0
 8006368:	2100      	movs	r1, #0
 800636a:	6878      	ldr	r0, [r7, #4]
 800636c:	f002 fb03 	bl	8008976 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	2201      	movs	r2, #1
 8006374:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	2240      	movs	r2, #64	; 0x40
 800637c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006380:	2340      	movs	r3, #64	; 0x40
 8006382:	2200      	movs	r2, #0
 8006384:	2180      	movs	r1, #128	; 0x80
 8006386:	6878      	ldr	r0, [r7, #4]
 8006388:	f002 faf5 	bl	8008976 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	2201      	movs	r2, #1
 8006390:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	2240      	movs	r2, #64	; 0x40
 8006396:	621a      	str	r2, [r3, #32]

  return ret;
 8006398:	7bfb      	ldrb	r3, [r7, #15]
}
 800639a:	4618      	mov	r0, r3
 800639c:	3710      	adds	r7, #16
 800639e:	46bd      	mov	sp, r7
 80063a0:	bd80      	pop	{r7, pc}

080063a2 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80063a2:	b480      	push	{r7}
 80063a4:	b083      	sub	sp, #12
 80063a6:	af00      	add	r7, sp, #0
 80063a8:	6078      	str	r0, [r7, #4]
 80063aa:	460b      	mov	r3, r1
 80063ac:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	78fa      	ldrb	r2, [r7, #3]
 80063b2:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80063b4:	2300      	movs	r3, #0
}
 80063b6:	4618      	mov	r0, r3
 80063b8:	370c      	adds	r7, #12
 80063ba:	46bd      	mov	sp, r7
 80063bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c0:	4770      	bx	lr

080063c2 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80063c2:	b480      	push	{r7}
 80063c4:	b083      	sub	sp, #12
 80063c6:	af00      	add	r7, sp, #0
 80063c8:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80063d0:	b2da      	uxtb	r2, r3
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	2204      	movs	r2, #4
 80063dc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80063e0:	2300      	movs	r3, #0
}
 80063e2:	4618      	mov	r0, r3
 80063e4:	370c      	adds	r7, #12
 80063e6:	46bd      	mov	sp, r7
 80063e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ec:	4770      	bx	lr

080063ee <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80063ee:	b480      	push	{r7}
 80063f0:	b083      	sub	sp, #12
 80063f2:	af00      	add	r7, sp, #0
 80063f4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80063fc:	b2db      	uxtb	r3, r3
 80063fe:	2b04      	cmp	r3, #4
 8006400:	d106      	bne.n	8006410 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8006408:	b2da      	uxtb	r2, r3
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8006410:	2300      	movs	r3, #0
}
 8006412:	4618      	mov	r0, r3
 8006414:	370c      	adds	r7, #12
 8006416:	46bd      	mov	sp, r7
 8006418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800641c:	4770      	bx	lr

0800641e <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800641e:	b580      	push	{r7, lr}
 8006420:	b082      	sub	sp, #8
 8006422:	af00      	add	r7, sp, #0
 8006424:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800642c:	b2db      	uxtb	r3, r3
 800642e:	2b03      	cmp	r3, #3
 8006430:	d110      	bne.n	8006454 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006438:	2b00      	cmp	r3, #0
 800643a:	d00b      	beq.n	8006454 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006442:	69db      	ldr	r3, [r3, #28]
 8006444:	2b00      	cmp	r3, #0
 8006446:	d005      	beq.n	8006454 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800644e:	69db      	ldr	r3, [r3, #28]
 8006450:	6878      	ldr	r0, [r7, #4]
 8006452:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8006454:	2300      	movs	r3, #0
}
 8006456:	4618      	mov	r0, r3
 8006458:	3708      	adds	r7, #8
 800645a:	46bd      	mov	sp, r7
 800645c:	bd80      	pop	{r7, pc}

0800645e <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800645e:	b580      	push	{r7, lr}
 8006460:	b082      	sub	sp, #8
 8006462:	af00      	add	r7, sp, #0
 8006464:	6078      	str	r0, [r7, #4]
 8006466:	460b      	mov	r3, r1
 8006468:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	32ae      	adds	r2, #174	; 0xae
 8006474:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006478:	2b00      	cmp	r3, #0
 800647a:	d101      	bne.n	8006480 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800647c:	2303      	movs	r3, #3
 800647e:	e01c      	b.n	80064ba <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006486:	b2db      	uxtb	r3, r3
 8006488:	2b03      	cmp	r3, #3
 800648a:	d115      	bne.n	80064b8 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	32ae      	adds	r2, #174	; 0xae
 8006496:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800649a:	6a1b      	ldr	r3, [r3, #32]
 800649c:	2b00      	cmp	r3, #0
 800649e:	d00b      	beq.n	80064b8 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	32ae      	adds	r2, #174	; 0xae
 80064aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80064ae:	6a1b      	ldr	r3, [r3, #32]
 80064b0:	78fa      	ldrb	r2, [r7, #3]
 80064b2:	4611      	mov	r1, r2
 80064b4:	6878      	ldr	r0, [r7, #4]
 80064b6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80064b8:	2300      	movs	r3, #0
}
 80064ba:	4618      	mov	r0, r3
 80064bc:	3708      	adds	r7, #8
 80064be:	46bd      	mov	sp, r7
 80064c0:	bd80      	pop	{r7, pc}

080064c2 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80064c2:	b580      	push	{r7, lr}
 80064c4:	b082      	sub	sp, #8
 80064c6:	af00      	add	r7, sp, #0
 80064c8:	6078      	str	r0, [r7, #4]
 80064ca:	460b      	mov	r3, r1
 80064cc:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	32ae      	adds	r2, #174	; 0xae
 80064d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d101      	bne.n	80064e4 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 80064e0:	2303      	movs	r3, #3
 80064e2:	e01c      	b.n	800651e <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80064ea:	b2db      	uxtb	r3, r3
 80064ec:	2b03      	cmp	r3, #3
 80064ee:	d115      	bne.n	800651c <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	32ae      	adds	r2, #174	; 0xae
 80064fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80064fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006500:	2b00      	cmp	r3, #0
 8006502:	d00b      	beq.n	800651c <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	32ae      	adds	r2, #174	; 0xae
 800650e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006512:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006514:	78fa      	ldrb	r2, [r7, #3]
 8006516:	4611      	mov	r1, r2
 8006518:	6878      	ldr	r0, [r7, #4]
 800651a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800651c:	2300      	movs	r3, #0
}
 800651e:	4618      	mov	r0, r3
 8006520:	3708      	adds	r7, #8
 8006522:	46bd      	mov	sp, r7
 8006524:	bd80      	pop	{r7, pc}

08006526 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8006526:	b480      	push	{r7}
 8006528:	b083      	sub	sp, #12
 800652a:	af00      	add	r7, sp, #0
 800652c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800652e:	2300      	movs	r3, #0
}
 8006530:	4618      	mov	r0, r3
 8006532:	370c      	adds	r7, #12
 8006534:	46bd      	mov	sp, r7
 8006536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800653a:	4770      	bx	lr

0800653c <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800653c:	b580      	push	{r7, lr}
 800653e:	b084      	sub	sp, #16
 8006540:	af00      	add	r7, sp, #0
 8006542:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8006544:	2300      	movs	r3, #0
 8006546:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	2201      	movs	r2, #1
 800654c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006556:	2b00      	cmp	r3, #0
 8006558:	d00e      	beq.n	8006578 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006560:	685b      	ldr	r3, [r3, #4]
 8006562:	687a      	ldr	r2, [r7, #4]
 8006564:	6852      	ldr	r2, [r2, #4]
 8006566:	b2d2      	uxtb	r2, r2
 8006568:	4611      	mov	r1, r2
 800656a:	6878      	ldr	r0, [r7, #4]
 800656c:	4798      	blx	r3
 800656e:	4603      	mov	r3, r0
 8006570:	2b00      	cmp	r3, #0
 8006572:	d001      	beq.n	8006578 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8006574:	2303      	movs	r3, #3
 8006576:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006578:	7bfb      	ldrb	r3, [r7, #15]
}
 800657a:	4618      	mov	r0, r3
 800657c:	3710      	adds	r7, #16
 800657e:	46bd      	mov	sp, r7
 8006580:	bd80      	pop	{r7, pc}

08006582 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8006582:	b480      	push	{r7}
 8006584:	b083      	sub	sp, #12
 8006586:	af00      	add	r7, sp, #0
 8006588:	6078      	str	r0, [r7, #4]
 800658a:	460b      	mov	r3, r1
 800658c:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800658e:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8006590:	4618      	mov	r0, r3
 8006592:	370c      	adds	r7, #12
 8006594:	46bd      	mov	sp, r7
 8006596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800659a:	4770      	bx	lr

0800659c <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800659c:	b480      	push	{r7}
 800659e:	b083      	sub	sp, #12
 80065a0:	af00      	add	r7, sp, #0
 80065a2:	6078      	str	r0, [r7, #4]
 80065a4:	460b      	mov	r3, r1
 80065a6:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80065a8:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80065aa:	4618      	mov	r0, r3
 80065ac:	370c      	adds	r7, #12
 80065ae:	46bd      	mov	sp, r7
 80065b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b4:	4770      	bx	lr

080065b6 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 80065b6:	b580      	push	{r7, lr}
 80065b8:	b086      	sub	sp, #24
 80065ba:	af00      	add	r7, sp, #0
 80065bc:	6078      	str	r0, [r7, #4]
 80065be:	460b      	mov	r3, r1
 80065c0:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 80065ca:	2300      	movs	r3, #0
 80065cc:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	885b      	ldrh	r3, [r3, #2]
 80065d2:	b29a      	uxth	r2, r3
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	781b      	ldrb	r3, [r3, #0]
 80065d8:	b29b      	uxth	r3, r3
 80065da:	429a      	cmp	r2, r3
 80065dc:	d920      	bls.n	8006620 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	781b      	ldrb	r3, [r3, #0]
 80065e2:	b29b      	uxth	r3, r3
 80065e4:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 80065e6:	e013      	b.n	8006610 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80065e8:	f107 030a 	add.w	r3, r7, #10
 80065ec:	4619      	mov	r1, r3
 80065ee:	6978      	ldr	r0, [r7, #20]
 80065f0:	f000 f81b 	bl	800662a <USBD_GetNextDesc>
 80065f4:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80065f6:	697b      	ldr	r3, [r7, #20]
 80065f8:	785b      	ldrb	r3, [r3, #1]
 80065fa:	2b05      	cmp	r3, #5
 80065fc:	d108      	bne.n	8006610 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 80065fe:	697b      	ldr	r3, [r7, #20]
 8006600:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8006602:	693b      	ldr	r3, [r7, #16]
 8006604:	789b      	ldrb	r3, [r3, #2]
 8006606:	78fa      	ldrb	r2, [r7, #3]
 8006608:	429a      	cmp	r2, r3
 800660a:	d008      	beq.n	800661e <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800660c:	2300      	movs	r3, #0
 800660e:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	885b      	ldrh	r3, [r3, #2]
 8006614:	b29a      	uxth	r2, r3
 8006616:	897b      	ldrh	r3, [r7, #10]
 8006618:	429a      	cmp	r2, r3
 800661a:	d8e5      	bhi.n	80065e8 <USBD_GetEpDesc+0x32>
 800661c:	e000      	b.n	8006620 <USBD_GetEpDesc+0x6a>
          break;
 800661e:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8006620:	693b      	ldr	r3, [r7, #16]
}
 8006622:	4618      	mov	r0, r3
 8006624:	3718      	adds	r7, #24
 8006626:	46bd      	mov	sp, r7
 8006628:	bd80      	pop	{r7, pc}

0800662a <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800662a:	b480      	push	{r7}
 800662c:	b085      	sub	sp, #20
 800662e:	af00      	add	r7, sp, #0
 8006630:	6078      	str	r0, [r7, #4]
 8006632:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8006638:	683b      	ldr	r3, [r7, #0]
 800663a:	881a      	ldrh	r2, [r3, #0]
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	781b      	ldrb	r3, [r3, #0]
 8006640:	b29b      	uxth	r3, r3
 8006642:	4413      	add	r3, r2
 8006644:	b29a      	uxth	r2, r3
 8006646:	683b      	ldr	r3, [r7, #0]
 8006648:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	781b      	ldrb	r3, [r3, #0]
 800664e:	461a      	mov	r2, r3
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	4413      	add	r3, r2
 8006654:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8006656:	68fb      	ldr	r3, [r7, #12]
}
 8006658:	4618      	mov	r0, r3
 800665a:	3714      	adds	r7, #20
 800665c:	46bd      	mov	sp, r7
 800665e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006662:	4770      	bx	lr

08006664 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8006664:	b480      	push	{r7}
 8006666:	b087      	sub	sp, #28
 8006668:	af00      	add	r7, sp, #0
 800666a:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8006670:	697b      	ldr	r3, [r7, #20]
 8006672:	781b      	ldrb	r3, [r3, #0]
 8006674:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8006676:	697b      	ldr	r3, [r7, #20]
 8006678:	3301      	adds	r3, #1
 800667a:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800667c:	697b      	ldr	r3, [r7, #20]
 800667e:	781b      	ldrb	r3, [r3, #0]
 8006680:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8006682:	8a3b      	ldrh	r3, [r7, #16]
 8006684:	021b      	lsls	r3, r3, #8
 8006686:	b21a      	sxth	r2, r3
 8006688:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800668c:	4313      	orrs	r3, r2
 800668e:	b21b      	sxth	r3, r3
 8006690:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8006692:	89fb      	ldrh	r3, [r7, #14]
}
 8006694:	4618      	mov	r0, r3
 8006696:	371c      	adds	r7, #28
 8006698:	46bd      	mov	sp, r7
 800669a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800669e:	4770      	bx	lr

080066a0 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80066a0:	b580      	push	{r7, lr}
 80066a2:	b084      	sub	sp, #16
 80066a4:	af00      	add	r7, sp, #0
 80066a6:	6078      	str	r0, [r7, #4]
 80066a8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80066aa:	2300      	movs	r3, #0
 80066ac:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80066ae:	683b      	ldr	r3, [r7, #0]
 80066b0:	781b      	ldrb	r3, [r3, #0]
 80066b2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80066b6:	2b40      	cmp	r3, #64	; 0x40
 80066b8:	d005      	beq.n	80066c6 <USBD_StdDevReq+0x26>
 80066ba:	2b40      	cmp	r3, #64	; 0x40
 80066bc:	d857      	bhi.n	800676e <USBD_StdDevReq+0xce>
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d00f      	beq.n	80066e2 <USBD_StdDevReq+0x42>
 80066c2:	2b20      	cmp	r3, #32
 80066c4:	d153      	bne.n	800676e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	32ae      	adds	r2, #174	; 0xae
 80066d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80066d4:	689b      	ldr	r3, [r3, #8]
 80066d6:	6839      	ldr	r1, [r7, #0]
 80066d8:	6878      	ldr	r0, [r7, #4]
 80066da:	4798      	blx	r3
 80066dc:	4603      	mov	r3, r0
 80066de:	73fb      	strb	r3, [r7, #15]
      break;
 80066e0:	e04a      	b.n	8006778 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80066e2:	683b      	ldr	r3, [r7, #0]
 80066e4:	785b      	ldrb	r3, [r3, #1]
 80066e6:	2b09      	cmp	r3, #9
 80066e8:	d83b      	bhi.n	8006762 <USBD_StdDevReq+0xc2>
 80066ea:	a201      	add	r2, pc, #4	; (adr r2, 80066f0 <USBD_StdDevReq+0x50>)
 80066ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066f0:	08006745 	.word	0x08006745
 80066f4:	08006759 	.word	0x08006759
 80066f8:	08006763 	.word	0x08006763
 80066fc:	0800674f 	.word	0x0800674f
 8006700:	08006763 	.word	0x08006763
 8006704:	08006723 	.word	0x08006723
 8006708:	08006719 	.word	0x08006719
 800670c:	08006763 	.word	0x08006763
 8006710:	0800673b 	.word	0x0800673b
 8006714:	0800672d 	.word	0x0800672d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006718:	6839      	ldr	r1, [r7, #0]
 800671a:	6878      	ldr	r0, [r7, #4]
 800671c:	f000 fa3c 	bl	8006b98 <USBD_GetDescriptor>
          break;
 8006720:	e024      	b.n	800676c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8006722:	6839      	ldr	r1, [r7, #0]
 8006724:	6878      	ldr	r0, [r7, #4]
 8006726:	f000 fba1 	bl	8006e6c <USBD_SetAddress>
          break;
 800672a:	e01f      	b.n	800676c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800672c:	6839      	ldr	r1, [r7, #0]
 800672e:	6878      	ldr	r0, [r7, #4]
 8006730:	f000 fbe0 	bl	8006ef4 <USBD_SetConfig>
 8006734:	4603      	mov	r3, r0
 8006736:	73fb      	strb	r3, [r7, #15]
          break;
 8006738:	e018      	b.n	800676c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800673a:	6839      	ldr	r1, [r7, #0]
 800673c:	6878      	ldr	r0, [r7, #4]
 800673e:	f000 fc83 	bl	8007048 <USBD_GetConfig>
          break;
 8006742:	e013      	b.n	800676c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006744:	6839      	ldr	r1, [r7, #0]
 8006746:	6878      	ldr	r0, [r7, #4]
 8006748:	f000 fcb4 	bl	80070b4 <USBD_GetStatus>
          break;
 800674c:	e00e      	b.n	800676c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800674e:	6839      	ldr	r1, [r7, #0]
 8006750:	6878      	ldr	r0, [r7, #4]
 8006752:	f000 fce3 	bl	800711c <USBD_SetFeature>
          break;
 8006756:	e009      	b.n	800676c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006758:	6839      	ldr	r1, [r7, #0]
 800675a:	6878      	ldr	r0, [r7, #4]
 800675c:	f000 fd07 	bl	800716e <USBD_ClrFeature>
          break;
 8006760:	e004      	b.n	800676c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8006762:	6839      	ldr	r1, [r7, #0]
 8006764:	6878      	ldr	r0, [r7, #4]
 8006766:	f000 fd5e 	bl	8007226 <USBD_CtlError>
          break;
 800676a:	bf00      	nop
      }
      break;
 800676c:	e004      	b.n	8006778 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800676e:	6839      	ldr	r1, [r7, #0]
 8006770:	6878      	ldr	r0, [r7, #4]
 8006772:	f000 fd58 	bl	8007226 <USBD_CtlError>
      break;
 8006776:	bf00      	nop
  }

  return ret;
 8006778:	7bfb      	ldrb	r3, [r7, #15]
}
 800677a:	4618      	mov	r0, r3
 800677c:	3710      	adds	r7, #16
 800677e:	46bd      	mov	sp, r7
 8006780:	bd80      	pop	{r7, pc}
 8006782:	bf00      	nop

08006784 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006784:	b580      	push	{r7, lr}
 8006786:	b084      	sub	sp, #16
 8006788:	af00      	add	r7, sp, #0
 800678a:	6078      	str	r0, [r7, #4]
 800678c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800678e:	2300      	movs	r3, #0
 8006790:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006792:	683b      	ldr	r3, [r7, #0]
 8006794:	781b      	ldrb	r3, [r3, #0]
 8006796:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800679a:	2b40      	cmp	r3, #64	; 0x40
 800679c:	d005      	beq.n	80067aa <USBD_StdItfReq+0x26>
 800679e:	2b40      	cmp	r3, #64	; 0x40
 80067a0:	d852      	bhi.n	8006848 <USBD_StdItfReq+0xc4>
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d001      	beq.n	80067aa <USBD_StdItfReq+0x26>
 80067a6:	2b20      	cmp	r3, #32
 80067a8:	d14e      	bne.n	8006848 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80067b0:	b2db      	uxtb	r3, r3
 80067b2:	3b01      	subs	r3, #1
 80067b4:	2b02      	cmp	r3, #2
 80067b6:	d840      	bhi.n	800683a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80067b8:	683b      	ldr	r3, [r7, #0]
 80067ba:	889b      	ldrh	r3, [r3, #4]
 80067bc:	b2db      	uxtb	r3, r3
 80067be:	2b01      	cmp	r3, #1
 80067c0:	d836      	bhi.n	8006830 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80067c2:	683b      	ldr	r3, [r7, #0]
 80067c4:	889b      	ldrh	r3, [r3, #4]
 80067c6:	b2db      	uxtb	r3, r3
 80067c8:	4619      	mov	r1, r3
 80067ca:	6878      	ldr	r0, [r7, #4]
 80067cc:	f7ff fed9 	bl	8006582 <USBD_CoreFindIF>
 80067d0:	4603      	mov	r3, r0
 80067d2:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80067d4:	7bbb      	ldrb	r3, [r7, #14]
 80067d6:	2bff      	cmp	r3, #255	; 0xff
 80067d8:	d01d      	beq.n	8006816 <USBD_StdItfReq+0x92>
 80067da:	7bbb      	ldrb	r3, [r7, #14]
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d11a      	bne.n	8006816 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80067e0:	7bba      	ldrb	r2, [r7, #14]
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	32ae      	adds	r2, #174	; 0xae
 80067e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80067ea:	689b      	ldr	r3, [r3, #8]
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d00f      	beq.n	8006810 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80067f0:	7bba      	ldrb	r2, [r7, #14]
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80067f8:	7bba      	ldrb	r2, [r7, #14]
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	32ae      	adds	r2, #174	; 0xae
 80067fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006802:	689b      	ldr	r3, [r3, #8]
 8006804:	6839      	ldr	r1, [r7, #0]
 8006806:	6878      	ldr	r0, [r7, #4]
 8006808:	4798      	blx	r3
 800680a:	4603      	mov	r3, r0
 800680c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800680e:	e004      	b.n	800681a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8006810:	2303      	movs	r3, #3
 8006812:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8006814:	e001      	b.n	800681a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8006816:	2303      	movs	r3, #3
 8006818:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800681a:	683b      	ldr	r3, [r7, #0]
 800681c:	88db      	ldrh	r3, [r3, #6]
 800681e:	2b00      	cmp	r3, #0
 8006820:	d110      	bne.n	8006844 <USBD_StdItfReq+0xc0>
 8006822:	7bfb      	ldrb	r3, [r7, #15]
 8006824:	2b00      	cmp	r3, #0
 8006826:	d10d      	bne.n	8006844 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8006828:	6878      	ldr	r0, [r7, #4]
 800682a:	f000 fdc7 	bl	80073bc <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800682e:	e009      	b.n	8006844 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8006830:	6839      	ldr	r1, [r7, #0]
 8006832:	6878      	ldr	r0, [r7, #4]
 8006834:	f000 fcf7 	bl	8007226 <USBD_CtlError>
          break;
 8006838:	e004      	b.n	8006844 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800683a:	6839      	ldr	r1, [r7, #0]
 800683c:	6878      	ldr	r0, [r7, #4]
 800683e:	f000 fcf2 	bl	8007226 <USBD_CtlError>
          break;
 8006842:	e000      	b.n	8006846 <USBD_StdItfReq+0xc2>
          break;
 8006844:	bf00      	nop
      }
      break;
 8006846:	e004      	b.n	8006852 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8006848:	6839      	ldr	r1, [r7, #0]
 800684a:	6878      	ldr	r0, [r7, #4]
 800684c:	f000 fceb 	bl	8007226 <USBD_CtlError>
      break;
 8006850:	bf00      	nop
  }

  return ret;
 8006852:	7bfb      	ldrb	r3, [r7, #15]
}
 8006854:	4618      	mov	r0, r3
 8006856:	3710      	adds	r7, #16
 8006858:	46bd      	mov	sp, r7
 800685a:	bd80      	pop	{r7, pc}

0800685c <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800685c:	b580      	push	{r7, lr}
 800685e:	b084      	sub	sp, #16
 8006860:	af00      	add	r7, sp, #0
 8006862:	6078      	str	r0, [r7, #4]
 8006864:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8006866:	2300      	movs	r3, #0
 8006868:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800686a:	683b      	ldr	r3, [r7, #0]
 800686c:	889b      	ldrh	r3, [r3, #4]
 800686e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006870:	683b      	ldr	r3, [r7, #0]
 8006872:	781b      	ldrb	r3, [r3, #0]
 8006874:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006878:	2b40      	cmp	r3, #64	; 0x40
 800687a:	d007      	beq.n	800688c <USBD_StdEPReq+0x30>
 800687c:	2b40      	cmp	r3, #64	; 0x40
 800687e:	f200 817f 	bhi.w	8006b80 <USBD_StdEPReq+0x324>
 8006882:	2b00      	cmp	r3, #0
 8006884:	d02a      	beq.n	80068dc <USBD_StdEPReq+0x80>
 8006886:	2b20      	cmp	r3, #32
 8006888:	f040 817a 	bne.w	8006b80 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800688c:	7bbb      	ldrb	r3, [r7, #14]
 800688e:	4619      	mov	r1, r3
 8006890:	6878      	ldr	r0, [r7, #4]
 8006892:	f7ff fe83 	bl	800659c <USBD_CoreFindEP>
 8006896:	4603      	mov	r3, r0
 8006898:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800689a:	7b7b      	ldrb	r3, [r7, #13]
 800689c:	2bff      	cmp	r3, #255	; 0xff
 800689e:	f000 8174 	beq.w	8006b8a <USBD_StdEPReq+0x32e>
 80068a2:	7b7b      	ldrb	r3, [r7, #13]
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	f040 8170 	bne.w	8006b8a <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 80068aa:	7b7a      	ldrb	r2, [r7, #13]
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80068b2:	7b7a      	ldrb	r2, [r7, #13]
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	32ae      	adds	r2, #174	; 0xae
 80068b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80068bc:	689b      	ldr	r3, [r3, #8]
 80068be:	2b00      	cmp	r3, #0
 80068c0:	f000 8163 	beq.w	8006b8a <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80068c4:	7b7a      	ldrb	r2, [r7, #13]
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	32ae      	adds	r2, #174	; 0xae
 80068ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80068ce:	689b      	ldr	r3, [r3, #8]
 80068d0:	6839      	ldr	r1, [r7, #0]
 80068d2:	6878      	ldr	r0, [r7, #4]
 80068d4:	4798      	blx	r3
 80068d6:	4603      	mov	r3, r0
 80068d8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80068da:	e156      	b.n	8006b8a <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80068dc:	683b      	ldr	r3, [r7, #0]
 80068de:	785b      	ldrb	r3, [r3, #1]
 80068e0:	2b03      	cmp	r3, #3
 80068e2:	d008      	beq.n	80068f6 <USBD_StdEPReq+0x9a>
 80068e4:	2b03      	cmp	r3, #3
 80068e6:	f300 8145 	bgt.w	8006b74 <USBD_StdEPReq+0x318>
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	f000 809b 	beq.w	8006a26 <USBD_StdEPReq+0x1ca>
 80068f0:	2b01      	cmp	r3, #1
 80068f2:	d03c      	beq.n	800696e <USBD_StdEPReq+0x112>
 80068f4:	e13e      	b.n	8006b74 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80068fc:	b2db      	uxtb	r3, r3
 80068fe:	2b02      	cmp	r3, #2
 8006900:	d002      	beq.n	8006908 <USBD_StdEPReq+0xac>
 8006902:	2b03      	cmp	r3, #3
 8006904:	d016      	beq.n	8006934 <USBD_StdEPReq+0xd8>
 8006906:	e02c      	b.n	8006962 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006908:	7bbb      	ldrb	r3, [r7, #14]
 800690a:	2b00      	cmp	r3, #0
 800690c:	d00d      	beq.n	800692a <USBD_StdEPReq+0xce>
 800690e:	7bbb      	ldrb	r3, [r7, #14]
 8006910:	2b80      	cmp	r3, #128	; 0x80
 8006912:	d00a      	beq.n	800692a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006914:	7bbb      	ldrb	r3, [r7, #14]
 8006916:	4619      	mov	r1, r3
 8006918:	6878      	ldr	r0, [r7, #4]
 800691a:	f002 f871 	bl	8008a00 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800691e:	2180      	movs	r1, #128	; 0x80
 8006920:	6878      	ldr	r0, [r7, #4]
 8006922:	f002 f86d 	bl	8008a00 <USBD_LL_StallEP>
 8006926:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006928:	e020      	b.n	800696c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800692a:	6839      	ldr	r1, [r7, #0]
 800692c:	6878      	ldr	r0, [r7, #4]
 800692e:	f000 fc7a 	bl	8007226 <USBD_CtlError>
              break;
 8006932:	e01b      	b.n	800696c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006934:	683b      	ldr	r3, [r7, #0]
 8006936:	885b      	ldrh	r3, [r3, #2]
 8006938:	2b00      	cmp	r3, #0
 800693a:	d10e      	bne.n	800695a <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800693c:	7bbb      	ldrb	r3, [r7, #14]
 800693e:	2b00      	cmp	r3, #0
 8006940:	d00b      	beq.n	800695a <USBD_StdEPReq+0xfe>
 8006942:	7bbb      	ldrb	r3, [r7, #14]
 8006944:	2b80      	cmp	r3, #128	; 0x80
 8006946:	d008      	beq.n	800695a <USBD_StdEPReq+0xfe>
 8006948:	683b      	ldr	r3, [r7, #0]
 800694a:	88db      	ldrh	r3, [r3, #6]
 800694c:	2b00      	cmp	r3, #0
 800694e:	d104      	bne.n	800695a <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8006950:	7bbb      	ldrb	r3, [r7, #14]
 8006952:	4619      	mov	r1, r3
 8006954:	6878      	ldr	r0, [r7, #4]
 8006956:	f002 f853 	bl	8008a00 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800695a:	6878      	ldr	r0, [r7, #4]
 800695c:	f000 fd2e 	bl	80073bc <USBD_CtlSendStatus>

              break;
 8006960:	e004      	b.n	800696c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8006962:	6839      	ldr	r1, [r7, #0]
 8006964:	6878      	ldr	r0, [r7, #4]
 8006966:	f000 fc5e 	bl	8007226 <USBD_CtlError>
              break;
 800696a:	bf00      	nop
          }
          break;
 800696c:	e107      	b.n	8006b7e <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006974:	b2db      	uxtb	r3, r3
 8006976:	2b02      	cmp	r3, #2
 8006978:	d002      	beq.n	8006980 <USBD_StdEPReq+0x124>
 800697a:	2b03      	cmp	r3, #3
 800697c:	d016      	beq.n	80069ac <USBD_StdEPReq+0x150>
 800697e:	e04b      	b.n	8006a18 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006980:	7bbb      	ldrb	r3, [r7, #14]
 8006982:	2b00      	cmp	r3, #0
 8006984:	d00d      	beq.n	80069a2 <USBD_StdEPReq+0x146>
 8006986:	7bbb      	ldrb	r3, [r7, #14]
 8006988:	2b80      	cmp	r3, #128	; 0x80
 800698a:	d00a      	beq.n	80069a2 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800698c:	7bbb      	ldrb	r3, [r7, #14]
 800698e:	4619      	mov	r1, r3
 8006990:	6878      	ldr	r0, [r7, #4]
 8006992:	f002 f835 	bl	8008a00 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006996:	2180      	movs	r1, #128	; 0x80
 8006998:	6878      	ldr	r0, [r7, #4]
 800699a:	f002 f831 	bl	8008a00 <USBD_LL_StallEP>
 800699e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80069a0:	e040      	b.n	8006a24 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 80069a2:	6839      	ldr	r1, [r7, #0]
 80069a4:	6878      	ldr	r0, [r7, #4]
 80069a6:	f000 fc3e 	bl	8007226 <USBD_CtlError>
              break;
 80069aa:	e03b      	b.n	8006a24 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80069ac:	683b      	ldr	r3, [r7, #0]
 80069ae:	885b      	ldrh	r3, [r3, #2]
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d136      	bne.n	8006a22 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80069b4:	7bbb      	ldrb	r3, [r7, #14]
 80069b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d004      	beq.n	80069c8 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80069be:	7bbb      	ldrb	r3, [r7, #14]
 80069c0:	4619      	mov	r1, r3
 80069c2:	6878      	ldr	r0, [r7, #4]
 80069c4:	f002 f83b 	bl	8008a3e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80069c8:	6878      	ldr	r0, [r7, #4]
 80069ca:	f000 fcf7 	bl	80073bc <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80069ce:	7bbb      	ldrb	r3, [r7, #14]
 80069d0:	4619      	mov	r1, r3
 80069d2:	6878      	ldr	r0, [r7, #4]
 80069d4:	f7ff fde2 	bl	800659c <USBD_CoreFindEP>
 80069d8:	4603      	mov	r3, r0
 80069da:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80069dc:	7b7b      	ldrb	r3, [r7, #13]
 80069de:	2bff      	cmp	r3, #255	; 0xff
 80069e0:	d01f      	beq.n	8006a22 <USBD_StdEPReq+0x1c6>
 80069e2:	7b7b      	ldrb	r3, [r7, #13]
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d11c      	bne.n	8006a22 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 80069e8:	7b7a      	ldrb	r2, [r7, #13]
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 80069f0:	7b7a      	ldrb	r2, [r7, #13]
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	32ae      	adds	r2, #174	; 0xae
 80069f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80069fa:	689b      	ldr	r3, [r3, #8]
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d010      	beq.n	8006a22 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8006a00:	7b7a      	ldrb	r2, [r7, #13]
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	32ae      	adds	r2, #174	; 0xae
 8006a06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a0a:	689b      	ldr	r3, [r3, #8]
 8006a0c:	6839      	ldr	r1, [r7, #0]
 8006a0e:	6878      	ldr	r0, [r7, #4]
 8006a10:	4798      	blx	r3
 8006a12:	4603      	mov	r3, r0
 8006a14:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8006a16:	e004      	b.n	8006a22 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8006a18:	6839      	ldr	r1, [r7, #0]
 8006a1a:	6878      	ldr	r0, [r7, #4]
 8006a1c:	f000 fc03 	bl	8007226 <USBD_CtlError>
              break;
 8006a20:	e000      	b.n	8006a24 <USBD_StdEPReq+0x1c8>
              break;
 8006a22:	bf00      	nop
          }
          break;
 8006a24:	e0ab      	b.n	8006b7e <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a2c:	b2db      	uxtb	r3, r3
 8006a2e:	2b02      	cmp	r3, #2
 8006a30:	d002      	beq.n	8006a38 <USBD_StdEPReq+0x1dc>
 8006a32:	2b03      	cmp	r3, #3
 8006a34:	d032      	beq.n	8006a9c <USBD_StdEPReq+0x240>
 8006a36:	e097      	b.n	8006b68 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006a38:	7bbb      	ldrb	r3, [r7, #14]
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d007      	beq.n	8006a4e <USBD_StdEPReq+0x1f2>
 8006a3e:	7bbb      	ldrb	r3, [r7, #14]
 8006a40:	2b80      	cmp	r3, #128	; 0x80
 8006a42:	d004      	beq.n	8006a4e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8006a44:	6839      	ldr	r1, [r7, #0]
 8006a46:	6878      	ldr	r0, [r7, #4]
 8006a48:	f000 fbed 	bl	8007226 <USBD_CtlError>
                break;
 8006a4c:	e091      	b.n	8006b72 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006a4e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	da0b      	bge.n	8006a6e <USBD_StdEPReq+0x212>
 8006a56:	7bbb      	ldrb	r3, [r7, #14]
 8006a58:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006a5c:	4613      	mov	r3, r2
 8006a5e:	009b      	lsls	r3, r3, #2
 8006a60:	4413      	add	r3, r2
 8006a62:	009b      	lsls	r3, r3, #2
 8006a64:	3310      	adds	r3, #16
 8006a66:	687a      	ldr	r2, [r7, #4]
 8006a68:	4413      	add	r3, r2
 8006a6a:	3304      	adds	r3, #4
 8006a6c:	e00b      	b.n	8006a86 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006a6e:	7bbb      	ldrb	r3, [r7, #14]
 8006a70:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006a74:	4613      	mov	r3, r2
 8006a76:	009b      	lsls	r3, r3, #2
 8006a78:	4413      	add	r3, r2
 8006a7a:	009b      	lsls	r3, r3, #2
 8006a7c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006a80:	687a      	ldr	r2, [r7, #4]
 8006a82:	4413      	add	r3, r2
 8006a84:	3304      	adds	r3, #4
 8006a86:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8006a88:	68bb      	ldr	r3, [r7, #8]
 8006a8a:	2200      	movs	r2, #0
 8006a8c:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006a8e:	68bb      	ldr	r3, [r7, #8]
 8006a90:	2202      	movs	r2, #2
 8006a92:	4619      	mov	r1, r3
 8006a94:	6878      	ldr	r0, [r7, #4]
 8006a96:	f000 fc37 	bl	8007308 <USBD_CtlSendData>
              break;
 8006a9a:	e06a      	b.n	8006b72 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8006a9c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	da11      	bge.n	8006ac8 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006aa4:	7bbb      	ldrb	r3, [r7, #14]
 8006aa6:	f003 020f 	and.w	r2, r3, #15
 8006aaa:	6879      	ldr	r1, [r7, #4]
 8006aac:	4613      	mov	r3, r2
 8006aae:	009b      	lsls	r3, r3, #2
 8006ab0:	4413      	add	r3, r2
 8006ab2:	009b      	lsls	r3, r3, #2
 8006ab4:	440b      	add	r3, r1
 8006ab6:	3324      	adds	r3, #36	; 0x24
 8006ab8:	881b      	ldrh	r3, [r3, #0]
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d117      	bne.n	8006aee <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8006abe:	6839      	ldr	r1, [r7, #0]
 8006ac0:	6878      	ldr	r0, [r7, #4]
 8006ac2:	f000 fbb0 	bl	8007226 <USBD_CtlError>
                  break;
 8006ac6:	e054      	b.n	8006b72 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006ac8:	7bbb      	ldrb	r3, [r7, #14]
 8006aca:	f003 020f 	and.w	r2, r3, #15
 8006ace:	6879      	ldr	r1, [r7, #4]
 8006ad0:	4613      	mov	r3, r2
 8006ad2:	009b      	lsls	r3, r3, #2
 8006ad4:	4413      	add	r3, r2
 8006ad6:	009b      	lsls	r3, r3, #2
 8006ad8:	440b      	add	r3, r1
 8006ada:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006ade:	881b      	ldrh	r3, [r3, #0]
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d104      	bne.n	8006aee <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8006ae4:	6839      	ldr	r1, [r7, #0]
 8006ae6:	6878      	ldr	r0, [r7, #4]
 8006ae8:	f000 fb9d 	bl	8007226 <USBD_CtlError>
                  break;
 8006aec:	e041      	b.n	8006b72 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006aee:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	da0b      	bge.n	8006b0e <USBD_StdEPReq+0x2b2>
 8006af6:	7bbb      	ldrb	r3, [r7, #14]
 8006af8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006afc:	4613      	mov	r3, r2
 8006afe:	009b      	lsls	r3, r3, #2
 8006b00:	4413      	add	r3, r2
 8006b02:	009b      	lsls	r3, r3, #2
 8006b04:	3310      	adds	r3, #16
 8006b06:	687a      	ldr	r2, [r7, #4]
 8006b08:	4413      	add	r3, r2
 8006b0a:	3304      	adds	r3, #4
 8006b0c:	e00b      	b.n	8006b26 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006b0e:	7bbb      	ldrb	r3, [r7, #14]
 8006b10:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006b14:	4613      	mov	r3, r2
 8006b16:	009b      	lsls	r3, r3, #2
 8006b18:	4413      	add	r3, r2
 8006b1a:	009b      	lsls	r3, r3, #2
 8006b1c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006b20:	687a      	ldr	r2, [r7, #4]
 8006b22:	4413      	add	r3, r2
 8006b24:	3304      	adds	r3, #4
 8006b26:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006b28:	7bbb      	ldrb	r3, [r7, #14]
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d002      	beq.n	8006b34 <USBD_StdEPReq+0x2d8>
 8006b2e:	7bbb      	ldrb	r3, [r7, #14]
 8006b30:	2b80      	cmp	r3, #128	; 0x80
 8006b32:	d103      	bne.n	8006b3c <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8006b34:	68bb      	ldr	r3, [r7, #8]
 8006b36:	2200      	movs	r2, #0
 8006b38:	601a      	str	r2, [r3, #0]
 8006b3a:	e00e      	b.n	8006b5a <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8006b3c:	7bbb      	ldrb	r3, [r7, #14]
 8006b3e:	4619      	mov	r1, r3
 8006b40:	6878      	ldr	r0, [r7, #4]
 8006b42:	f001 ff9b 	bl	8008a7c <USBD_LL_IsStallEP>
 8006b46:	4603      	mov	r3, r0
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d003      	beq.n	8006b54 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8006b4c:	68bb      	ldr	r3, [r7, #8]
 8006b4e:	2201      	movs	r2, #1
 8006b50:	601a      	str	r2, [r3, #0]
 8006b52:	e002      	b.n	8006b5a <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8006b54:	68bb      	ldr	r3, [r7, #8]
 8006b56:	2200      	movs	r2, #0
 8006b58:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006b5a:	68bb      	ldr	r3, [r7, #8]
 8006b5c:	2202      	movs	r2, #2
 8006b5e:	4619      	mov	r1, r3
 8006b60:	6878      	ldr	r0, [r7, #4]
 8006b62:	f000 fbd1 	bl	8007308 <USBD_CtlSendData>
              break;
 8006b66:	e004      	b.n	8006b72 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8006b68:	6839      	ldr	r1, [r7, #0]
 8006b6a:	6878      	ldr	r0, [r7, #4]
 8006b6c:	f000 fb5b 	bl	8007226 <USBD_CtlError>
              break;
 8006b70:	bf00      	nop
          }
          break;
 8006b72:	e004      	b.n	8006b7e <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8006b74:	6839      	ldr	r1, [r7, #0]
 8006b76:	6878      	ldr	r0, [r7, #4]
 8006b78:	f000 fb55 	bl	8007226 <USBD_CtlError>
          break;
 8006b7c:	bf00      	nop
      }
      break;
 8006b7e:	e005      	b.n	8006b8c <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8006b80:	6839      	ldr	r1, [r7, #0]
 8006b82:	6878      	ldr	r0, [r7, #4]
 8006b84:	f000 fb4f 	bl	8007226 <USBD_CtlError>
      break;
 8006b88:	e000      	b.n	8006b8c <USBD_StdEPReq+0x330>
      break;
 8006b8a:	bf00      	nop
  }

  return ret;
 8006b8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b8e:	4618      	mov	r0, r3
 8006b90:	3710      	adds	r7, #16
 8006b92:	46bd      	mov	sp, r7
 8006b94:	bd80      	pop	{r7, pc}
	...

08006b98 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006b98:	b580      	push	{r7, lr}
 8006b9a:	b084      	sub	sp, #16
 8006b9c:	af00      	add	r7, sp, #0
 8006b9e:	6078      	str	r0, [r7, #4]
 8006ba0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006ba2:	2300      	movs	r3, #0
 8006ba4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8006ba6:	2300      	movs	r3, #0
 8006ba8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8006baa:	2300      	movs	r3, #0
 8006bac:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8006bae:	683b      	ldr	r3, [r7, #0]
 8006bb0:	885b      	ldrh	r3, [r3, #2]
 8006bb2:	0a1b      	lsrs	r3, r3, #8
 8006bb4:	b29b      	uxth	r3, r3
 8006bb6:	3b01      	subs	r3, #1
 8006bb8:	2b06      	cmp	r3, #6
 8006bba:	f200 8128 	bhi.w	8006e0e <USBD_GetDescriptor+0x276>
 8006bbe:	a201      	add	r2, pc, #4	; (adr r2, 8006bc4 <USBD_GetDescriptor+0x2c>)
 8006bc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bc4:	08006be1 	.word	0x08006be1
 8006bc8:	08006bf9 	.word	0x08006bf9
 8006bcc:	08006c39 	.word	0x08006c39
 8006bd0:	08006e0f 	.word	0x08006e0f
 8006bd4:	08006e0f 	.word	0x08006e0f
 8006bd8:	08006daf 	.word	0x08006daf
 8006bdc:	08006ddb 	.word	0x08006ddb
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	687a      	ldr	r2, [r7, #4]
 8006bea:	7c12      	ldrb	r2, [r2, #16]
 8006bec:	f107 0108 	add.w	r1, r7, #8
 8006bf0:	4610      	mov	r0, r2
 8006bf2:	4798      	blx	r3
 8006bf4:	60f8      	str	r0, [r7, #12]
      break;
 8006bf6:	e112      	b.n	8006e1e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	7c1b      	ldrb	r3, [r3, #16]
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d10d      	bne.n	8006c1c <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c08:	f107 0208 	add.w	r2, r7, #8
 8006c0c:	4610      	mov	r0, r2
 8006c0e:	4798      	blx	r3
 8006c10:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	3301      	adds	r3, #1
 8006c16:	2202      	movs	r2, #2
 8006c18:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8006c1a:	e100      	b.n	8006e1e <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c24:	f107 0208 	add.w	r2, r7, #8
 8006c28:	4610      	mov	r0, r2
 8006c2a:	4798      	blx	r3
 8006c2c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	3301      	adds	r3, #1
 8006c32:	2202      	movs	r2, #2
 8006c34:	701a      	strb	r2, [r3, #0]
      break;
 8006c36:	e0f2      	b.n	8006e1e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8006c38:	683b      	ldr	r3, [r7, #0]
 8006c3a:	885b      	ldrh	r3, [r3, #2]
 8006c3c:	b2db      	uxtb	r3, r3
 8006c3e:	2b05      	cmp	r3, #5
 8006c40:	f200 80ac 	bhi.w	8006d9c <USBD_GetDescriptor+0x204>
 8006c44:	a201      	add	r2, pc, #4	; (adr r2, 8006c4c <USBD_GetDescriptor+0xb4>)
 8006c46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c4a:	bf00      	nop
 8006c4c:	08006c65 	.word	0x08006c65
 8006c50:	08006c99 	.word	0x08006c99
 8006c54:	08006ccd 	.word	0x08006ccd
 8006c58:	08006d01 	.word	0x08006d01
 8006c5c:	08006d35 	.word	0x08006d35
 8006c60:	08006d69 	.word	0x08006d69
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006c6a:	685b      	ldr	r3, [r3, #4]
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d00b      	beq.n	8006c88 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006c76:	685b      	ldr	r3, [r3, #4]
 8006c78:	687a      	ldr	r2, [r7, #4]
 8006c7a:	7c12      	ldrb	r2, [r2, #16]
 8006c7c:	f107 0108 	add.w	r1, r7, #8
 8006c80:	4610      	mov	r0, r2
 8006c82:	4798      	blx	r3
 8006c84:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006c86:	e091      	b.n	8006dac <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006c88:	6839      	ldr	r1, [r7, #0]
 8006c8a:	6878      	ldr	r0, [r7, #4]
 8006c8c:	f000 facb 	bl	8007226 <USBD_CtlError>
            err++;
 8006c90:	7afb      	ldrb	r3, [r7, #11]
 8006c92:	3301      	adds	r3, #1
 8006c94:	72fb      	strb	r3, [r7, #11]
          break;
 8006c96:	e089      	b.n	8006dac <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006c9e:	689b      	ldr	r3, [r3, #8]
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d00b      	beq.n	8006cbc <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006caa:	689b      	ldr	r3, [r3, #8]
 8006cac:	687a      	ldr	r2, [r7, #4]
 8006cae:	7c12      	ldrb	r2, [r2, #16]
 8006cb0:	f107 0108 	add.w	r1, r7, #8
 8006cb4:	4610      	mov	r0, r2
 8006cb6:	4798      	blx	r3
 8006cb8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006cba:	e077      	b.n	8006dac <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006cbc:	6839      	ldr	r1, [r7, #0]
 8006cbe:	6878      	ldr	r0, [r7, #4]
 8006cc0:	f000 fab1 	bl	8007226 <USBD_CtlError>
            err++;
 8006cc4:	7afb      	ldrb	r3, [r7, #11]
 8006cc6:	3301      	adds	r3, #1
 8006cc8:	72fb      	strb	r3, [r7, #11]
          break;
 8006cca:	e06f      	b.n	8006dac <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006cd2:	68db      	ldr	r3, [r3, #12]
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d00b      	beq.n	8006cf0 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006cde:	68db      	ldr	r3, [r3, #12]
 8006ce0:	687a      	ldr	r2, [r7, #4]
 8006ce2:	7c12      	ldrb	r2, [r2, #16]
 8006ce4:	f107 0108 	add.w	r1, r7, #8
 8006ce8:	4610      	mov	r0, r2
 8006cea:	4798      	blx	r3
 8006cec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006cee:	e05d      	b.n	8006dac <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006cf0:	6839      	ldr	r1, [r7, #0]
 8006cf2:	6878      	ldr	r0, [r7, #4]
 8006cf4:	f000 fa97 	bl	8007226 <USBD_CtlError>
            err++;
 8006cf8:	7afb      	ldrb	r3, [r7, #11]
 8006cfa:	3301      	adds	r3, #1
 8006cfc:	72fb      	strb	r3, [r7, #11]
          break;
 8006cfe:	e055      	b.n	8006dac <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006d06:	691b      	ldr	r3, [r3, #16]
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d00b      	beq.n	8006d24 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006d12:	691b      	ldr	r3, [r3, #16]
 8006d14:	687a      	ldr	r2, [r7, #4]
 8006d16:	7c12      	ldrb	r2, [r2, #16]
 8006d18:	f107 0108 	add.w	r1, r7, #8
 8006d1c:	4610      	mov	r0, r2
 8006d1e:	4798      	blx	r3
 8006d20:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006d22:	e043      	b.n	8006dac <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006d24:	6839      	ldr	r1, [r7, #0]
 8006d26:	6878      	ldr	r0, [r7, #4]
 8006d28:	f000 fa7d 	bl	8007226 <USBD_CtlError>
            err++;
 8006d2c:	7afb      	ldrb	r3, [r7, #11]
 8006d2e:	3301      	adds	r3, #1
 8006d30:	72fb      	strb	r3, [r7, #11]
          break;
 8006d32:	e03b      	b.n	8006dac <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006d3a:	695b      	ldr	r3, [r3, #20]
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d00b      	beq.n	8006d58 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006d46:	695b      	ldr	r3, [r3, #20]
 8006d48:	687a      	ldr	r2, [r7, #4]
 8006d4a:	7c12      	ldrb	r2, [r2, #16]
 8006d4c:	f107 0108 	add.w	r1, r7, #8
 8006d50:	4610      	mov	r0, r2
 8006d52:	4798      	blx	r3
 8006d54:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006d56:	e029      	b.n	8006dac <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006d58:	6839      	ldr	r1, [r7, #0]
 8006d5a:	6878      	ldr	r0, [r7, #4]
 8006d5c:	f000 fa63 	bl	8007226 <USBD_CtlError>
            err++;
 8006d60:	7afb      	ldrb	r3, [r7, #11]
 8006d62:	3301      	adds	r3, #1
 8006d64:	72fb      	strb	r3, [r7, #11]
          break;
 8006d66:	e021      	b.n	8006dac <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006d6e:	699b      	ldr	r3, [r3, #24]
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d00b      	beq.n	8006d8c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006d7a:	699b      	ldr	r3, [r3, #24]
 8006d7c:	687a      	ldr	r2, [r7, #4]
 8006d7e:	7c12      	ldrb	r2, [r2, #16]
 8006d80:	f107 0108 	add.w	r1, r7, #8
 8006d84:	4610      	mov	r0, r2
 8006d86:	4798      	blx	r3
 8006d88:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006d8a:	e00f      	b.n	8006dac <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006d8c:	6839      	ldr	r1, [r7, #0]
 8006d8e:	6878      	ldr	r0, [r7, #4]
 8006d90:	f000 fa49 	bl	8007226 <USBD_CtlError>
            err++;
 8006d94:	7afb      	ldrb	r3, [r7, #11]
 8006d96:	3301      	adds	r3, #1
 8006d98:	72fb      	strb	r3, [r7, #11]
          break;
 8006d9a:	e007      	b.n	8006dac <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8006d9c:	6839      	ldr	r1, [r7, #0]
 8006d9e:	6878      	ldr	r0, [r7, #4]
 8006da0:	f000 fa41 	bl	8007226 <USBD_CtlError>
          err++;
 8006da4:	7afb      	ldrb	r3, [r7, #11]
 8006da6:	3301      	adds	r3, #1
 8006da8:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8006daa:	bf00      	nop
      }
      break;
 8006dac:	e037      	b.n	8006e1e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	7c1b      	ldrb	r3, [r3, #16]
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d109      	bne.n	8006dca <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006dbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006dbe:	f107 0208 	add.w	r2, r7, #8
 8006dc2:	4610      	mov	r0, r2
 8006dc4:	4798      	blx	r3
 8006dc6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006dc8:	e029      	b.n	8006e1e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006dca:	6839      	ldr	r1, [r7, #0]
 8006dcc:	6878      	ldr	r0, [r7, #4]
 8006dce:	f000 fa2a 	bl	8007226 <USBD_CtlError>
        err++;
 8006dd2:	7afb      	ldrb	r3, [r7, #11]
 8006dd4:	3301      	adds	r3, #1
 8006dd6:	72fb      	strb	r3, [r7, #11]
      break;
 8006dd8:	e021      	b.n	8006e1e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	7c1b      	ldrb	r3, [r3, #16]
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d10d      	bne.n	8006dfe <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006dea:	f107 0208 	add.w	r2, r7, #8
 8006dee:	4610      	mov	r0, r2
 8006df0:	4798      	blx	r3
 8006df2:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	3301      	adds	r3, #1
 8006df8:	2207      	movs	r2, #7
 8006dfa:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006dfc:	e00f      	b.n	8006e1e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006dfe:	6839      	ldr	r1, [r7, #0]
 8006e00:	6878      	ldr	r0, [r7, #4]
 8006e02:	f000 fa10 	bl	8007226 <USBD_CtlError>
        err++;
 8006e06:	7afb      	ldrb	r3, [r7, #11]
 8006e08:	3301      	adds	r3, #1
 8006e0a:	72fb      	strb	r3, [r7, #11]
      break;
 8006e0c:	e007      	b.n	8006e1e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8006e0e:	6839      	ldr	r1, [r7, #0]
 8006e10:	6878      	ldr	r0, [r7, #4]
 8006e12:	f000 fa08 	bl	8007226 <USBD_CtlError>
      err++;
 8006e16:	7afb      	ldrb	r3, [r7, #11]
 8006e18:	3301      	adds	r3, #1
 8006e1a:	72fb      	strb	r3, [r7, #11]
      break;
 8006e1c:	bf00      	nop
  }

  if (err != 0U)
 8006e1e:	7afb      	ldrb	r3, [r7, #11]
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d11e      	bne.n	8006e62 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8006e24:	683b      	ldr	r3, [r7, #0]
 8006e26:	88db      	ldrh	r3, [r3, #6]
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d016      	beq.n	8006e5a <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8006e2c:	893b      	ldrh	r3, [r7, #8]
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d00e      	beq.n	8006e50 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8006e32:	683b      	ldr	r3, [r7, #0]
 8006e34:	88da      	ldrh	r2, [r3, #6]
 8006e36:	893b      	ldrh	r3, [r7, #8]
 8006e38:	4293      	cmp	r3, r2
 8006e3a:	bf28      	it	cs
 8006e3c:	4613      	movcs	r3, r2
 8006e3e:	b29b      	uxth	r3, r3
 8006e40:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8006e42:	893b      	ldrh	r3, [r7, #8]
 8006e44:	461a      	mov	r2, r3
 8006e46:	68f9      	ldr	r1, [r7, #12]
 8006e48:	6878      	ldr	r0, [r7, #4]
 8006e4a:	f000 fa5d 	bl	8007308 <USBD_CtlSendData>
 8006e4e:	e009      	b.n	8006e64 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8006e50:	6839      	ldr	r1, [r7, #0]
 8006e52:	6878      	ldr	r0, [r7, #4]
 8006e54:	f000 f9e7 	bl	8007226 <USBD_CtlError>
 8006e58:	e004      	b.n	8006e64 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8006e5a:	6878      	ldr	r0, [r7, #4]
 8006e5c:	f000 faae 	bl	80073bc <USBD_CtlSendStatus>
 8006e60:	e000      	b.n	8006e64 <USBD_GetDescriptor+0x2cc>
    return;
 8006e62:	bf00      	nop
  }
}
 8006e64:	3710      	adds	r7, #16
 8006e66:	46bd      	mov	sp, r7
 8006e68:	bd80      	pop	{r7, pc}
 8006e6a:	bf00      	nop

08006e6c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006e6c:	b580      	push	{r7, lr}
 8006e6e:	b084      	sub	sp, #16
 8006e70:	af00      	add	r7, sp, #0
 8006e72:	6078      	str	r0, [r7, #4]
 8006e74:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8006e76:	683b      	ldr	r3, [r7, #0]
 8006e78:	889b      	ldrh	r3, [r3, #4]
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d131      	bne.n	8006ee2 <USBD_SetAddress+0x76>
 8006e7e:	683b      	ldr	r3, [r7, #0]
 8006e80:	88db      	ldrh	r3, [r3, #6]
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d12d      	bne.n	8006ee2 <USBD_SetAddress+0x76>
 8006e86:	683b      	ldr	r3, [r7, #0]
 8006e88:	885b      	ldrh	r3, [r3, #2]
 8006e8a:	2b7f      	cmp	r3, #127	; 0x7f
 8006e8c:	d829      	bhi.n	8006ee2 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8006e8e:	683b      	ldr	r3, [r7, #0]
 8006e90:	885b      	ldrh	r3, [r3, #2]
 8006e92:	b2db      	uxtb	r3, r3
 8006e94:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006e98:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ea0:	b2db      	uxtb	r3, r3
 8006ea2:	2b03      	cmp	r3, #3
 8006ea4:	d104      	bne.n	8006eb0 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8006ea6:	6839      	ldr	r1, [r7, #0]
 8006ea8:	6878      	ldr	r0, [r7, #4]
 8006eaa:	f000 f9bc 	bl	8007226 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006eae:	e01d      	b.n	8006eec <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	7bfa      	ldrb	r2, [r7, #15]
 8006eb4:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006eb8:	7bfb      	ldrb	r3, [r7, #15]
 8006eba:	4619      	mov	r1, r3
 8006ebc:	6878      	ldr	r0, [r7, #4]
 8006ebe:	f001 fe09 	bl	8008ad4 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8006ec2:	6878      	ldr	r0, [r7, #4]
 8006ec4:	f000 fa7a 	bl	80073bc <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8006ec8:	7bfb      	ldrb	r3, [r7, #15]
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d004      	beq.n	8006ed8 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	2202      	movs	r2, #2
 8006ed2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006ed6:	e009      	b.n	8006eec <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	2201      	movs	r2, #1
 8006edc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006ee0:	e004      	b.n	8006eec <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8006ee2:	6839      	ldr	r1, [r7, #0]
 8006ee4:	6878      	ldr	r0, [r7, #4]
 8006ee6:	f000 f99e 	bl	8007226 <USBD_CtlError>
  }
}
 8006eea:	bf00      	nop
 8006eec:	bf00      	nop
 8006eee:	3710      	adds	r7, #16
 8006ef0:	46bd      	mov	sp, r7
 8006ef2:	bd80      	pop	{r7, pc}

08006ef4 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006ef4:	b580      	push	{r7, lr}
 8006ef6:	b084      	sub	sp, #16
 8006ef8:	af00      	add	r7, sp, #0
 8006efa:	6078      	str	r0, [r7, #4]
 8006efc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006efe:	2300      	movs	r3, #0
 8006f00:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8006f02:	683b      	ldr	r3, [r7, #0]
 8006f04:	885b      	ldrh	r3, [r3, #2]
 8006f06:	b2da      	uxtb	r2, r3
 8006f08:	4b4e      	ldr	r3, [pc, #312]	; (8007044 <USBD_SetConfig+0x150>)
 8006f0a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006f0c:	4b4d      	ldr	r3, [pc, #308]	; (8007044 <USBD_SetConfig+0x150>)
 8006f0e:	781b      	ldrb	r3, [r3, #0]
 8006f10:	2b01      	cmp	r3, #1
 8006f12:	d905      	bls.n	8006f20 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8006f14:	6839      	ldr	r1, [r7, #0]
 8006f16:	6878      	ldr	r0, [r7, #4]
 8006f18:	f000 f985 	bl	8007226 <USBD_CtlError>
    return USBD_FAIL;
 8006f1c:	2303      	movs	r3, #3
 8006f1e:	e08c      	b.n	800703a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f26:	b2db      	uxtb	r3, r3
 8006f28:	2b02      	cmp	r3, #2
 8006f2a:	d002      	beq.n	8006f32 <USBD_SetConfig+0x3e>
 8006f2c:	2b03      	cmp	r3, #3
 8006f2e:	d029      	beq.n	8006f84 <USBD_SetConfig+0x90>
 8006f30:	e075      	b.n	800701e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8006f32:	4b44      	ldr	r3, [pc, #272]	; (8007044 <USBD_SetConfig+0x150>)
 8006f34:	781b      	ldrb	r3, [r3, #0]
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d020      	beq.n	8006f7c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8006f3a:	4b42      	ldr	r3, [pc, #264]	; (8007044 <USBD_SetConfig+0x150>)
 8006f3c:	781b      	ldrb	r3, [r3, #0]
 8006f3e:	461a      	mov	r2, r3
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006f44:	4b3f      	ldr	r3, [pc, #252]	; (8007044 <USBD_SetConfig+0x150>)
 8006f46:	781b      	ldrb	r3, [r3, #0]
 8006f48:	4619      	mov	r1, r3
 8006f4a:	6878      	ldr	r0, [r7, #4]
 8006f4c:	f7fe ffe7 	bl	8005f1e <USBD_SetClassConfig>
 8006f50:	4603      	mov	r3, r0
 8006f52:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8006f54:	7bfb      	ldrb	r3, [r7, #15]
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d008      	beq.n	8006f6c <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8006f5a:	6839      	ldr	r1, [r7, #0]
 8006f5c:	6878      	ldr	r0, [r7, #4]
 8006f5e:	f000 f962 	bl	8007226 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	2202      	movs	r2, #2
 8006f66:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006f6a:	e065      	b.n	8007038 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8006f6c:	6878      	ldr	r0, [r7, #4]
 8006f6e:	f000 fa25 	bl	80073bc <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	2203      	movs	r2, #3
 8006f76:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8006f7a:	e05d      	b.n	8007038 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8006f7c:	6878      	ldr	r0, [r7, #4]
 8006f7e:	f000 fa1d 	bl	80073bc <USBD_CtlSendStatus>
      break;
 8006f82:	e059      	b.n	8007038 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8006f84:	4b2f      	ldr	r3, [pc, #188]	; (8007044 <USBD_SetConfig+0x150>)
 8006f86:	781b      	ldrb	r3, [r3, #0]
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d112      	bne.n	8006fb2 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	2202      	movs	r2, #2
 8006f90:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8006f94:	4b2b      	ldr	r3, [pc, #172]	; (8007044 <USBD_SetConfig+0x150>)
 8006f96:	781b      	ldrb	r3, [r3, #0]
 8006f98:	461a      	mov	r2, r3
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006f9e:	4b29      	ldr	r3, [pc, #164]	; (8007044 <USBD_SetConfig+0x150>)
 8006fa0:	781b      	ldrb	r3, [r3, #0]
 8006fa2:	4619      	mov	r1, r3
 8006fa4:	6878      	ldr	r0, [r7, #4]
 8006fa6:	f7fe ffd6 	bl	8005f56 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8006faa:	6878      	ldr	r0, [r7, #4]
 8006fac:	f000 fa06 	bl	80073bc <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006fb0:	e042      	b.n	8007038 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8006fb2:	4b24      	ldr	r3, [pc, #144]	; (8007044 <USBD_SetConfig+0x150>)
 8006fb4:	781b      	ldrb	r3, [r3, #0]
 8006fb6:	461a      	mov	r2, r3
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	685b      	ldr	r3, [r3, #4]
 8006fbc:	429a      	cmp	r2, r3
 8006fbe:	d02a      	beq.n	8007016 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	685b      	ldr	r3, [r3, #4]
 8006fc4:	b2db      	uxtb	r3, r3
 8006fc6:	4619      	mov	r1, r3
 8006fc8:	6878      	ldr	r0, [r7, #4]
 8006fca:	f7fe ffc4 	bl	8005f56 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8006fce:	4b1d      	ldr	r3, [pc, #116]	; (8007044 <USBD_SetConfig+0x150>)
 8006fd0:	781b      	ldrb	r3, [r3, #0]
 8006fd2:	461a      	mov	r2, r3
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006fd8:	4b1a      	ldr	r3, [pc, #104]	; (8007044 <USBD_SetConfig+0x150>)
 8006fda:	781b      	ldrb	r3, [r3, #0]
 8006fdc:	4619      	mov	r1, r3
 8006fde:	6878      	ldr	r0, [r7, #4]
 8006fe0:	f7fe ff9d 	bl	8005f1e <USBD_SetClassConfig>
 8006fe4:	4603      	mov	r3, r0
 8006fe6:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8006fe8:	7bfb      	ldrb	r3, [r7, #15]
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d00f      	beq.n	800700e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8006fee:	6839      	ldr	r1, [r7, #0]
 8006ff0:	6878      	ldr	r0, [r7, #4]
 8006ff2:	f000 f918 	bl	8007226 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	685b      	ldr	r3, [r3, #4]
 8006ffa:	b2db      	uxtb	r3, r3
 8006ffc:	4619      	mov	r1, r3
 8006ffe:	6878      	ldr	r0, [r7, #4]
 8007000:	f7fe ffa9 	bl	8005f56 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	2202      	movs	r2, #2
 8007008:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800700c:	e014      	b.n	8007038 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800700e:	6878      	ldr	r0, [r7, #4]
 8007010:	f000 f9d4 	bl	80073bc <USBD_CtlSendStatus>
      break;
 8007014:	e010      	b.n	8007038 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8007016:	6878      	ldr	r0, [r7, #4]
 8007018:	f000 f9d0 	bl	80073bc <USBD_CtlSendStatus>
      break;
 800701c:	e00c      	b.n	8007038 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800701e:	6839      	ldr	r1, [r7, #0]
 8007020:	6878      	ldr	r0, [r7, #4]
 8007022:	f000 f900 	bl	8007226 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007026:	4b07      	ldr	r3, [pc, #28]	; (8007044 <USBD_SetConfig+0x150>)
 8007028:	781b      	ldrb	r3, [r3, #0]
 800702a:	4619      	mov	r1, r3
 800702c:	6878      	ldr	r0, [r7, #4]
 800702e:	f7fe ff92 	bl	8005f56 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8007032:	2303      	movs	r3, #3
 8007034:	73fb      	strb	r3, [r7, #15]
      break;
 8007036:	bf00      	nop
  }

  return ret;
 8007038:	7bfb      	ldrb	r3, [r7, #15]
}
 800703a:	4618      	mov	r0, r3
 800703c:	3710      	adds	r7, #16
 800703e:	46bd      	mov	sp, r7
 8007040:	bd80      	pop	{r7, pc}
 8007042:	bf00      	nop
 8007044:	20000248 	.word	0x20000248

08007048 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007048:	b580      	push	{r7, lr}
 800704a:	b082      	sub	sp, #8
 800704c:	af00      	add	r7, sp, #0
 800704e:	6078      	str	r0, [r7, #4]
 8007050:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007052:	683b      	ldr	r3, [r7, #0]
 8007054:	88db      	ldrh	r3, [r3, #6]
 8007056:	2b01      	cmp	r3, #1
 8007058:	d004      	beq.n	8007064 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800705a:	6839      	ldr	r1, [r7, #0]
 800705c:	6878      	ldr	r0, [r7, #4]
 800705e:	f000 f8e2 	bl	8007226 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007062:	e023      	b.n	80070ac <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800706a:	b2db      	uxtb	r3, r3
 800706c:	2b02      	cmp	r3, #2
 800706e:	dc02      	bgt.n	8007076 <USBD_GetConfig+0x2e>
 8007070:	2b00      	cmp	r3, #0
 8007072:	dc03      	bgt.n	800707c <USBD_GetConfig+0x34>
 8007074:	e015      	b.n	80070a2 <USBD_GetConfig+0x5a>
 8007076:	2b03      	cmp	r3, #3
 8007078:	d00b      	beq.n	8007092 <USBD_GetConfig+0x4a>
 800707a:	e012      	b.n	80070a2 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	2200      	movs	r2, #0
 8007080:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	3308      	adds	r3, #8
 8007086:	2201      	movs	r2, #1
 8007088:	4619      	mov	r1, r3
 800708a:	6878      	ldr	r0, [r7, #4]
 800708c:	f000 f93c 	bl	8007308 <USBD_CtlSendData>
        break;
 8007090:	e00c      	b.n	80070ac <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	3304      	adds	r3, #4
 8007096:	2201      	movs	r2, #1
 8007098:	4619      	mov	r1, r3
 800709a:	6878      	ldr	r0, [r7, #4]
 800709c:	f000 f934 	bl	8007308 <USBD_CtlSendData>
        break;
 80070a0:	e004      	b.n	80070ac <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80070a2:	6839      	ldr	r1, [r7, #0]
 80070a4:	6878      	ldr	r0, [r7, #4]
 80070a6:	f000 f8be 	bl	8007226 <USBD_CtlError>
        break;
 80070aa:	bf00      	nop
}
 80070ac:	bf00      	nop
 80070ae:	3708      	adds	r7, #8
 80070b0:	46bd      	mov	sp, r7
 80070b2:	bd80      	pop	{r7, pc}

080070b4 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80070b4:	b580      	push	{r7, lr}
 80070b6:	b082      	sub	sp, #8
 80070b8:	af00      	add	r7, sp, #0
 80070ba:	6078      	str	r0, [r7, #4]
 80070bc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80070c4:	b2db      	uxtb	r3, r3
 80070c6:	3b01      	subs	r3, #1
 80070c8:	2b02      	cmp	r3, #2
 80070ca:	d81e      	bhi.n	800710a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80070cc:	683b      	ldr	r3, [r7, #0]
 80070ce:	88db      	ldrh	r3, [r3, #6]
 80070d0:	2b02      	cmp	r3, #2
 80070d2:	d004      	beq.n	80070de <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80070d4:	6839      	ldr	r1, [r7, #0]
 80070d6:	6878      	ldr	r0, [r7, #4]
 80070d8:	f000 f8a5 	bl	8007226 <USBD_CtlError>
        break;
 80070dc:	e01a      	b.n	8007114 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	2201      	movs	r2, #1
 80070e2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d005      	beq.n	80070fa <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	68db      	ldr	r3, [r3, #12]
 80070f2:	f043 0202 	orr.w	r2, r3, #2
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	330c      	adds	r3, #12
 80070fe:	2202      	movs	r2, #2
 8007100:	4619      	mov	r1, r3
 8007102:	6878      	ldr	r0, [r7, #4]
 8007104:	f000 f900 	bl	8007308 <USBD_CtlSendData>
      break;
 8007108:	e004      	b.n	8007114 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800710a:	6839      	ldr	r1, [r7, #0]
 800710c:	6878      	ldr	r0, [r7, #4]
 800710e:	f000 f88a 	bl	8007226 <USBD_CtlError>
      break;
 8007112:	bf00      	nop
  }
}
 8007114:	bf00      	nop
 8007116:	3708      	adds	r7, #8
 8007118:	46bd      	mov	sp, r7
 800711a:	bd80      	pop	{r7, pc}

0800711c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800711c:	b580      	push	{r7, lr}
 800711e:	b082      	sub	sp, #8
 8007120:	af00      	add	r7, sp, #0
 8007122:	6078      	str	r0, [r7, #4]
 8007124:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007126:	683b      	ldr	r3, [r7, #0]
 8007128:	885b      	ldrh	r3, [r3, #2]
 800712a:	2b01      	cmp	r3, #1
 800712c:	d107      	bne.n	800713e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	2201      	movs	r2, #1
 8007132:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8007136:	6878      	ldr	r0, [r7, #4]
 8007138:	f000 f940 	bl	80073bc <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800713c:	e013      	b.n	8007166 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800713e:	683b      	ldr	r3, [r7, #0]
 8007140:	885b      	ldrh	r3, [r3, #2]
 8007142:	2b02      	cmp	r3, #2
 8007144:	d10b      	bne.n	800715e <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 8007146:	683b      	ldr	r3, [r7, #0]
 8007148:	889b      	ldrh	r3, [r3, #4]
 800714a:	0a1b      	lsrs	r3, r3, #8
 800714c:	b29b      	uxth	r3, r3
 800714e:	b2da      	uxtb	r2, r3
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8007156:	6878      	ldr	r0, [r7, #4]
 8007158:	f000 f930 	bl	80073bc <USBD_CtlSendStatus>
}
 800715c:	e003      	b.n	8007166 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800715e:	6839      	ldr	r1, [r7, #0]
 8007160:	6878      	ldr	r0, [r7, #4]
 8007162:	f000 f860 	bl	8007226 <USBD_CtlError>
}
 8007166:	bf00      	nop
 8007168:	3708      	adds	r7, #8
 800716a:	46bd      	mov	sp, r7
 800716c:	bd80      	pop	{r7, pc}

0800716e <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800716e:	b580      	push	{r7, lr}
 8007170:	b082      	sub	sp, #8
 8007172:	af00      	add	r7, sp, #0
 8007174:	6078      	str	r0, [r7, #4]
 8007176:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800717e:	b2db      	uxtb	r3, r3
 8007180:	3b01      	subs	r3, #1
 8007182:	2b02      	cmp	r3, #2
 8007184:	d80b      	bhi.n	800719e <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007186:	683b      	ldr	r3, [r7, #0]
 8007188:	885b      	ldrh	r3, [r3, #2]
 800718a:	2b01      	cmp	r3, #1
 800718c:	d10c      	bne.n	80071a8 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	2200      	movs	r2, #0
 8007192:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8007196:	6878      	ldr	r0, [r7, #4]
 8007198:	f000 f910 	bl	80073bc <USBD_CtlSendStatus>
      }
      break;
 800719c:	e004      	b.n	80071a8 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800719e:	6839      	ldr	r1, [r7, #0]
 80071a0:	6878      	ldr	r0, [r7, #4]
 80071a2:	f000 f840 	bl	8007226 <USBD_CtlError>
      break;
 80071a6:	e000      	b.n	80071aa <USBD_ClrFeature+0x3c>
      break;
 80071a8:	bf00      	nop
  }
}
 80071aa:	bf00      	nop
 80071ac:	3708      	adds	r7, #8
 80071ae:	46bd      	mov	sp, r7
 80071b0:	bd80      	pop	{r7, pc}

080071b2 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80071b2:	b580      	push	{r7, lr}
 80071b4:	b084      	sub	sp, #16
 80071b6:	af00      	add	r7, sp, #0
 80071b8:	6078      	str	r0, [r7, #4]
 80071ba:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80071bc:	683b      	ldr	r3, [r7, #0]
 80071be:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	781a      	ldrb	r2, [r3, #0]
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	3301      	adds	r3, #1
 80071cc:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	781a      	ldrb	r2, [r3, #0]
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	3301      	adds	r3, #1
 80071da:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80071dc:	68f8      	ldr	r0, [r7, #12]
 80071de:	f7ff fa41 	bl	8006664 <SWAPBYTE>
 80071e2:	4603      	mov	r3, r0
 80071e4:	461a      	mov	r2, r3
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	3301      	adds	r3, #1
 80071ee:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	3301      	adds	r3, #1
 80071f4:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80071f6:	68f8      	ldr	r0, [r7, #12]
 80071f8:	f7ff fa34 	bl	8006664 <SWAPBYTE>
 80071fc:	4603      	mov	r3, r0
 80071fe:	461a      	mov	r2, r3
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	3301      	adds	r3, #1
 8007208:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	3301      	adds	r3, #1
 800720e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8007210:	68f8      	ldr	r0, [r7, #12]
 8007212:	f7ff fa27 	bl	8006664 <SWAPBYTE>
 8007216:	4603      	mov	r3, r0
 8007218:	461a      	mov	r2, r3
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	80da      	strh	r2, [r3, #6]
}
 800721e:	bf00      	nop
 8007220:	3710      	adds	r7, #16
 8007222:	46bd      	mov	sp, r7
 8007224:	bd80      	pop	{r7, pc}

08007226 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007226:	b580      	push	{r7, lr}
 8007228:	b082      	sub	sp, #8
 800722a:	af00      	add	r7, sp, #0
 800722c:	6078      	str	r0, [r7, #4]
 800722e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8007230:	2180      	movs	r1, #128	; 0x80
 8007232:	6878      	ldr	r0, [r7, #4]
 8007234:	f001 fbe4 	bl	8008a00 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8007238:	2100      	movs	r1, #0
 800723a:	6878      	ldr	r0, [r7, #4]
 800723c:	f001 fbe0 	bl	8008a00 <USBD_LL_StallEP>
}
 8007240:	bf00      	nop
 8007242:	3708      	adds	r7, #8
 8007244:	46bd      	mov	sp, r7
 8007246:	bd80      	pop	{r7, pc}

08007248 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007248:	b580      	push	{r7, lr}
 800724a:	b086      	sub	sp, #24
 800724c:	af00      	add	r7, sp, #0
 800724e:	60f8      	str	r0, [r7, #12]
 8007250:	60b9      	str	r1, [r7, #8]
 8007252:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007254:	2300      	movs	r3, #0
 8007256:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	2b00      	cmp	r3, #0
 800725c:	d036      	beq.n	80072cc <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8007262:	6938      	ldr	r0, [r7, #16]
 8007264:	f000 f836 	bl	80072d4 <USBD_GetLen>
 8007268:	4603      	mov	r3, r0
 800726a:	3301      	adds	r3, #1
 800726c:	b29b      	uxth	r3, r3
 800726e:	005b      	lsls	r3, r3, #1
 8007270:	b29a      	uxth	r2, r3
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8007276:	7dfb      	ldrb	r3, [r7, #23]
 8007278:	68ba      	ldr	r2, [r7, #8]
 800727a:	4413      	add	r3, r2
 800727c:	687a      	ldr	r2, [r7, #4]
 800727e:	7812      	ldrb	r2, [r2, #0]
 8007280:	701a      	strb	r2, [r3, #0]
  idx++;
 8007282:	7dfb      	ldrb	r3, [r7, #23]
 8007284:	3301      	adds	r3, #1
 8007286:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8007288:	7dfb      	ldrb	r3, [r7, #23]
 800728a:	68ba      	ldr	r2, [r7, #8]
 800728c:	4413      	add	r3, r2
 800728e:	2203      	movs	r2, #3
 8007290:	701a      	strb	r2, [r3, #0]
  idx++;
 8007292:	7dfb      	ldrb	r3, [r7, #23]
 8007294:	3301      	adds	r3, #1
 8007296:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8007298:	e013      	b.n	80072c2 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800729a:	7dfb      	ldrb	r3, [r7, #23]
 800729c:	68ba      	ldr	r2, [r7, #8]
 800729e:	4413      	add	r3, r2
 80072a0:	693a      	ldr	r2, [r7, #16]
 80072a2:	7812      	ldrb	r2, [r2, #0]
 80072a4:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80072a6:	693b      	ldr	r3, [r7, #16]
 80072a8:	3301      	adds	r3, #1
 80072aa:	613b      	str	r3, [r7, #16]
    idx++;
 80072ac:	7dfb      	ldrb	r3, [r7, #23]
 80072ae:	3301      	adds	r3, #1
 80072b0:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80072b2:	7dfb      	ldrb	r3, [r7, #23]
 80072b4:	68ba      	ldr	r2, [r7, #8]
 80072b6:	4413      	add	r3, r2
 80072b8:	2200      	movs	r2, #0
 80072ba:	701a      	strb	r2, [r3, #0]
    idx++;
 80072bc:	7dfb      	ldrb	r3, [r7, #23]
 80072be:	3301      	adds	r3, #1
 80072c0:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80072c2:	693b      	ldr	r3, [r7, #16]
 80072c4:	781b      	ldrb	r3, [r3, #0]
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d1e7      	bne.n	800729a <USBD_GetString+0x52>
 80072ca:	e000      	b.n	80072ce <USBD_GetString+0x86>
    return;
 80072cc:	bf00      	nop
  }
}
 80072ce:	3718      	adds	r7, #24
 80072d0:	46bd      	mov	sp, r7
 80072d2:	bd80      	pop	{r7, pc}

080072d4 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80072d4:	b480      	push	{r7}
 80072d6:	b085      	sub	sp, #20
 80072d8:	af00      	add	r7, sp, #0
 80072da:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80072dc:	2300      	movs	r3, #0
 80072de:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80072e4:	e005      	b.n	80072f2 <USBD_GetLen+0x1e>
  {
    len++;
 80072e6:	7bfb      	ldrb	r3, [r7, #15]
 80072e8:	3301      	adds	r3, #1
 80072ea:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80072ec:	68bb      	ldr	r3, [r7, #8]
 80072ee:	3301      	adds	r3, #1
 80072f0:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80072f2:	68bb      	ldr	r3, [r7, #8]
 80072f4:	781b      	ldrb	r3, [r3, #0]
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d1f5      	bne.n	80072e6 <USBD_GetLen+0x12>
  }

  return len;
 80072fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80072fc:	4618      	mov	r0, r3
 80072fe:	3714      	adds	r7, #20
 8007300:	46bd      	mov	sp, r7
 8007302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007306:	4770      	bx	lr

08007308 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8007308:	b580      	push	{r7, lr}
 800730a:	b084      	sub	sp, #16
 800730c:	af00      	add	r7, sp, #0
 800730e:	60f8      	str	r0, [r7, #12]
 8007310:	60b9      	str	r1, [r7, #8]
 8007312:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	2202      	movs	r2, #2
 8007318:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	687a      	ldr	r2, [r7, #4]
 8007320:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	687a      	ldr	r2, [r7, #4]
 8007326:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	68ba      	ldr	r2, [r7, #8]
 800732c:	2100      	movs	r1, #0
 800732e:	68f8      	ldr	r0, [r7, #12]
 8007330:	f001 fbef 	bl	8008b12 <USBD_LL_Transmit>

  return USBD_OK;
 8007334:	2300      	movs	r3, #0
}
 8007336:	4618      	mov	r0, r3
 8007338:	3710      	adds	r7, #16
 800733a:	46bd      	mov	sp, r7
 800733c:	bd80      	pop	{r7, pc}

0800733e <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800733e:	b580      	push	{r7, lr}
 8007340:	b084      	sub	sp, #16
 8007342:	af00      	add	r7, sp, #0
 8007344:	60f8      	str	r0, [r7, #12]
 8007346:	60b9      	str	r1, [r7, #8]
 8007348:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	68ba      	ldr	r2, [r7, #8]
 800734e:	2100      	movs	r1, #0
 8007350:	68f8      	ldr	r0, [r7, #12]
 8007352:	f001 fbde 	bl	8008b12 <USBD_LL_Transmit>

  return USBD_OK;
 8007356:	2300      	movs	r3, #0
}
 8007358:	4618      	mov	r0, r3
 800735a:	3710      	adds	r7, #16
 800735c:	46bd      	mov	sp, r7
 800735e:	bd80      	pop	{r7, pc}

08007360 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8007360:	b580      	push	{r7, lr}
 8007362:	b084      	sub	sp, #16
 8007364:	af00      	add	r7, sp, #0
 8007366:	60f8      	str	r0, [r7, #12]
 8007368:	60b9      	str	r1, [r7, #8]
 800736a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	2203      	movs	r2, #3
 8007370:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	687a      	ldr	r2, [r7, #4]
 8007378:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	687a      	ldr	r2, [r7, #4]
 8007380:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	68ba      	ldr	r2, [r7, #8]
 8007388:	2100      	movs	r1, #0
 800738a:	68f8      	ldr	r0, [r7, #12]
 800738c:	f001 fbe2 	bl	8008b54 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007390:	2300      	movs	r3, #0
}
 8007392:	4618      	mov	r0, r3
 8007394:	3710      	adds	r7, #16
 8007396:	46bd      	mov	sp, r7
 8007398:	bd80      	pop	{r7, pc}

0800739a <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800739a:	b580      	push	{r7, lr}
 800739c:	b084      	sub	sp, #16
 800739e:	af00      	add	r7, sp, #0
 80073a0:	60f8      	str	r0, [r7, #12]
 80073a2:	60b9      	str	r1, [r7, #8]
 80073a4:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	68ba      	ldr	r2, [r7, #8]
 80073aa:	2100      	movs	r1, #0
 80073ac:	68f8      	ldr	r0, [r7, #12]
 80073ae:	f001 fbd1 	bl	8008b54 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80073b2:	2300      	movs	r3, #0
}
 80073b4:	4618      	mov	r0, r3
 80073b6:	3710      	adds	r7, #16
 80073b8:	46bd      	mov	sp, r7
 80073ba:	bd80      	pop	{r7, pc}

080073bc <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80073bc:	b580      	push	{r7, lr}
 80073be:	b082      	sub	sp, #8
 80073c0:	af00      	add	r7, sp, #0
 80073c2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	2204      	movs	r2, #4
 80073c8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80073cc:	2300      	movs	r3, #0
 80073ce:	2200      	movs	r2, #0
 80073d0:	2100      	movs	r1, #0
 80073d2:	6878      	ldr	r0, [r7, #4]
 80073d4:	f001 fb9d 	bl	8008b12 <USBD_LL_Transmit>

  return USBD_OK;
 80073d8:	2300      	movs	r3, #0
}
 80073da:	4618      	mov	r0, r3
 80073dc:	3708      	adds	r7, #8
 80073de:	46bd      	mov	sp, r7
 80073e0:	bd80      	pop	{r7, pc}

080073e2 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80073e2:	b580      	push	{r7, lr}
 80073e4:	b082      	sub	sp, #8
 80073e6:	af00      	add	r7, sp, #0
 80073e8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	2205      	movs	r2, #5
 80073ee:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80073f2:	2300      	movs	r3, #0
 80073f4:	2200      	movs	r2, #0
 80073f6:	2100      	movs	r1, #0
 80073f8:	6878      	ldr	r0, [r7, #4]
 80073fa:	f001 fbab 	bl	8008b54 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80073fe:	2300      	movs	r3, #0
}
 8007400:	4618      	mov	r0, r3
 8007402:	3708      	adds	r7, #8
 8007404:	46bd      	mov	sp, r7
 8007406:	bd80      	pop	{r7, pc}

08007408 <NixiBusInit>:
 *******************************************************************************
 *******************************************************************************/

static inline void NixiBusInit( I2C_HandleTypeDef I2C_Handle,
								USBD_HandleTypeDef *pdev)
{
 8007408:	b084      	sub	sp, #16
 800740a:	b580      	push	{r7, lr}
 800740c:	b084      	sub	sp, #16
 800740e:	af02      	add	r7, sp, #8
 8007410:	f107 0c10 	add.w	ip, r7, #16
 8007414:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	NixieBus = I2C_Handle;
 8007418:	4b74      	ldr	r3, [pc, #464]	; (80075ec <NixiBusInit+0x1e4>)
 800741a:	4618      	mov	r0, r3
 800741c:	f107 0310 	add.w	r3, r7, #16
 8007420:	2254      	movs	r2, #84	; 0x54
 8007422:	4619      	mov	r1, r3
 8007424:	f001 fd72 	bl	8008f0c <memcpy>



#ifdef superUserMode
	superUserBus = pdev;
 8007428:	4a71      	ldr	r2, [pc, #452]	; (80075f0 <NixiBusInit+0x1e8>)
 800742a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800742c:	6013      	str	r3, [r2, #0]
#endif  //superUserMode

	I2C_Buffer[0] = CommandRegisterWriteLock;
 800742e:	4b71      	ldr	r3, [pc, #452]	; (80075f4 <NixiBusInit+0x1ec>)
 8007430:	22fe      	movs	r2, #254	; 0xfe
 8007432:	701a      	strb	r2, [r3, #0]
	I2C_Buffer[1] = CommandRegisterWriteUnlock;
 8007434:	4b6f      	ldr	r3, [pc, #444]	; (80075f4 <NixiBusInit+0x1ec>)
 8007436:	22c5      	movs	r2, #197	; 0xc5
 8007438:	705a      	strb	r2, [r3, #1]
	HAL_I2C_Master_Transmit(&NixieBus, Nixie_ID_LeftLeft, I2C_Buffer, 2, 1000);
 800743a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800743e:	9300      	str	r3, [sp, #0]
 8007440:	2302      	movs	r3, #2
 8007442:	4a6c      	ldr	r2, [pc, #432]	; (80075f4 <NixiBusInit+0x1ec>)
 8007444:	2146      	movs	r1, #70	; 0x46
 8007446:	4869      	ldr	r0, [pc, #420]	; (80075ec <NixiBusInit+0x1e4>)
 8007448:	f7f9 fd58 	bl	8000efc <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Transmit(&NixieBus, Nixie_ID_LeftRight, I2C_Buffer, 2, 1000);
 800744c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007450:	9300      	str	r3, [sp, #0]
 8007452:	2302      	movs	r3, #2
 8007454:	4a67      	ldr	r2, [pc, #412]	; (80075f4 <NixiBusInit+0x1ec>)
 8007456:	215e      	movs	r1, #94	; 0x5e
 8007458:	4864      	ldr	r0, [pc, #400]	; (80075ec <NixiBusInit+0x1e4>)
 800745a:	f7f9 fd4f 	bl	8000efc <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Transmit(&NixieBus, Nixie_ID_RightLeft, I2C_Buffer, 2, 1000);
 800745e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007462:	9300      	str	r3, [sp, #0]
 8007464:	2302      	movs	r3, #2
 8007466:	4a63      	ldr	r2, [pc, #396]	; (80075f4 <NixiBusInit+0x1ec>)
 8007468:	2140      	movs	r1, #64	; 0x40
 800746a:	4860      	ldr	r0, [pc, #384]	; (80075ec <NixiBusInit+0x1e4>)
 800746c:	f7f9 fd46 	bl	8000efc <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Transmit(&NixieBus, Nixie_ID_RightRight, I2C_Buffer, 2, 1000);
 8007470:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007474:	9300      	str	r3, [sp, #0]
 8007476:	2302      	movs	r3, #2
 8007478:	4a5e      	ldr	r2, [pc, #376]	; (80075f4 <NixiBusInit+0x1ec>)
 800747a:	2158      	movs	r1, #88	; 0x58
 800747c:	485b      	ldr	r0, [pc, #364]	; (80075ec <NixiBusInit+0x1e4>)
 800747e:	f7f9 fd3d 	bl	8000efc <HAL_I2C_Master_Transmit>

	I2C_Buffer[0] = CommandRegister;
 8007482:	4b5c      	ldr	r3, [pc, #368]	; (80075f4 <NixiBusInit+0x1ec>)
 8007484:	22fd      	movs	r2, #253	; 0xfd
 8007486:	701a      	strb	r2, [r3, #0]
	I2C_Buffer[1] = PWMRegister;
 8007488:	4b5a      	ldr	r3, [pc, #360]	; (80075f4 <NixiBusInit+0x1ec>)
 800748a:	2200      	movs	r2, #0
 800748c:	705a      	strb	r2, [r3, #1]
	HAL_I2C_Master_Transmit(&NixieBus, Nixie_ID_LeftLeft, I2C_Buffer, 2, 1000);
 800748e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007492:	9300      	str	r3, [sp, #0]
 8007494:	2302      	movs	r3, #2
 8007496:	4a57      	ldr	r2, [pc, #348]	; (80075f4 <NixiBusInit+0x1ec>)
 8007498:	2146      	movs	r1, #70	; 0x46
 800749a:	4854      	ldr	r0, [pc, #336]	; (80075ec <NixiBusInit+0x1e4>)
 800749c:	f7f9 fd2e 	bl	8000efc <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Transmit(&NixieBus, Nixie_ID_LeftRight, I2C_Buffer, 2, 1000);
 80074a0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80074a4:	9300      	str	r3, [sp, #0]
 80074a6:	2302      	movs	r3, #2
 80074a8:	4a52      	ldr	r2, [pc, #328]	; (80075f4 <NixiBusInit+0x1ec>)
 80074aa:	215e      	movs	r1, #94	; 0x5e
 80074ac:	484f      	ldr	r0, [pc, #316]	; (80075ec <NixiBusInit+0x1e4>)
 80074ae:	f7f9 fd25 	bl	8000efc <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Transmit(&NixieBus, Nixie_ID_RightLeft, I2C_Buffer, 2, 1000);
 80074b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80074b6:	9300      	str	r3, [sp, #0]
 80074b8:	2302      	movs	r3, #2
 80074ba:	4a4e      	ldr	r2, [pc, #312]	; (80075f4 <NixiBusInit+0x1ec>)
 80074bc:	2140      	movs	r1, #64	; 0x40
 80074be:	484b      	ldr	r0, [pc, #300]	; (80075ec <NixiBusInit+0x1e4>)
 80074c0:	f7f9 fd1c 	bl	8000efc <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Transmit(&NixieBus, Nixie_ID_RightRight, I2C_Buffer, 2, 1000);
 80074c4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80074c8:	9300      	str	r3, [sp, #0]
 80074ca:	2302      	movs	r3, #2
 80074cc:	4a49      	ldr	r2, [pc, #292]	; (80075f4 <NixiBusInit+0x1ec>)
 80074ce:	2158      	movs	r1, #88	; 0x58
 80074d0:	4846      	ldr	r0, [pc, #280]	; (80075ec <NixiBusInit+0x1e4>)
 80074d2:	f7f9 fd13 	bl	8000efc <HAL_I2C_Master_Transmit>

	for(uint8_t loop = 1; loop < 0xC7 ; loop ++)
 80074d6:	2301      	movs	r3, #1
 80074d8:	71fb      	strb	r3, [r7, #7]
 80074da:	e02c      	b.n	8007536 <NixiBusInit+0x12e>
	{
		I2C_Buffer[0] = loop;
 80074dc:	4a45      	ldr	r2, [pc, #276]	; (80075f4 <NixiBusInit+0x1ec>)
 80074de:	79fb      	ldrb	r3, [r7, #7]
 80074e0:	7013      	strb	r3, [r2, #0]
		I2C_Buffer[1] = 0x00;
 80074e2:	4b44      	ldr	r3, [pc, #272]	; (80075f4 <NixiBusInit+0x1ec>)
 80074e4:	2200      	movs	r2, #0
 80074e6:	705a      	strb	r2, [r3, #1]
		HAL_I2C_Master_Transmit(&NixieBus, Nixie_ID_LeftLeft, I2C_Buffer, 2, 1000);
 80074e8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80074ec:	9300      	str	r3, [sp, #0]
 80074ee:	2302      	movs	r3, #2
 80074f0:	4a40      	ldr	r2, [pc, #256]	; (80075f4 <NixiBusInit+0x1ec>)
 80074f2:	2146      	movs	r1, #70	; 0x46
 80074f4:	483d      	ldr	r0, [pc, #244]	; (80075ec <NixiBusInit+0x1e4>)
 80074f6:	f7f9 fd01 	bl	8000efc <HAL_I2C_Master_Transmit>
		HAL_I2C_Master_Transmit(&NixieBus, Nixie_ID_LeftRight, I2C_Buffer, 2, 1000);
 80074fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80074fe:	9300      	str	r3, [sp, #0]
 8007500:	2302      	movs	r3, #2
 8007502:	4a3c      	ldr	r2, [pc, #240]	; (80075f4 <NixiBusInit+0x1ec>)
 8007504:	215e      	movs	r1, #94	; 0x5e
 8007506:	4839      	ldr	r0, [pc, #228]	; (80075ec <NixiBusInit+0x1e4>)
 8007508:	f7f9 fcf8 	bl	8000efc <HAL_I2C_Master_Transmit>
		HAL_I2C_Master_Transmit(&NixieBus, Nixie_ID_RightLeft, I2C_Buffer, 2, 1000);
 800750c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007510:	9300      	str	r3, [sp, #0]
 8007512:	2302      	movs	r3, #2
 8007514:	4a37      	ldr	r2, [pc, #220]	; (80075f4 <NixiBusInit+0x1ec>)
 8007516:	2140      	movs	r1, #64	; 0x40
 8007518:	4834      	ldr	r0, [pc, #208]	; (80075ec <NixiBusInit+0x1e4>)
 800751a:	f7f9 fcef 	bl	8000efc <HAL_I2C_Master_Transmit>
		HAL_I2C_Master_Transmit(&NixieBus, Nixie_ID_RightRight, I2C_Buffer, 2, 1000);
 800751e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007522:	9300      	str	r3, [sp, #0]
 8007524:	2302      	movs	r3, #2
 8007526:	4a33      	ldr	r2, [pc, #204]	; (80075f4 <NixiBusInit+0x1ec>)
 8007528:	2158      	movs	r1, #88	; 0x58
 800752a:	4830      	ldr	r0, [pc, #192]	; (80075ec <NixiBusInit+0x1e4>)
 800752c:	f7f9 fce6 	bl	8000efc <HAL_I2C_Master_Transmit>
	for(uint8_t loop = 1; loop < 0xC7 ; loop ++)
 8007530:	79fb      	ldrb	r3, [r7, #7]
 8007532:	3301      	adds	r3, #1
 8007534:	71fb      	strb	r3, [r7, #7]
 8007536:	79fb      	ldrb	r3, [r7, #7]
 8007538:	2bc6      	cmp	r3, #198	; 0xc6
 800753a:	d9cf      	bls.n	80074dc <NixiBusInit+0xd4>
//	HAL_I2C_Master_Receive(&NixieBus, Nixie_ID_LeftLeft, I2C_Buffer, 10, 1000);




	I2C_Buffer[0] = CommandRegisterWriteLock;
 800753c:	4b2d      	ldr	r3, [pc, #180]	; (80075f4 <NixiBusInit+0x1ec>)
 800753e:	22fe      	movs	r2, #254	; 0xfe
 8007540:	701a      	strb	r2, [r3, #0]
	I2C_Buffer[1] = CommandRegisterWriteUnlock;
 8007542:	4b2c      	ldr	r3, [pc, #176]	; (80075f4 <NixiBusInit+0x1ec>)
 8007544:	22c5      	movs	r2, #197	; 0xc5
 8007546:	705a      	strb	r2, [r3, #1]
	HAL_I2C_Master_Transmit(&NixieBus, Nixie_ID_LeftLeft, I2C_Buffer, 2, 1000);
 8007548:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800754c:	9300      	str	r3, [sp, #0]
 800754e:	2302      	movs	r3, #2
 8007550:	4a28      	ldr	r2, [pc, #160]	; (80075f4 <NixiBusInit+0x1ec>)
 8007552:	2146      	movs	r1, #70	; 0x46
 8007554:	4825      	ldr	r0, [pc, #148]	; (80075ec <NixiBusInit+0x1e4>)
 8007556:	f7f9 fcd1 	bl	8000efc <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Transmit(&NixieBus, Nixie_ID_LeftRight, I2C_Buffer, 2, 1000);
 800755a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800755e:	9300      	str	r3, [sp, #0]
 8007560:	2302      	movs	r3, #2
 8007562:	4a24      	ldr	r2, [pc, #144]	; (80075f4 <NixiBusInit+0x1ec>)
 8007564:	215e      	movs	r1, #94	; 0x5e
 8007566:	4821      	ldr	r0, [pc, #132]	; (80075ec <NixiBusInit+0x1e4>)
 8007568:	f7f9 fcc8 	bl	8000efc <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Transmit(&NixieBus, Nixie_ID_RightLeft, I2C_Buffer, 2, 1000);
 800756c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007570:	9300      	str	r3, [sp, #0]
 8007572:	2302      	movs	r3, #2
 8007574:	4a1f      	ldr	r2, [pc, #124]	; (80075f4 <NixiBusInit+0x1ec>)
 8007576:	2140      	movs	r1, #64	; 0x40
 8007578:	481c      	ldr	r0, [pc, #112]	; (80075ec <NixiBusInit+0x1e4>)
 800757a:	f7f9 fcbf 	bl	8000efc <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Transmit(&NixieBus, Nixie_ID_RightRight, I2C_Buffer, 2, 1000);
 800757e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007582:	9300      	str	r3, [sp, #0]
 8007584:	2302      	movs	r3, #2
 8007586:	4a1b      	ldr	r2, [pc, #108]	; (80075f4 <NixiBusInit+0x1ec>)
 8007588:	2158      	movs	r1, #88	; 0x58
 800758a:	4818      	ldr	r0, [pc, #96]	; (80075ec <NixiBusInit+0x1e4>)
 800758c:	f7f9 fcb6 	bl	8000efc <HAL_I2C_Master_Transmit>
	I2C_Buffer[0] = CommandRegister;
 8007590:	4b18      	ldr	r3, [pc, #96]	; (80075f4 <NixiBusInit+0x1ec>)
 8007592:	22fd      	movs	r2, #253	; 0xfd
 8007594:	701a      	strb	r2, [r3, #0]
	I2C_Buffer[1] = ScalingRegister;
 8007596:	4b17      	ldr	r3, [pc, #92]	; (80075f4 <NixiBusInit+0x1ec>)
 8007598:	2201      	movs	r2, #1
 800759a:	705a      	strb	r2, [r3, #1]
	HAL_I2C_Master_Transmit(&NixieBus, Nixie_ID_LeftLeft, I2C_Buffer, 2, 1000);
 800759c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80075a0:	9300      	str	r3, [sp, #0]
 80075a2:	2302      	movs	r3, #2
 80075a4:	4a13      	ldr	r2, [pc, #76]	; (80075f4 <NixiBusInit+0x1ec>)
 80075a6:	2146      	movs	r1, #70	; 0x46
 80075a8:	4810      	ldr	r0, [pc, #64]	; (80075ec <NixiBusInit+0x1e4>)
 80075aa:	f7f9 fca7 	bl	8000efc <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Transmit(&NixieBus, Nixie_ID_LeftRight, I2C_Buffer, 2, 1000);
 80075ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80075b2:	9300      	str	r3, [sp, #0]
 80075b4:	2302      	movs	r3, #2
 80075b6:	4a0f      	ldr	r2, [pc, #60]	; (80075f4 <NixiBusInit+0x1ec>)
 80075b8:	215e      	movs	r1, #94	; 0x5e
 80075ba:	480c      	ldr	r0, [pc, #48]	; (80075ec <NixiBusInit+0x1e4>)
 80075bc:	f7f9 fc9e 	bl	8000efc <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Transmit(&NixieBus, Nixie_ID_RightLeft, I2C_Buffer, 2, 1000);
 80075c0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80075c4:	9300      	str	r3, [sp, #0]
 80075c6:	2302      	movs	r3, #2
 80075c8:	4a0a      	ldr	r2, [pc, #40]	; (80075f4 <NixiBusInit+0x1ec>)
 80075ca:	2140      	movs	r1, #64	; 0x40
 80075cc:	4807      	ldr	r0, [pc, #28]	; (80075ec <NixiBusInit+0x1e4>)
 80075ce:	f7f9 fc95 	bl	8000efc <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Transmit(&NixieBus, Nixie_ID_RightRight, I2C_Buffer, 2, 1000);
 80075d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80075d6:	9300      	str	r3, [sp, #0]
 80075d8:	2302      	movs	r3, #2
 80075da:	4a06      	ldr	r2, [pc, #24]	; (80075f4 <NixiBusInit+0x1ec>)
 80075dc:	2158      	movs	r1, #88	; 0x58
 80075de:	4803      	ldr	r0, [pc, #12]	; (80075ec <NixiBusInit+0x1e4>)
 80075e0:	f7f9 fc8c 	bl	8000efc <HAL_I2C_Master_Transmit>

	for(uint8_t loop = 1; loop < 0xC7 ; loop ++)
 80075e4:	2301      	movs	r3, #1
 80075e6:	71bb      	strb	r3, [r7, #6]
 80075e8:	e033      	b.n	8007652 <NixiBusInit+0x24a>
 80075ea:	bf00      	nop
 80075ec:	20000254 	.word	0x20000254
 80075f0:	2000024c 	.word	0x2000024c
 80075f4:	200002a8 	.word	0x200002a8
	{
		I2C_Buffer[0] = loop;
 80075f8:	4a85      	ldr	r2, [pc, #532]	; (8007810 <NixiBusInit+0x408>)
 80075fa:	79bb      	ldrb	r3, [r7, #6]
 80075fc:	7013      	strb	r3, [r2, #0]
		I2C_Buffer[1] = 0xFF;
 80075fe:	4b84      	ldr	r3, [pc, #528]	; (8007810 <NixiBusInit+0x408>)
 8007600:	22ff      	movs	r2, #255	; 0xff
 8007602:	705a      	strb	r2, [r3, #1]
		HAL_I2C_Master_Transmit(&NixieBus, Nixie_ID_LeftLeft, I2C_Buffer, 2, 1000);
 8007604:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007608:	9300      	str	r3, [sp, #0]
 800760a:	2302      	movs	r3, #2
 800760c:	4a80      	ldr	r2, [pc, #512]	; (8007810 <NixiBusInit+0x408>)
 800760e:	2146      	movs	r1, #70	; 0x46
 8007610:	4880      	ldr	r0, [pc, #512]	; (8007814 <NixiBusInit+0x40c>)
 8007612:	f7f9 fc73 	bl	8000efc <HAL_I2C_Master_Transmit>
		HAL_I2C_Master_Transmit(&NixieBus, Nixie_ID_LeftRight, I2C_Buffer, 2, 1000);
 8007616:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800761a:	9300      	str	r3, [sp, #0]
 800761c:	2302      	movs	r3, #2
 800761e:	4a7c      	ldr	r2, [pc, #496]	; (8007810 <NixiBusInit+0x408>)
 8007620:	215e      	movs	r1, #94	; 0x5e
 8007622:	487c      	ldr	r0, [pc, #496]	; (8007814 <NixiBusInit+0x40c>)
 8007624:	f7f9 fc6a 	bl	8000efc <HAL_I2C_Master_Transmit>
		HAL_I2C_Master_Transmit(&NixieBus, Nixie_ID_RightLeft, I2C_Buffer, 2, 1000);
 8007628:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800762c:	9300      	str	r3, [sp, #0]
 800762e:	2302      	movs	r3, #2
 8007630:	4a77      	ldr	r2, [pc, #476]	; (8007810 <NixiBusInit+0x408>)
 8007632:	2140      	movs	r1, #64	; 0x40
 8007634:	4877      	ldr	r0, [pc, #476]	; (8007814 <NixiBusInit+0x40c>)
 8007636:	f7f9 fc61 	bl	8000efc <HAL_I2C_Master_Transmit>
		HAL_I2C_Master_Transmit(&NixieBus, Nixie_ID_RightRight, I2C_Buffer, 2, 1000);
 800763a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800763e:	9300      	str	r3, [sp, #0]
 8007640:	2302      	movs	r3, #2
 8007642:	4a73      	ldr	r2, [pc, #460]	; (8007810 <NixiBusInit+0x408>)
 8007644:	2158      	movs	r1, #88	; 0x58
 8007646:	4873      	ldr	r0, [pc, #460]	; (8007814 <NixiBusInit+0x40c>)
 8007648:	f7f9 fc58 	bl	8000efc <HAL_I2C_Master_Transmit>
	for(uint8_t loop = 1; loop < 0xC7 ; loop ++)
 800764c:	79bb      	ldrb	r3, [r7, #6]
 800764e:	3301      	adds	r3, #1
 8007650:	71bb      	strb	r3, [r7, #6]
 8007652:	79bb      	ldrb	r3, [r7, #6]
 8007654:	2bc6      	cmp	r3, #198	; 0xc6
 8007656:	d9cf      	bls.n	80075f8 <NixiBusInit+0x1f0>
//	HAL_I2C_Master_Receive(&NixieBus, Nixie_ID_LeftLeft, I2C_Buffer, 10, 1000);




	I2C_Buffer[0] = CommandRegisterWriteLock;
 8007658:	4b6d      	ldr	r3, [pc, #436]	; (8007810 <NixiBusInit+0x408>)
 800765a:	22fe      	movs	r2, #254	; 0xfe
 800765c:	701a      	strb	r2, [r3, #0]
	I2C_Buffer[1] = CommandRegisterWriteUnlock;
 800765e:	4b6c      	ldr	r3, [pc, #432]	; (8007810 <NixiBusInit+0x408>)
 8007660:	22c5      	movs	r2, #197	; 0xc5
 8007662:	705a      	strb	r2, [r3, #1]
	HAL_I2C_Master_Transmit(&NixieBus, Nixie_ID_LeftLeft, I2C_Buffer, 2, 1000);
 8007664:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007668:	9300      	str	r3, [sp, #0]
 800766a:	2302      	movs	r3, #2
 800766c:	4a68      	ldr	r2, [pc, #416]	; (8007810 <NixiBusInit+0x408>)
 800766e:	2146      	movs	r1, #70	; 0x46
 8007670:	4868      	ldr	r0, [pc, #416]	; (8007814 <NixiBusInit+0x40c>)
 8007672:	f7f9 fc43 	bl	8000efc <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Transmit(&NixieBus, Nixie_ID_LeftRight, I2C_Buffer, 2, 1000);
 8007676:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800767a:	9300      	str	r3, [sp, #0]
 800767c:	2302      	movs	r3, #2
 800767e:	4a64      	ldr	r2, [pc, #400]	; (8007810 <NixiBusInit+0x408>)
 8007680:	215e      	movs	r1, #94	; 0x5e
 8007682:	4864      	ldr	r0, [pc, #400]	; (8007814 <NixiBusInit+0x40c>)
 8007684:	f7f9 fc3a 	bl	8000efc <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Transmit(&NixieBus, Nixie_ID_RightLeft, I2C_Buffer, 2, 1000);
 8007688:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800768c:	9300      	str	r3, [sp, #0]
 800768e:	2302      	movs	r3, #2
 8007690:	4a5f      	ldr	r2, [pc, #380]	; (8007810 <NixiBusInit+0x408>)
 8007692:	2140      	movs	r1, #64	; 0x40
 8007694:	485f      	ldr	r0, [pc, #380]	; (8007814 <NixiBusInit+0x40c>)
 8007696:	f7f9 fc31 	bl	8000efc <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Transmit(&NixieBus, Nixie_ID_RightRight, I2C_Buffer, 2, 1000);
 800769a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800769e:	9300      	str	r3, [sp, #0]
 80076a0:	2302      	movs	r3, #2
 80076a2:	4a5b      	ldr	r2, [pc, #364]	; (8007810 <NixiBusInit+0x408>)
 80076a4:	2158      	movs	r1, #88	; 0x58
 80076a6:	485b      	ldr	r0, [pc, #364]	; (8007814 <NixiBusInit+0x40c>)
 80076a8:	f7f9 fc28 	bl	8000efc <HAL_I2C_Master_Transmit>
	I2C_Buffer[0] = CommandRegister;
 80076ac:	4b58      	ldr	r3, [pc, #352]	; (8007810 <NixiBusInit+0x408>)
 80076ae:	22fd      	movs	r2, #253	; 0xfd
 80076b0:	701a      	strb	r2, [r3, #0]
	I2C_Buffer[1] = FunctionRegister;
 80076b2:	4b57      	ldr	r3, [pc, #348]	; (8007810 <NixiBusInit+0x408>)
 80076b4:	2202      	movs	r2, #2
 80076b6:	705a      	strb	r2, [r3, #1]
	HAL_I2C_Master_Transmit(&NixieBus, Nixie_ID_LeftLeft, I2C_Buffer, 2, 1000);
 80076b8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80076bc:	9300      	str	r3, [sp, #0]
 80076be:	2302      	movs	r3, #2
 80076c0:	4a53      	ldr	r2, [pc, #332]	; (8007810 <NixiBusInit+0x408>)
 80076c2:	2146      	movs	r1, #70	; 0x46
 80076c4:	4853      	ldr	r0, [pc, #332]	; (8007814 <NixiBusInit+0x40c>)
 80076c6:	f7f9 fc19 	bl	8000efc <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Transmit(&NixieBus, Nixie_ID_LeftRight, I2C_Buffer, 2, 1000);
 80076ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80076ce:	9300      	str	r3, [sp, #0]
 80076d0:	2302      	movs	r3, #2
 80076d2:	4a4f      	ldr	r2, [pc, #316]	; (8007810 <NixiBusInit+0x408>)
 80076d4:	215e      	movs	r1, #94	; 0x5e
 80076d6:	484f      	ldr	r0, [pc, #316]	; (8007814 <NixiBusInit+0x40c>)
 80076d8:	f7f9 fc10 	bl	8000efc <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Transmit(&NixieBus, Nixie_ID_RightLeft, I2C_Buffer, 2, 1000);
 80076dc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80076e0:	9300      	str	r3, [sp, #0]
 80076e2:	2302      	movs	r3, #2
 80076e4:	4a4a      	ldr	r2, [pc, #296]	; (8007810 <NixiBusInit+0x408>)
 80076e6:	2140      	movs	r1, #64	; 0x40
 80076e8:	484a      	ldr	r0, [pc, #296]	; (8007814 <NixiBusInit+0x40c>)
 80076ea:	f7f9 fc07 	bl	8000efc <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Transmit(&NixieBus, Nixie_ID_RightRight, I2C_Buffer, 2, 1000);
 80076ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80076f2:	9300      	str	r3, [sp, #0]
 80076f4:	2302      	movs	r3, #2
 80076f6:	4a46      	ldr	r2, [pc, #280]	; (8007810 <NixiBusInit+0x408>)
 80076f8:	2158      	movs	r1, #88	; 0x58
 80076fa:	4846      	ldr	r0, [pc, #280]	; (8007814 <NixiBusInit+0x40c>)
 80076fc:	f7f9 fbfe 	bl	8000efc <HAL_I2C_Master_Transmit>





	I2C_Buffer[0] = FR_PullDownUpResistorSelectionRegister;
 8007700:	4b43      	ldr	r3, [pc, #268]	; (8007810 <NixiBusInit+0x408>)
 8007702:	2202      	movs	r2, #2
 8007704:	701a      	strb	r2, [r3, #0]
	I2C_Buffer[1] = 0x70;
 8007706:	4b42      	ldr	r3, [pc, #264]	; (8007810 <NixiBusInit+0x408>)
 8007708:	2270      	movs	r2, #112	; 0x70
 800770a:	705a      	strb	r2, [r3, #1]
	HAL_I2C_Master_Transmit(&NixieBus, Nixie_ID_LeftLeft, I2C_Buffer, 2, 1000);
 800770c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007710:	9300      	str	r3, [sp, #0]
 8007712:	2302      	movs	r3, #2
 8007714:	4a3e      	ldr	r2, [pc, #248]	; (8007810 <NixiBusInit+0x408>)
 8007716:	2146      	movs	r1, #70	; 0x46
 8007718:	483e      	ldr	r0, [pc, #248]	; (8007814 <NixiBusInit+0x40c>)
 800771a:	f7f9 fbef 	bl	8000efc <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Transmit(&NixieBus, Nixie_ID_LeftRight, I2C_Buffer, 2, 1000);
 800771e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007722:	9300      	str	r3, [sp, #0]
 8007724:	2302      	movs	r3, #2
 8007726:	4a3a      	ldr	r2, [pc, #232]	; (8007810 <NixiBusInit+0x408>)
 8007728:	215e      	movs	r1, #94	; 0x5e
 800772a:	483a      	ldr	r0, [pc, #232]	; (8007814 <NixiBusInit+0x40c>)
 800772c:	f7f9 fbe6 	bl	8000efc <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Transmit(&NixieBus, Nixie_ID_RightLeft, I2C_Buffer, 2, 1000);
 8007730:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007734:	9300      	str	r3, [sp, #0]
 8007736:	2302      	movs	r3, #2
 8007738:	4a35      	ldr	r2, [pc, #212]	; (8007810 <NixiBusInit+0x408>)
 800773a:	2140      	movs	r1, #64	; 0x40
 800773c:	4835      	ldr	r0, [pc, #212]	; (8007814 <NixiBusInit+0x40c>)
 800773e:	f7f9 fbdd 	bl	8000efc <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Transmit(&NixieBus, Nixie_ID_RightRight, I2C_Buffer, 2, 1000);
 8007742:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007746:	9300      	str	r3, [sp, #0]
 8007748:	2302      	movs	r3, #2
 800774a:	4a31      	ldr	r2, [pc, #196]	; (8007810 <NixiBusInit+0x408>)
 800774c:	2158      	movs	r1, #88	; 0x58
 800774e:	4831      	ldr	r0, [pc, #196]	; (8007814 <NixiBusInit+0x40c>)
 8007750:	f7f9 fbd4 	bl	8000efc <HAL_I2C_Master_Transmit>
//	HAL_I2C_Master_Receive(&NixieBus, Nixie_ID_LeftLeft, I2C_Buffer, 1, 1000);




	I2C_Buffer[0] = FR_GlobalCurrentControlRegister;
 8007754:	4b2e      	ldr	r3, [pc, #184]	; (8007810 <NixiBusInit+0x408>)
 8007756:	2201      	movs	r2, #1
 8007758:	701a      	strb	r2, [r3, #0]
	I2C_Buffer[1] = 0xFF;
 800775a:	4b2d      	ldr	r3, [pc, #180]	; (8007810 <NixiBusInit+0x408>)
 800775c:	22ff      	movs	r2, #255	; 0xff
 800775e:	705a      	strb	r2, [r3, #1]
	HAL_I2C_Master_Transmit(&NixieBus, Nixie_ID_LeftLeft, I2C_Buffer, 2, 1000);
 8007760:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007764:	9300      	str	r3, [sp, #0]
 8007766:	2302      	movs	r3, #2
 8007768:	4a29      	ldr	r2, [pc, #164]	; (8007810 <NixiBusInit+0x408>)
 800776a:	2146      	movs	r1, #70	; 0x46
 800776c:	4829      	ldr	r0, [pc, #164]	; (8007814 <NixiBusInit+0x40c>)
 800776e:	f7f9 fbc5 	bl	8000efc <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Transmit(&NixieBus, Nixie_ID_LeftRight, I2C_Buffer, 2, 1000);
 8007772:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007776:	9300      	str	r3, [sp, #0]
 8007778:	2302      	movs	r3, #2
 800777a:	4a25      	ldr	r2, [pc, #148]	; (8007810 <NixiBusInit+0x408>)
 800777c:	215e      	movs	r1, #94	; 0x5e
 800777e:	4825      	ldr	r0, [pc, #148]	; (8007814 <NixiBusInit+0x40c>)
 8007780:	f7f9 fbbc 	bl	8000efc <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Transmit(&NixieBus, Nixie_ID_RightLeft, I2C_Buffer, 2, 1000);
 8007784:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007788:	9300      	str	r3, [sp, #0]
 800778a:	2302      	movs	r3, #2
 800778c:	4a20      	ldr	r2, [pc, #128]	; (8007810 <NixiBusInit+0x408>)
 800778e:	2140      	movs	r1, #64	; 0x40
 8007790:	4820      	ldr	r0, [pc, #128]	; (8007814 <NixiBusInit+0x40c>)
 8007792:	f7f9 fbb3 	bl	8000efc <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Transmit(&NixieBus, Nixie_ID_RightRight, I2C_Buffer, 2, 1000);
 8007796:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800779a:	9300      	str	r3, [sp, #0]
 800779c:	2302      	movs	r3, #2
 800779e:	4a1c      	ldr	r2, [pc, #112]	; (8007810 <NixiBusInit+0x408>)
 80077a0:	2158      	movs	r1, #88	; 0x58
 80077a2:	481c      	ldr	r0, [pc, #112]	; (8007814 <NixiBusInit+0x40c>)
 80077a4:	f7f9 fbaa 	bl	8000efc <HAL_I2C_Master_Transmit>
//	HAL_I2C_Master_Receive(&NixieBus, Nixie_ID_LeftLeft, I2C_Buffer, 1, 1000);




	I2C_Buffer[0] = FR_ConfigurationRegister;
 80077a8:	4b19      	ldr	r3, [pc, #100]	; (8007810 <NixiBusInit+0x408>)
 80077aa:	2200      	movs	r2, #0
 80077ac:	701a      	strb	r2, [r3, #0]
	I2C_Buffer[1] = 0x01;
 80077ae:	4b18      	ldr	r3, [pc, #96]	; (8007810 <NixiBusInit+0x408>)
 80077b0:	2201      	movs	r2, #1
 80077b2:	705a      	strb	r2, [r3, #1]
	HAL_I2C_Master_Transmit(&NixieBus, Nixie_ID_LeftLeft, I2C_Buffer, 2, 1000);
 80077b4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80077b8:	9300      	str	r3, [sp, #0]
 80077ba:	2302      	movs	r3, #2
 80077bc:	4a14      	ldr	r2, [pc, #80]	; (8007810 <NixiBusInit+0x408>)
 80077be:	2146      	movs	r1, #70	; 0x46
 80077c0:	4814      	ldr	r0, [pc, #80]	; (8007814 <NixiBusInit+0x40c>)
 80077c2:	f7f9 fb9b 	bl	8000efc <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Transmit(&NixieBus, Nixie_ID_LeftRight, I2C_Buffer, 2, 1000);
 80077c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80077ca:	9300      	str	r3, [sp, #0]
 80077cc:	2302      	movs	r3, #2
 80077ce:	4a10      	ldr	r2, [pc, #64]	; (8007810 <NixiBusInit+0x408>)
 80077d0:	215e      	movs	r1, #94	; 0x5e
 80077d2:	4810      	ldr	r0, [pc, #64]	; (8007814 <NixiBusInit+0x40c>)
 80077d4:	f7f9 fb92 	bl	8000efc <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Transmit(&NixieBus, Nixie_ID_RightLeft, I2C_Buffer, 2, 1000);
 80077d8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80077dc:	9300      	str	r3, [sp, #0]
 80077de:	2302      	movs	r3, #2
 80077e0:	4a0b      	ldr	r2, [pc, #44]	; (8007810 <NixiBusInit+0x408>)
 80077e2:	2140      	movs	r1, #64	; 0x40
 80077e4:	480b      	ldr	r0, [pc, #44]	; (8007814 <NixiBusInit+0x40c>)
 80077e6:	f7f9 fb89 	bl	8000efc <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Transmit(&NixieBus, Nixie_ID_RightRight, I2C_Buffer, 2, 1000);
 80077ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80077ee:	9300      	str	r3, [sp, #0]
 80077f0:	2302      	movs	r3, #2
 80077f2:	4a07      	ldr	r2, [pc, #28]	; (8007810 <NixiBusInit+0x408>)
 80077f4:	2158      	movs	r1, #88	; 0x58
 80077f6:	4807      	ldr	r0, [pc, #28]	; (8007814 <NixiBusInit+0x40c>)
 80077f8:	f7f9 fb80 	bl	8000efc <HAL_I2C_Master_Transmit>
//	HAL_I2C_Master_Transmit(&NixieBus, Nixie_ID_LeftLeft, I2C_Buffer, 1, 1000);
//	HAL_I2C_Master_Receive(&NixieBus, Nixie_ID_LeftLeft, I2C_Buffer, 1, 1000);



	HAL_Delay(100);
 80077fc:	2064      	movs	r0, #100	; 0x64
 80077fe:	f7f8 ff33 	bl	8000668 <HAL_Delay>
}
 8007802:	bf00      	nop
 8007804:	3708      	adds	r7, #8
 8007806:	46bd      	mov	sp, r7
 8007808:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800780c:	b004      	add	sp, #16
 800780e:	4770      	bx	lr
 8007810:	200002a8 	.word	0x200002a8
 8007814:	20000254 	.word	0x20000254

08007818 <superUserRunForever>:


#ifdef superUserMode

static inline void superUserRunForever(uint8_t* CMD_Buffer, uint8_t *CMD_Len)
{
 8007818:	b580      	push	{r7, lr}
 800781a:	b086      	sub	sp, #24
 800781c:	af00      	add	r7, sp, #0
 800781e:	6078      	str	r0, [r7, #4]
 8007820:	6039      	str	r1, [r7, #0]
	if(superUserBus->ep0_data_len && !BOOL_PORT_OPEN)
 8007822:	4b2b      	ldr	r3, [pc, #172]	; (80078d0 <superUserRunForever+0xb8>)
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800782a:	2b00      	cmp	r3, #0
 800782c:	d01b      	beq.n	8007866 <superUserRunForever+0x4e>
 800782e:	4b29      	ldr	r3, [pc, #164]	; (80078d4 <superUserRunForever+0xbc>)
 8007830:	781b      	ldrb	r3, [r3, #0]
 8007832:	2b00      	cmp	r3, #0
 8007834:	d117      	bne.n	8007866 <superUserRunForever+0x4e>
	{
		BOOL_PORT_OPEN = 1;
 8007836:	4b27      	ldr	r3, [pc, #156]	; (80078d4 <superUserRunForever+0xbc>)
 8007838:	2201      	movs	r2, #1
 800783a:	701a      	strb	r2, [r3, #0]

		CDC_Transmit_FS((uint8_t *)" _  _   ____   _  _   ____   ____ \n", 36);
 800783c:	2124      	movs	r1, #36	; 0x24
 800783e:	4826      	ldr	r0, [pc, #152]	; (80078d8 <superUserRunForever+0xc0>)
 8007840:	f000 fe96 	bl	8008570 <CDC_Transmit_FS>
		CDC_Transmit_FS((uint8_t *)"( \\( ) (_  _) ( \\/ ) (_  _) ( ___)\n", 36);
 8007844:	2124      	movs	r1, #36	; 0x24
 8007846:	4825      	ldr	r0, [pc, #148]	; (80078dc <superUserRunForever+0xc4>)
 8007848:	f000 fe92 	bl	8008570 <CDC_Transmit_FS>
		CDC_Transmit_FS((uint8_t *)" )  (   _)(_   )  (   _)(_   )__) \n", 36);
 800784c:	2124      	movs	r1, #36	; 0x24
 800784e:	4824      	ldr	r0, [pc, #144]	; (80078e0 <superUserRunForever+0xc8>)
 8007850:	f000 fe8e 	bl	8008570 <CDC_Transmit_FS>
		CDC_Transmit_FS((uint8_t *)"(_)\\_) (____) (_/\\_) (____) (____)v0.1\n",41);
 8007854:	2129      	movs	r1, #41	; 0x29
 8007856:	4823      	ldr	r0, [pc, #140]	; (80078e4 <superUserRunForever+0xcc>)
 8007858:	f000 fe8a 	bl	8008570 <CDC_Transmit_FS>

		CDC_Transmit_FS((uint8_t *)"\n$superUser:", 12);
 800785c:	210c      	movs	r1, #12
 800785e:	4822      	ldr	r0, [pc, #136]	; (80078e8 <superUserRunForever+0xd0>)
 8007860:	f000 fe86 	bl	8008570 <CDC_Transmit_FS>
 8007864:	e00c      	b.n	8007880 <superUserRunForever+0x68>


	}
	else if(!(superUserBus->ep0_data_len) && BOOL_PORT_OPEN)
 8007866:	4b1a      	ldr	r3, [pc, #104]	; (80078d0 <superUserRunForever+0xb8>)
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800786e:	2b00      	cmp	r3, #0
 8007870:	d106      	bne.n	8007880 <superUserRunForever+0x68>
 8007872:	4b18      	ldr	r3, [pc, #96]	; (80078d4 <superUserRunForever+0xbc>)
 8007874:	781b      	ldrb	r3, [r3, #0]
 8007876:	2b00      	cmp	r3, #0
 8007878:	d002      	beq.n	8007880 <superUserRunForever+0x68>
	{
		BOOL_PORT_OPEN = 0;
 800787a:	4b16      	ldr	r3, [pc, #88]	; (80078d4 <superUserRunForever+0xbc>)
 800787c:	2200      	movs	r2, #0
 800787e:	701a      	strb	r2, [r3, #0]
	}
	if(*CMD_Len != 0)
 8007880:	683b      	ldr	r3, [r7, #0]
 8007882:	781b      	ldrb	r3, [r3, #0]
 8007884:	2b00      	cmp	r3, #0
 8007886:	d01f      	beq.n	80078c8 <superUserRunForever+0xb0>
	{
		if( (CMD_Buffer[0] == 'l') &&
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	781b      	ldrb	r3, [r3, #0]
 800788c:	2b6c      	cmp	r3, #108	; 0x6c
 800788e:	d118      	bne.n	80078c2 <superUserRunForever+0xaa>
			(CMD_Buffer[1] == 's') &&
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	3301      	adds	r3, #1
 8007894:	781b      	ldrb	r3, [r3, #0]
		if( (CMD_Buffer[0] == 'l') &&
 8007896:	2b73      	cmp	r3, #115	; 0x73
 8007898:	d113      	bne.n	80078c2 <superUserRunForever+0xaa>
			(CMD_Buffer[2] == 'h') &&
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	3302      	adds	r3, #2
 800789e:	781b      	ldrb	r3, [r3, #0]
			(CMD_Buffer[1] == 's') &&
 80078a0:	2b68      	cmp	r3, #104	; 0x68
 80078a2:	d10e      	bne.n	80078c2 <superUserRunForever+0xaa>
			(CMD_Buffer[3] == 'w') )
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	3303      	adds	r3, #3
 80078a8:	781b      	ldrb	r3, [r3, #0]
			(CMD_Buffer[2] == 'h') &&
 80078aa:	2b77      	cmp	r3, #119	; 0x77
 80078ac:	d109      	bne.n	80078c2 <superUserRunForever+0xaa>
		{
			CDC_Transmit_FS((uint8_t *)"lshw\n", 5);
 80078ae:	2105      	movs	r1, #5
 80078b0:	480e      	ldr	r0, [pc, #56]	; (80078ec <superUserRunForever+0xd4>)
 80078b2:	f000 fe5d 	bl	8008570 <CDC_Transmit_FS>
			uint8_t ID_Buffer[16];
			ScanNixieNodes(ID_Buffer, 16);
 80078b6:	f107 0308 	add.w	r3, r7, #8
 80078ba:	2110      	movs	r1, #16
 80078bc:	4618      	mov	r0, r3
 80078be:	f000 f817 	bl	80078f0 <ScanNixieNodes>
		}
		*CMD_Len = 0;
 80078c2:	683b      	ldr	r3, [r7, #0]
 80078c4:	2200      	movs	r2, #0
 80078c6:	701a      	strb	r2, [r3, #0]
	}

}
 80078c8:	bf00      	nop
 80078ca:	3718      	adds	r7, #24
 80078cc:	46bd      	mov	sp, r7
 80078ce:	bd80      	pop	{r7, pc}
 80078d0:	2000024c 	.word	0x2000024c
 80078d4:	20000250 	.word	0x20000250
 80078d8:	0800a2fc 	.word	0x0800a2fc
 80078dc:	0800a320 	.word	0x0800a320
 80078e0:	0800a344 	.word	0x0800a344
 80078e4:	0800a368 	.word	0x0800a368
 80078e8:	0800a390 	.word	0x0800a390
 80078ec:	0800a3a0 	.word	0x0800a3a0

080078f0 <ScanNixieNodes>:
 *  FCh   ID Register   -       Slave Addr
 */


static inline uint8_t ScanNixieNodes(uint8_t* ID_Buffer, uint8_t MaxNode)
{
 80078f0:	b580      	push	{r7, lr}
 80078f2:	f5ad 7d06 	sub.w	sp, sp, #536	; 0x218
 80078f6:	af02      	add	r7, sp, #8
 80078f8:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80078fc:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8007900:	6018      	str	r0, [r3, #0]
 8007902:	460a      	mov	r2, r1
 8007904:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8007908:	f2a3 230d 	subw	r3, r3, #525	; 0x20d
 800790c:	701a      	strb	r2, [r3, #0]
	uint8_t buf_counter = 0;
 800790e:	2300      	movs	r3, #0
 8007910:	f887 320f 	strb.w	r3, [r7, #527]	; 0x20f
	for(uint8_t address = 0; address < 254; address += 2)
 8007914:	2300      	movs	r3, #0
 8007916:	f887 320e 	strb.w	r3, [r7, #526]	; 0x20e
 800791a:	e02d      	b.n	8007978 <ScanNixieNodes+0x88>
	{
		if(HAL_I2C_Master_Transmit(&NixieBus, address,
 800791c:	f897 320e 	ldrb.w	r3, [r7, #526]	; 0x20e
 8007920:	b299      	uxth	r1, r3
 8007922:	2364      	movs	r3, #100	; 0x64
 8007924:	9300      	str	r3, [sp, #0]
 8007926:	2301      	movs	r3, #1
 8007928:	22fc      	movs	r2, #252	; 0xfc
 800792a:	4853      	ldr	r0, [pc, #332]	; (8007a78 <ScanNixieNodes+0x188>)
 800792c:	f7f9 fae6 	bl	8000efc <HAL_I2C_Master_Transmit>
 8007930:	4603      	mov	r3, r0
 8007932:	2b00      	cmp	r3, #0
 8007934:	d11b      	bne.n	800796e <ScanNixieNodes+0x7e>
								  (uint8_t *) IDRegister, 1, 100) == HAL_OK)
		{
			ID_Buffer[buf_counter] = address;
 8007936:	f897 320f 	ldrb.w	r3, [r7, #527]	; 0x20f
 800793a:	f507 7204 	add.w	r2, r7, #528	; 0x210
 800793e:	f5a2 7203 	sub.w	r2, r2, #524	; 0x20c
 8007942:	6812      	ldr	r2, [r2, #0]
 8007944:	4413      	add	r3, r2
 8007946:	f897 220e 	ldrb.w	r2, [r7, #526]	; 0x20e
 800794a:	701a      	strb	r2, [r3, #0]
			buf_counter ++;
 800794c:	f897 320f 	ldrb.w	r3, [r7, #527]	; 0x20f
 8007950:	3301      	adds	r3, #1
 8007952:	f887 320f 	strb.w	r3, [r7, #527]	; 0x20f
			if(buf_counter >= MaxNode)
 8007956:	f507 7304 	add.w	r3, r7, #528	; 0x210
 800795a:	f2a3 230d 	subw	r3, r3, #525	; 0x20d
 800795e:	f897 220f 	ldrb.w	r2, [r7, #527]	; 0x20f
 8007962:	781b      	ldrb	r3, [r3, #0]
 8007964:	429a      	cmp	r2, r3
 8007966:	d302      	bcc.n	800796e <ScanNixieNodes+0x7e>
			{
				address = 254; // Break the loop
 8007968:	23fe      	movs	r3, #254	; 0xfe
 800796a:	f887 320e 	strb.w	r3, [r7, #526]	; 0x20e
	for(uint8_t address = 0; address < 254; address += 2)
 800796e:	f897 320e 	ldrb.w	r3, [r7, #526]	; 0x20e
 8007972:	3302      	adds	r3, #2
 8007974:	f887 320e 	strb.w	r3, [r7, #526]	; 0x20e
 8007978:	f897 320e 	ldrb.w	r3, [r7, #526]	; 0x20e
 800797c:	2bfd      	cmp	r3, #253	; 0xfd
 800797e:	d9cd      	bls.n	800791c <ScanNixieNodes+0x2c>
			}
		}
	}
#ifdef superUserMode
	char USB_Buffer[512];
	uint16_t size = 0;
 8007980:	2300      	movs	r3, #0
 8007982:	f8a7 320c 	strh.w	r3, [r7, #524]	; 0x20c

	size = sprintf(USB_Buffer,
 8007986:	f507 7304 	add.w	r3, r7, #528	; 0x210
 800798a:	f2a3 230d 	subw	r3, r3, #525	; 0x20d
 800798e:	781a      	ldrb	r2, [r3, #0]
 8007990:	f107 0308 	add.w	r3, r7, #8
 8007994:	4939      	ldr	r1, [pc, #228]	; (8007a7c <ScanNixieNodes+0x18c>)
 8007996:	4618      	mov	r0, r3
 8007998:	f001 fafc 	bl	8008f94 <siprintf>
 800799c:	4603      	mov	r3, r0
 800799e:	f8a7 320c 	strh.w	r3, [r7, #524]	; 0x20c
			"\nNodes were scanned in the I2C network. "
			"Max detectable node quantity is %d", MaxNode);

	size += sprintf(USB_Buffer + strlen(USB_Buffer),
 80079a2:	f107 0308 	add.w	r3, r7, #8
 80079a6:	4618      	mov	r0, r3
 80079a8:	f7f8 fc12 	bl	80001d0 <strlen>
 80079ac:	4602      	mov	r2, r0
 80079ae:	f107 0308 	add.w	r3, r7, #8
 80079b2:	4413      	add	r3, r2
 80079b4:	f897 220f 	ldrb.w	r2, [r7, #527]	; 0x20f
 80079b8:	4931      	ldr	r1, [pc, #196]	; (8007a80 <ScanNixieNodes+0x190>)
 80079ba:	4618      	mov	r0, r3
 80079bc:	f001 faea 	bl	8008f94 <siprintf>
 80079c0:	4603      	mov	r3, r0
 80079c2:	b29a      	uxth	r2, r3
 80079c4:	f8b7 320c 	ldrh.w	r3, [r7, #524]	; 0x20c
 80079c8:	4413      	add	r3, r2
 80079ca:	f8a7 320c 	strh.w	r3, [r7, #524]	; 0x20c
			"\n%d nodes detected\n", buf_counter);

	if(buf_counter != 0)
 80079ce:	f897 320f 	ldrb.w	r3, [r7, #527]	; 0x20f
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d02d      	beq.n	8007a32 <ScanNixieNodes+0x142>
	{
		for(uint8_t loop = 0 ; loop < buf_counter; loop ++)
 80079d6:	2300      	movs	r3, #0
 80079d8:	f887 320b 	strb.w	r3, [r7, #523]	; 0x20b
 80079dc:	e023      	b.n	8007a26 <ScanNixieNodes+0x136>
		{
			size += sprintf(USB_Buffer + strlen(USB_Buffer),
 80079de:	f107 0308 	add.w	r3, r7, #8
 80079e2:	4618      	mov	r0, r3
 80079e4:	f7f8 fbf4 	bl	80001d0 <strlen>
 80079e8:	4602      	mov	r2, r0
 80079ea:	f107 0308 	add.w	r3, r7, #8
 80079ee:	1898      	adds	r0, r3, r2
 80079f0:	f897 120b 	ldrb.w	r1, [r7, #523]	; 0x20b
					"Node-%d : [0x%02X]\n", loop, ID_Buffer[loop]);
 80079f4:	f897 320b 	ldrb.w	r3, [r7, #523]	; 0x20b
 80079f8:	f507 7204 	add.w	r2, r7, #528	; 0x210
 80079fc:	f5a2 7203 	sub.w	r2, r2, #524	; 0x20c
 8007a00:	6812      	ldr	r2, [r2, #0]
 8007a02:	4413      	add	r3, r2
 8007a04:	781b      	ldrb	r3, [r3, #0]
			size += sprintf(USB_Buffer + strlen(USB_Buffer),
 8007a06:	460a      	mov	r2, r1
 8007a08:	491e      	ldr	r1, [pc, #120]	; (8007a84 <ScanNixieNodes+0x194>)
 8007a0a:	f001 fac3 	bl	8008f94 <siprintf>
 8007a0e:	4603      	mov	r3, r0
 8007a10:	b29a      	uxth	r2, r3
 8007a12:	f8b7 320c 	ldrh.w	r3, [r7, #524]	; 0x20c
 8007a16:	4413      	add	r3, r2
 8007a18:	f8a7 320c 	strh.w	r3, [r7, #524]	; 0x20c
		for(uint8_t loop = 0 ; loop < buf_counter; loop ++)
 8007a1c:	f897 320b 	ldrb.w	r3, [r7, #523]	; 0x20b
 8007a20:	3301      	adds	r3, #1
 8007a22:	f887 320b 	strb.w	r3, [r7, #523]	; 0x20b
 8007a26:	f897 220b 	ldrb.w	r2, [r7, #523]	; 0x20b
 8007a2a:	f897 320f 	ldrb.w	r3, [r7, #527]	; 0x20f
 8007a2e:	429a      	cmp	r2, r3
 8007a30:	d3d5      	bcc.n	80079de <ScanNixieNodes+0xee>
		}
	}
	size += sprintf(USB_Buffer + strlen(USB_Buffer),
 8007a32:	f107 0308 	add.w	r3, r7, #8
 8007a36:	4618      	mov	r0, r3
 8007a38:	f7f8 fbca 	bl	80001d0 <strlen>
 8007a3c:	4602      	mov	r2, r0
 8007a3e:	f107 0308 	add.w	r3, r7, #8
 8007a42:	4413      	add	r3, r2
 8007a44:	4910      	ldr	r1, [pc, #64]	; (8007a88 <ScanNixieNodes+0x198>)
 8007a46:	4618      	mov	r0, r3
 8007a48:	f001 faa4 	bl	8008f94 <siprintf>
 8007a4c:	4603      	mov	r3, r0
 8007a4e:	b29a      	uxth	r2, r3
 8007a50:	f8b7 320c 	ldrh.w	r3, [r7, #524]	; 0x20c
 8007a54:	4413      	add	r3, r2
 8007a56:	f8a7 320c 	strh.w	r3, [r7, #524]	; 0x20c
			"$superUser:");

	CDC_Transmit_FS((uint8_t *)USB_Buffer, size);
 8007a5a:	f8b7 220c 	ldrh.w	r2, [r7, #524]	; 0x20c
 8007a5e:	f107 0308 	add.w	r3, r7, #8
 8007a62:	4611      	mov	r1, r2
 8007a64:	4618      	mov	r0, r3
 8007a66:	f000 fd83 	bl	8008570 <CDC_Transmit_FS>
#endif

	return buf_counter;
 8007a6a:	f897 320f 	ldrb.w	r3, [r7, #527]	; 0x20f
}
 8007a6e:	4618      	mov	r0, r3
 8007a70:	f507 7704 	add.w	r7, r7, #528	; 0x210
 8007a74:	46bd      	mov	sp, r7
 8007a76:	bd80      	pop	{r7, pc}
 8007a78:	20000254 	.word	0x20000254
 8007a7c:	0800a3a8 	.word	0x0800a3a8
 8007a80:	0800a3f4 	.word	0x0800a3f4
 8007a84:	0800a408 	.word	0x0800a408
 8007a88:	0800a41c 	.word	0x0800a41c

08007a8c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8007a8c:	b590      	push	{r4, r7, lr}
 8007a8e:	b095      	sub	sp, #84	; 0x54
 8007a90:	af12      	add	r7, sp, #72	; 0x48
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8007a92:	f7f8 fd77 	bl	8000584 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8007a96:	f000 f951 	bl	8007d3c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8007a9a:	f000 fa83 	bl	8007fa4 <MX_GPIO_Init>
  MX_I2C1_Init();
 8007a9e:	f000 f9b7 	bl	8007e10 <MX_I2C1_Init>
  MX_TIM2_Init();
 8007aa2:	f000 f9e3 	bl	8007e6c <MX_TIM2_Init>
  MX_TIM3_Init();
 8007aa6:	f000 fa2f 	bl	8007f08 <MX_TIM3_Init>
  MX_USB_DEVICE_Init();
 8007aaa:	f000 fc85 	bl	80083b8 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */


#ifdef superUserMode
  NixiBusInit(hi2c1, &hUsbDeviceFS);
 8007aae:	4c9b      	ldr	r4, [pc, #620]	; (8007d1c <main+0x290>)
 8007ab0:	4b9b      	ldr	r3, [pc, #620]	; (8007d20 <main+0x294>)
 8007ab2:	9311      	str	r3, [sp, #68]	; 0x44
 8007ab4:	4668      	mov	r0, sp
 8007ab6:	f104 0310 	add.w	r3, r4, #16
 8007aba:	2244      	movs	r2, #68	; 0x44
 8007abc:	4619      	mov	r1, r3
 8007abe:	f001 fa25 	bl	8008f0c <memcpy>
 8007ac2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8007ac6:	f7ff fc9f 	bl	8007408 <NixiBusInit>
#else
  NixiBusInit(hi2c1, NULL);
#endif

  HAL_TIM_Base_Start_IT(&htim2);
 8007aca:	4896      	ldr	r0, [pc, #600]	; (8007d24 <main+0x298>)
 8007acc:	f7fb fc2e 	bl	800332c <HAL_TIM_Base_Start_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
#ifdef superUserMode
	  superUserRunForever(CMD_Buffer, &CMD_Len);
 8007ad0:	4995      	ldr	r1, [pc, #596]	; (8007d28 <main+0x29c>)
 8007ad2:	4896      	ldr	r0, [pc, #600]	; (8007d2c <main+0x2a0>)
 8007ad4:	f7ff fea0 	bl	8007818 <superUserRunForever>
#endif  //superUserMode


		I2C_Buffer[0] = CommandRegisterWriteLock;
 8007ad8:	4b95      	ldr	r3, [pc, #596]	; (8007d30 <main+0x2a4>)
 8007ada:	22fe      	movs	r2, #254	; 0xfe
 8007adc:	701a      	strb	r2, [r3, #0]
		I2C_Buffer[1] = CommandRegisterWriteUnlock;
 8007ade:	4b94      	ldr	r3, [pc, #592]	; (8007d30 <main+0x2a4>)
 8007ae0:	22c5      	movs	r2, #197	; 0xc5
 8007ae2:	705a      	strb	r2, [r3, #1]
		HAL_I2C_Master_Transmit(&NixieBus, Nixie_ID_LeftLeft, I2C_Buffer, 2, 1000);
 8007ae4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007ae8:	9300      	str	r3, [sp, #0]
 8007aea:	2302      	movs	r3, #2
 8007aec:	4a90      	ldr	r2, [pc, #576]	; (8007d30 <main+0x2a4>)
 8007aee:	2146      	movs	r1, #70	; 0x46
 8007af0:	4890      	ldr	r0, [pc, #576]	; (8007d34 <main+0x2a8>)
 8007af2:	f7f9 fa03 	bl	8000efc <HAL_I2C_Master_Transmit>
		HAL_I2C_Master_Transmit(&NixieBus, Nixie_ID_LeftRight, I2C_Buffer, 2, 1000);
 8007af6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007afa:	9300      	str	r3, [sp, #0]
 8007afc:	2302      	movs	r3, #2
 8007afe:	4a8c      	ldr	r2, [pc, #560]	; (8007d30 <main+0x2a4>)
 8007b00:	215e      	movs	r1, #94	; 0x5e
 8007b02:	488c      	ldr	r0, [pc, #560]	; (8007d34 <main+0x2a8>)
 8007b04:	f7f9 f9fa 	bl	8000efc <HAL_I2C_Master_Transmit>
		HAL_I2C_Master_Transmit(&NixieBus, Nixie_ID_RightLeft, I2C_Buffer, 2, 1000);
 8007b08:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007b0c:	9300      	str	r3, [sp, #0]
 8007b0e:	2302      	movs	r3, #2
 8007b10:	4a87      	ldr	r2, [pc, #540]	; (8007d30 <main+0x2a4>)
 8007b12:	2140      	movs	r1, #64	; 0x40
 8007b14:	4887      	ldr	r0, [pc, #540]	; (8007d34 <main+0x2a8>)
 8007b16:	f7f9 f9f1 	bl	8000efc <HAL_I2C_Master_Transmit>
		HAL_I2C_Master_Transmit(&NixieBus, Nixie_ID_RightRight, I2C_Buffer, 2, 1000);
 8007b1a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007b1e:	9300      	str	r3, [sp, #0]
 8007b20:	2302      	movs	r3, #2
 8007b22:	4a83      	ldr	r2, [pc, #524]	; (8007d30 <main+0x2a4>)
 8007b24:	2158      	movs	r1, #88	; 0x58
 8007b26:	4883      	ldr	r0, [pc, #524]	; (8007d34 <main+0x2a8>)
 8007b28:	f7f9 f9e8 	bl	8000efc <HAL_I2C_Master_Transmit>

		I2C_Buffer[0] = CommandRegister;
 8007b2c:	4b80      	ldr	r3, [pc, #512]	; (8007d30 <main+0x2a4>)
 8007b2e:	22fd      	movs	r2, #253	; 0xfd
 8007b30:	701a      	strb	r2, [r3, #0]
		I2C_Buffer[1] = PWMRegister;
 8007b32:	4b7f      	ldr	r3, [pc, #508]	; (8007d30 <main+0x2a4>)
 8007b34:	2200      	movs	r2, #0
 8007b36:	705a      	strb	r2, [r3, #1]
		HAL_I2C_Master_Transmit(&NixieBus, Nixie_ID_LeftLeft, I2C_Buffer, 2, 1000);
 8007b38:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007b3c:	9300      	str	r3, [sp, #0]
 8007b3e:	2302      	movs	r3, #2
 8007b40:	4a7b      	ldr	r2, [pc, #492]	; (8007d30 <main+0x2a4>)
 8007b42:	2146      	movs	r1, #70	; 0x46
 8007b44:	487b      	ldr	r0, [pc, #492]	; (8007d34 <main+0x2a8>)
 8007b46:	f7f9 f9d9 	bl	8000efc <HAL_I2C_Master_Transmit>
		HAL_I2C_Master_Transmit(&NixieBus, Nixie_ID_LeftRight, I2C_Buffer, 2, 1000);
 8007b4a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007b4e:	9300      	str	r3, [sp, #0]
 8007b50:	2302      	movs	r3, #2
 8007b52:	4a77      	ldr	r2, [pc, #476]	; (8007d30 <main+0x2a4>)
 8007b54:	215e      	movs	r1, #94	; 0x5e
 8007b56:	4877      	ldr	r0, [pc, #476]	; (8007d34 <main+0x2a8>)
 8007b58:	f7f9 f9d0 	bl	8000efc <HAL_I2C_Master_Transmit>
		HAL_I2C_Master_Transmit(&NixieBus, Nixie_ID_RightLeft, I2C_Buffer, 2, 1000);
 8007b5c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007b60:	9300      	str	r3, [sp, #0]
 8007b62:	2302      	movs	r3, #2
 8007b64:	4a72      	ldr	r2, [pc, #456]	; (8007d30 <main+0x2a4>)
 8007b66:	2140      	movs	r1, #64	; 0x40
 8007b68:	4872      	ldr	r0, [pc, #456]	; (8007d34 <main+0x2a8>)
 8007b6a:	f7f9 f9c7 	bl	8000efc <HAL_I2C_Master_Transmit>
		HAL_I2C_Master_Transmit(&NixieBus, Nixie_ID_RightRight, I2C_Buffer, 2, 1000);
 8007b6e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007b72:	9300      	str	r3, [sp, #0]
 8007b74:	2302      	movs	r3, #2
 8007b76:	4a6e      	ldr	r2, [pc, #440]	; (8007d30 <main+0x2a4>)
 8007b78:	2158      	movs	r1, #88	; 0x58
 8007b7a:	486e      	ldr	r0, [pc, #440]	; (8007d34 <main+0x2a8>)
 8007b7c:	f7f9 f9be 	bl	8000efc <HAL_I2C_Master_Transmit>

		HAL_I2C_Master_Transmit(&NixieBus, Nixie_ID_LeftLeft, image_data_nixie5, 199, 1000);
 8007b80:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007b84:	9300      	str	r3, [sp, #0]
 8007b86:	23c7      	movs	r3, #199	; 0xc7
 8007b88:	4a6b      	ldr	r2, [pc, #428]	; (8007d38 <main+0x2ac>)
 8007b8a:	2146      	movs	r1, #70	; 0x46
 8007b8c:	4869      	ldr	r0, [pc, #420]	; (8007d34 <main+0x2a8>)
 8007b8e:	f7f9 f9b5 	bl	8000efc <HAL_I2C_Master_Transmit>
		HAL_I2C_Master_Transmit(&NixieBus, Nixie_ID_LeftRight, image_data_nixie5, 199, 1000);
 8007b92:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007b96:	9300      	str	r3, [sp, #0]
 8007b98:	23c7      	movs	r3, #199	; 0xc7
 8007b9a:	4a67      	ldr	r2, [pc, #412]	; (8007d38 <main+0x2ac>)
 8007b9c:	215e      	movs	r1, #94	; 0x5e
 8007b9e:	4865      	ldr	r0, [pc, #404]	; (8007d34 <main+0x2a8>)
 8007ba0:	f7f9 f9ac 	bl	8000efc <HAL_I2C_Master_Transmit>
		HAL_I2C_Master_Transmit(&NixieBus, Nixie_ID_RightLeft, image_data_nixie5, 199, 1000);
 8007ba4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007ba8:	9300      	str	r3, [sp, #0]
 8007baa:	23c7      	movs	r3, #199	; 0xc7
 8007bac:	4a62      	ldr	r2, [pc, #392]	; (8007d38 <main+0x2ac>)
 8007bae:	2140      	movs	r1, #64	; 0x40
 8007bb0:	4860      	ldr	r0, [pc, #384]	; (8007d34 <main+0x2a8>)
 8007bb2:	f7f9 f9a3 	bl	8000efc <HAL_I2C_Master_Transmit>
		HAL_I2C_Master_Transmit(&NixieBus, Nixie_ID_RightRight, image_data_nixie5, 199, 1000);
 8007bb6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007bba:	9300      	str	r3, [sp, #0]
 8007bbc:	23c7      	movs	r3, #199	; 0xc7
 8007bbe:	4a5e      	ldr	r2, [pc, #376]	; (8007d38 <main+0x2ac>)
 8007bc0:	2158      	movs	r1, #88	; 0x58
 8007bc2:	485c      	ldr	r0, [pc, #368]	; (8007d34 <main+0x2a8>)
 8007bc4:	f7f9 f99a 	bl	8000efc <HAL_I2C_Master_Transmit>


	  HAL_Delay(1000);
 8007bc8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8007bcc:	f7f8 fd4c 	bl	8000668 <HAL_Delay>

		I2C_Buffer[0] = 0x01;
 8007bd0:	4b57      	ldr	r3, [pc, #348]	; (8007d30 <main+0x2a4>)
 8007bd2:	2201      	movs	r2, #1
 8007bd4:	701a      	strb	r2, [r3, #0]
		for(uint8_t loop = 1; loop < 0xC7 ; loop ++)
 8007bd6:	2301      	movs	r3, #1
 8007bd8:	71fb      	strb	r3, [r7, #7]
 8007bda:	e006      	b.n	8007bea <main+0x15e>
		{
			I2C_Buffer[loop] = 0x0;
 8007bdc:	79fb      	ldrb	r3, [r7, #7]
 8007bde:	4a54      	ldr	r2, [pc, #336]	; (8007d30 <main+0x2a4>)
 8007be0:	2100      	movs	r1, #0
 8007be2:	54d1      	strb	r1, [r2, r3]
		for(uint8_t loop = 1; loop < 0xC7 ; loop ++)
 8007be4:	79fb      	ldrb	r3, [r7, #7]
 8007be6:	3301      	adds	r3, #1
 8007be8:	71fb      	strb	r3, [r7, #7]
 8007bea:	79fb      	ldrb	r3, [r7, #7]
 8007bec:	2bc6      	cmp	r3, #198	; 0xc6
 8007bee:	d9f5      	bls.n	8007bdc <main+0x150>
		}
			HAL_I2C_Master_Transmit(&NixieBus, Nixie_ID_LeftLeft, I2C_Buffer, 199, 1000);
 8007bf0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007bf4:	9300      	str	r3, [sp, #0]
 8007bf6:	23c7      	movs	r3, #199	; 0xc7
 8007bf8:	4a4d      	ldr	r2, [pc, #308]	; (8007d30 <main+0x2a4>)
 8007bfa:	2146      	movs	r1, #70	; 0x46
 8007bfc:	484d      	ldr	r0, [pc, #308]	; (8007d34 <main+0x2a8>)
 8007bfe:	f7f9 f97d 	bl	8000efc <HAL_I2C_Master_Transmit>
			HAL_I2C_Master_Transmit(&NixieBus, Nixie_ID_LeftRight, I2C_Buffer, 199, 1000);
 8007c02:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007c06:	9300      	str	r3, [sp, #0]
 8007c08:	23c7      	movs	r3, #199	; 0xc7
 8007c0a:	4a49      	ldr	r2, [pc, #292]	; (8007d30 <main+0x2a4>)
 8007c0c:	215e      	movs	r1, #94	; 0x5e
 8007c0e:	4849      	ldr	r0, [pc, #292]	; (8007d34 <main+0x2a8>)
 8007c10:	f7f9 f974 	bl	8000efc <HAL_I2C_Master_Transmit>
			HAL_I2C_Master_Transmit(&NixieBus, Nixie_ID_RightLeft, I2C_Buffer, 199, 1000);
 8007c14:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007c18:	9300      	str	r3, [sp, #0]
 8007c1a:	23c7      	movs	r3, #199	; 0xc7
 8007c1c:	4a44      	ldr	r2, [pc, #272]	; (8007d30 <main+0x2a4>)
 8007c1e:	2140      	movs	r1, #64	; 0x40
 8007c20:	4844      	ldr	r0, [pc, #272]	; (8007d34 <main+0x2a8>)
 8007c22:	f7f9 f96b 	bl	8000efc <HAL_I2C_Master_Transmit>
			HAL_I2C_Master_Transmit(&NixieBus, Nixie_ID_RightRight, I2C_Buffer, 199, 1000);
 8007c26:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007c2a:	9300      	str	r3, [sp, #0]
 8007c2c:	23c7      	movs	r3, #199	; 0xc7
 8007c2e:	4a40      	ldr	r2, [pc, #256]	; (8007d30 <main+0x2a4>)
 8007c30:	2158      	movs	r1, #88	; 0x58
 8007c32:	4840      	ldr	r0, [pc, #256]	; (8007d34 <main+0x2a8>)
 8007c34:	f7f9 f962 	bl	8000efc <HAL_I2C_Master_Transmit>

		HAL_Delay(100);
 8007c38:	2064      	movs	r0, #100	; 0x64
 8007c3a:	f7f8 fd15 	bl	8000668 <HAL_Delay>
//			HAL_I2C_Master_Transmit(&NixieBus, Nixie_ID_RightRight, I2C_Buffer, 199, 1000);
//
//		HAL_Delay(2000);


		I2C_Buffer[0] = 0x01;
 8007c3e:	4b3c      	ldr	r3, [pc, #240]	; (8007d30 <main+0x2a4>)
 8007c40:	2201      	movs	r2, #1
 8007c42:	701a      	strb	r2, [r3, #0]
		for(uint8_t loop = 1; loop < 0xC7 ; loop ++)
 8007c44:	2301      	movs	r3, #1
 8007c46:	71bb      	strb	r3, [r7, #6]
 8007c48:	e006      	b.n	8007c58 <main+0x1cc>
		{
			I2C_Buffer[loop] = 0x0;
 8007c4a:	79bb      	ldrb	r3, [r7, #6]
 8007c4c:	4a38      	ldr	r2, [pc, #224]	; (8007d30 <main+0x2a4>)
 8007c4e:	2100      	movs	r1, #0
 8007c50:	54d1      	strb	r1, [r2, r3]
		for(uint8_t loop = 1; loop < 0xC7 ; loop ++)
 8007c52:	79bb      	ldrb	r3, [r7, #6]
 8007c54:	3301      	adds	r3, #1
 8007c56:	71bb      	strb	r3, [r7, #6]
 8007c58:	79bb      	ldrb	r3, [r7, #6]
 8007c5a:	2bc6      	cmp	r3, #198	; 0xc6
 8007c5c:	d9f5      	bls.n	8007c4a <main+0x1be>
		}
			HAL_I2C_Master_Transmit(&NixieBus, Nixie_ID_LeftLeft, I2C_Buffer, 199, 1000);
 8007c5e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007c62:	9300      	str	r3, [sp, #0]
 8007c64:	23c7      	movs	r3, #199	; 0xc7
 8007c66:	4a32      	ldr	r2, [pc, #200]	; (8007d30 <main+0x2a4>)
 8007c68:	2146      	movs	r1, #70	; 0x46
 8007c6a:	4832      	ldr	r0, [pc, #200]	; (8007d34 <main+0x2a8>)
 8007c6c:	f7f9 f946 	bl	8000efc <HAL_I2C_Master_Transmit>
			HAL_I2C_Master_Transmit(&NixieBus, Nixie_ID_LeftRight, I2C_Buffer, 199, 1000);
 8007c70:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007c74:	9300      	str	r3, [sp, #0]
 8007c76:	23c7      	movs	r3, #199	; 0xc7
 8007c78:	4a2d      	ldr	r2, [pc, #180]	; (8007d30 <main+0x2a4>)
 8007c7a:	215e      	movs	r1, #94	; 0x5e
 8007c7c:	482d      	ldr	r0, [pc, #180]	; (8007d34 <main+0x2a8>)
 8007c7e:	f7f9 f93d 	bl	8000efc <HAL_I2C_Master_Transmit>
			HAL_I2C_Master_Transmit(&NixieBus, Nixie_ID_RightLeft, I2C_Buffer, 199, 1000);
 8007c82:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007c86:	9300      	str	r3, [sp, #0]
 8007c88:	23c7      	movs	r3, #199	; 0xc7
 8007c8a:	4a29      	ldr	r2, [pc, #164]	; (8007d30 <main+0x2a4>)
 8007c8c:	2140      	movs	r1, #64	; 0x40
 8007c8e:	4829      	ldr	r0, [pc, #164]	; (8007d34 <main+0x2a8>)
 8007c90:	f7f9 f934 	bl	8000efc <HAL_I2C_Master_Transmit>
			HAL_I2C_Master_Transmit(&NixieBus, Nixie_ID_RightRight, I2C_Buffer, 199, 1000);
 8007c94:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007c98:	9300      	str	r3, [sp, #0]
 8007c9a:	23c7      	movs	r3, #199	; 0xc7
 8007c9c:	4a24      	ldr	r2, [pc, #144]	; (8007d30 <main+0x2a4>)
 8007c9e:	2158      	movs	r1, #88	; 0x58
 8007ca0:	4824      	ldr	r0, [pc, #144]	; (8007d34 <main+0x2a8>)
 8007ca2:	f7f9 f92b 	bl	8000efc <HAL_I2C_Master_Transmit>

		HAL_Delay(500);
 8007ca6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8007caa:	f7f8 fcdd 	bl	8000668 <HAL_Delay>


		for(uint8_t loop = 1; loop < 0xC7 ; loop ++)
 8007cae:	2301      	movs	r3, #1
 8007cb0:	717b      	strb	r3, [r7, #5]
 8007cb2:	e02f      	b.n	8007d14 <main+0x288>
		{
			I2C_Buffer[0] = loop;
 8007cb4:	4a1e      	ldr	r2, [pc, #120]	; (8007d30 <main+0x2a4>)
 8007cb6:	797b      	ldrb	r3, [r7, #5]
 8007cb8:	7013      	strb	r3, [r2, #0]
			I2C_Buffer[1] = 0x1F;
 8007cba:	4b1d      	ldr	r3, [pc, #116]	; (8007d30 <main+0x2a4>)
 8007cbc:	221f      	movs	r2, #31
 8007cbe:	705a      	strb	r2, [r3, #1]
			HAL_I2C_Master_Transmit(&NixieBus, Nixie_ID_LeftLeft, I2C_Buffer, 2, 1000);
 8007cc0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007cc4:	9300      	str	r3, [sp, #0]
 8007cc6:	2302      	movs	r3, #2
 8007cc8:	4a19      	ldr	r2, [pc, #100]	; (8007d30 <main+0x2a4>)
 8007cca:	2146      	movs	r1, #70	; 0x46
 8007ccc:	4819      	ldr	r0, [pc, #100]	; (8007d34 <main+0x2a8>)
 8007cce:	f7f9 f915 	bl	8000efc <HAL_I2C_Master_Transmit>
			HAL_I2C_Master_Transmit(&NixieBus, Nixie_ID_LeftRight, I2C_Buffer, 2, 1000);
 8007cd2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007cd6:	9300      	str	r3, [sp, #0]
 8007cd8:	2302      	movs	r3, #2
 8007cda:	4a15      	ldr	r2, [pc, #84]	; (8007d30 <main+0x2a4>)
 8007cdc:	215e      	movs	r1, #94	; 0x5e
 8007cde:	4815      	ldr	r0, [pc, #84]	; (8007d34 <main+0x2a8>)
 8007ce0:	f7f9 f90c 	bl	8000efc <HAL_I2C_Master_Transmit>
			HAL_I2C_Master_Transmit(&NixieBus, Nixie_ID_RightLeft, I2C_Buffer, 2, 1000);
 8007ce4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007ce8:	9300      	str	r3, [sp, #0]
 8007cea:	2302      	movs	r3, #2
 8007cec:	4a10      	ldr	r2, [pc, #64]	; (8007d30 <main+0x2a4>)
 8007cee:	2140      	movs	r1, #64	; 0x40
 8007cf0:	4810      	ldr	r0, [pc, #64]	; (8007d34 <main+0x2a8>)
 8007cf2:	f7f9 f903 	bl	8000efc <HAL_I2C_Master_Transmit>
			HAL_I2C_Master_Transmit(&NixieBus, Nixie_ID_RightRight, I2C_Buffer, 2, 1000);
 8007cf6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007cfa:	9300      	str	r3, [sp, #0]
 8007cfc:	2302      	movs	r3, #2
 8007cfe:	4a0c      	ldr	r2, [pc, #48]	; (8007d30 <main+0x2a4>)
 8007d00:	2158      	movs	r1, #88	; 0x58
 8007d02:	480c      	ldr	r0, [pc, #48]	; (8007d34 <main+0x2a8>)
 8007d04:	f7f9 f8fa 	bl	8000efc <HAL_I2C_Master_Transmit>
		HAL_Delay(50);
 8007d08:	2032      	movs	r0, #50	; 0x32
 8007d0a:	f7f8 fcad 	bl	8000668 <HAL_Delay>
		for(uint8_t loop = 1; loop < 0xC7 ; loop ++)
 8007d0e:	797b      	ldrb	r3, [r7, #5]
 8007d10:	3301      	adds	r3, #1
 8007d12:	717b      	strb	r3, [r7, #5]
 8007d14:	797b      	ldrb	r3, [r7, #5]
 8007d16:	2bc6      	cmp	r3, #198	; 0xc6
 8007d18:	d9cc      	bls.n	8007cb4 <main+0x228>
	  superUserRunForever(CMD_Buffer, &CMD_Len);
 8007d1a:	e6d9      	b.n	8007ad0 <main+0x44>
 8007d1c:	200004ac 	.word	0x200004ac
 8007d20:	20000594 	.word	0x20000594
 8007d24:	20000500 	.word	0x20000500
 8007d28:	200004a8 	.word	0x200004a8
 8007d2c:	200003a8 	.word	0x200003a8
 8007d30:	200002a8 	.word	0x200002a8
 8007d34:	20000254 	.word	0x20000254
 8007d38:	20000094 	.word	0x20000094

08007d3c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8007d3c:	b580      	push	{r7, lr}
 8007d3e:	b094      	sub	sp, #80	; 0x50
 8007d40:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8007d42:	f107 0320 	add.w	r3, r7, #32
 8007d46:	2230      	movs	r2, #48	; 0x30
 8007d48:	2100      	movs	r1, #0
 8007d4a:	4618      	mov	r0, r3
 8007d4c:	f001 f8ec 	bl	8008f28 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8007d50:	f107 030c 	add.w	r3, r7, #12
 8007d54:	2200      	movs	r2, #0
 8007d56:	601a      	str	r2, [r3, #0]
 8007d58:	605a      	str	r2, [r3, #4]
 8007d5a:	609a      	str	r2, [r3, #8]
 8007d5c:	60da      	str	r2, [r3, #12]
 8007d5e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8007d60:	2300      	movs	r3, #0
 8007d62:	60bb      	str	r3, [r7, #8]
 8007d64:	4b28      	ldr	r3, [pc, #160]	; (8007e08 <SystemClock_Config+0xcc>)
 8007d66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d68:	4a27      	ldr	r2, [pc, #156]	; (8007e08 <SystemClock_Config+0xcc>)
 8007d6a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007d6e:	6413      	str	r3, [r2, #64]	; 0x40
 8007d70:	4b25      	ldr	r3, [pc, #148]	; (8007e08 <SystemClock_Config+0xcc>)
 8007d72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007d78:	60bb      	str	r3, [r7, #8]
 8007d7a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8007d7c:	2300      	movs	r3, #0
 8007d7e:	607b      	str	r3, [r7, #4]
 8007d80:	4b22      	ldr	r3, [pc, #136]	; (8007e0c <SystemClock_Config+0xd0>)
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	4a21      	ldr	r2, [pc, #132]	; (8007e0c <SystemClock_Config+0xd0>)
 8007d86:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007d8a:	6013      	str	r3, [r2, #0]
 8007d8c:	4b1f      	ldr	r3, [pc, #124]	; (8007e0c <SystemClock_Config+0xd0>)
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007d94:	607b      	str	r3, [r7, #4]
 8007d96:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8007d98:	2301      	movs	r3, #1
 8007d9a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8007d9c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007da0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8007da2:	2302      	movs	r3, #2
 8007da4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8007da6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8007daa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 6;
 8007dac:	2306      	movs	r3, #6
 8007dae:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8007db0:	23a8      	movs	r3, #168	; 0xa8
 8007db2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8007db4:	2302      	movs	r3, #2
 8007db6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8007db8:	2307      	movs	r3, #7
 8007dba:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8007dbc:	f107 0320 	add.w	r3, r7, #32
 8007dc0:	4618      	mov	r0, r3
 8007dc2:	f7fa fe1f 	bl	8002a04 <HAL_RCC_OscConfig>
 8007dc6:	4603      	mov	r3, r0
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d001      	beq.n	8007dd0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8007dcc:	f000 f948 	bl	8008060 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8007dd0:	230f      	movs	r3, #15
 8007dd2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8007dd4:	2302      	movs	r3, #2
 8007dd6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8007dd8:	2300      	movs	r3, #0
 8007dda:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8007ddc:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8007de0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8007de2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007de6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8007de8:	f107 030c 	add.w	r3, r7, #12
 8007dec:	2105      	movs	r1, #5
 8007dee:	4618      	mov	r0, r3
 8007df0:	f7fb f880 	bl	8002ef4 <HAL_RCC_ClockConfig>
 8007df4:	4603      	mov	r3, r0
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d001      	beq.n	8007dfe <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8007dfa:	f000 f931 	bl	8008060 <Error_Handler>
  }
}
 8007dfe:	bf00      	nop
 8007e00:	3750      	adds	r7, #80	; 0x50
 8007e02:	46bd      	mov	sp, r7
 8007e04:	bd80      	pop	{r7, pc}
 8007e06:	bf00      	nop
 8007e08:	40023800 	.word	0x40023800
 8007e0c:	40007000 	.word	0x40007000

08007e10 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8007e10:	b580      	push	{r7, lr}
 8007e12:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8007e14:	4b12      	ldr	r3, [pc, #72]	; (8007e60 <MX_I2C1_Init+0x50>)
 8007e16:	4a13      	ldr	r2, [pc, #76]	; (8007e64 <MX_I2C1_Init+0x54>)
 8007e18:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8007e1a:	4b11      	ldr	r3, [pc, #68]	; (8007e60 <MX_I2C1_Init+0x50>)
 8007e1c:	4a12      	ldr	r2, [pc, #72]	; (8007e68 <MX_I2C1_Init+0x58>)
 8007e1e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8007e20:	4b0f      	ldr	r3, [pc, #60]	; (8007e60 <MX_I2C1_Init+0x50>)
 8007e22:	2200      	movs	r2, #0
 8007e24:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8007e26:	4b0e      	ldr	r3, [pc, #56]	; (8007e60 <MX_I2C1_Init+0x50>)
 8007e28:	2200      	movs	r2, #0
 8007e2a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8007e2c:	4b0c      	ldr	r3, [pc, #48]	; (8007e60 <MX_I2C1_Init+0x50>)
 8007e2e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8007e32:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8007e34:	4b0a      	ldr	r3, [pc, #40]	; (8007e60 <MX_I2C1_Init+0x50>)
 8007e36:	2200      	movs	r2, #0
 8007e38:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8007e3a:	4b09      	ldr	r3, [pc, #36]	; (8007e60 <MX_I2C1_Init+0x50>)
 8007e3c:	2200      	movs	r2, #0
 8007e3e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8007e40:	4b07      	ldr	r3, [pc, #28]	; (8007e60 <MX_I2C1_Init+0x50>)
 8007e42:	2200      	movs	r2, #0
 8007e44:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8007e46:	4b06      	ldr	r3, [pc, #24]	; (8007e60 <MX_I2C1_Init+0x50>)
 8007e48:	2200      	movs	r2, #0
 8007e4a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8007e4c:	4804      	ldr	r0, [pc, #16]	; (8007e60 <MX_I2C1_Init+0x50>)
 8007e4e:	f7f8 ff11 	bl	8000c74 <HAL_I2C_Init>
 8007e52:	4603      	mov	r3, r0
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d001      	beq.n	8007e5c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8007e58:	f000 f902 	bl	8008060 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8007e5c:	bf00      	nop
 8007e5e:	bd80      	pop	{r7, pc}
 8007e60:	200004ac 	.word	0x200004ac
 8007e64:	40005400 	.word	0x40005400
 8007e68:	00061a80 	.word	0x00061a80

08007e6c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8007e6c:	b580      	push	{r7, lr}
 8007e6e:	b086      	sub	sp, #24
 8007e70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8007e72:	f107 0308 	add.w	r3, r7, #8
 8007e76:	2200      	movs	r2, #0
 8007e78:	601a      	str	r2, [r3, #0]
 8007e7a:	605a      	str	r2, [r3, #4]
 8007e7c:	609a      	str	r2, [r3, #8]
 8007e7e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007e80:	463b      	mov	r3, r7
 8007e82:	2200      	movs	r2, #0
 8007e84:	601a      	str	r2, [r3, #0]
 8007e86:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8007e88:	4b1e      	ldr	r3, [pc, #120]	; (8007f04 <MX_TIM2_Init+0x98>)
 8007e8a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8007e8e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 4199;
 8007e90:	4b1c      	ldr	r3, [pc, #112]	; (8007f04 <MX_TIM2_Init+0x98>)
 8007e92:	f241 0267 	movw	r2, #4199	; 0x1067
 8007e96:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007e98:	4b1a      	ldr	r3, [pc, #104]	; (8007f04 <MX_TIM2_Init+0x98>)
 8007e9a:	2200      	movs	r2, #0
 8007e9c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 8007e9e:	4b19      	ldr	r3, [pc, #100]	; (8007f04 <MX_TIM2_Init+0x98>)
 8007ea0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007ea4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007ea6:	4b17      	ldr	r3, [pc, #92]	; (8007f04 <MX_TIM2_Init+0x98>)
 8007ea8:	2200      	movs	r2, #0
 8007eaa:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8007eac:	4b15      	ldr	r3, [pc, #84]	; (8007f04 <MX_TIM2_Init+0x98>)
 8007eae:	2200      	movs	r2, #0
 8007eb0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8007eb2:	4814      	ldr	r0, [pc, #80]	; (8007f04 <MX_TIM2_Init+0x98>)
 8007eb4:	f7fb f9ea 	bl	800328c <HAL_TIM_Base_Init>
 8007eb8:	4603      	mov	r3, r0
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d001      	beq.n	8007ec2 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8007ebe:	f000 f8cf 	bl	8008060 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8007ec2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007ec6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8007ec8:	f107 0308 	add.w	r3, r7, #8
 8007ecc:	4619      	mov	r1, r3
 8007ece:	480d      	ldr	r0, [pc, #52]	; (8007f04 <MX_TIM2_Init+0x98>)
 8007ed0:	f7fb fba4 	bl	800361c <HAL_TIM_ConfigClockSource>
 8007ed4:	4603      	mov	r3, r0
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d001      	beq.n	8007ede <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8007eda:	f000 f8c1 	bl	8008060 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8007ede:	2300      	movs	r3, #0
 8007ee0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8007ee2:	2300      	movs	r3, #0
 8007ee4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8007ee6:	463b      	mov	r3, r7
 8007ee8:	4619      	mov	r1, r3
 8007eea:	4806      	ldr	r0, [pc, #24]	; (8007f04 <MX_TIM2_Init+0x98>)
 8007eec:	f7fb fdca 	bl	8003a84 <HAL_TIMEx_MasterConfigSynchronization>
 8007ef0:	4603      	mov	r3, r0
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d001      	beq.n	8007efa <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8007ef6:	f000 f8b3 	bl	8008060 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8007efa:	bf00      	nop
 8007efc:	3718      	adds	r7, #24
 8007efe:	46bd      	mov	sp, r7
 8007f00:	bd80      	pop	{r7, pc}
 8007f02:	bf00      	nop
 8007f04:	20000500 	.word	0x20000500

08007f08 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8007f08:	b580      	push	{r7, lr}
 8007f0a:	b086      	sub	sp, #24
 8007f0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8007f0e:	f107 0308 	add.w	r3, r7, #8
 8007f12:	2200      	movs	r2, #0
 8007f14:	601a      	str	r2, [r3, #0]
 8007f16:	605a      	str	r2, [r3, #4]
 8007f18:	609a      	str	r2, [r3, #8]
 8007f1a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007f1c:	463b      	mov	r3, r7
 8007f1e:	2200      	movs	r2, #0
 8007f20:	601a      	str	r2, [r3, #0]
 8007f22:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8007f24:	4b1d      	ldr	r3, [pc, #116]	; (8007f9c <MX_TIM3_Init+0x94>)
 8007f26:	4a1e      	ldr	r2, [pc, #120]	; (8007fa0 <MX_TIM3_Init+0x98>)
 8007f28:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8007f2a:	4b1c      	ldr	r3, [pc, #112]	; (8007f9c <MX_TIM3_Init+0x94>)
 8007f2c:	2200      	movs	r2, #0
 8007f2e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007f30:	4b1a      	ldr	r3, [pc, #104]	; (8007f9c <MX_TIM3_Init+0x94>)
 8007f32:	2200      	movs	r2, #0
 8007f34:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8007f36:	4b19      	ldr	r3, [pc, #100]	; (8007f9c <MX_TIM3_Init+0x94>)
 8007f38:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007f3c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007f3e:	4b17      	ldr	r3, [pc, #92]	; (8007f9c <MX_TIM3_Init+0x94>)
 8007f40:	2200      	movs	r2, #0
 8007f42:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8007f44:	4b15      	ldr	r3, [pc, #84]	; (8007f9c <MX_TIM3_Init+0x94>)
 8007f46:	2200      	movs	r2, #0
 8007f48:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8007f4a:	4814      	ldr	r0, [pc, #80]	; (8007f9c <MX_TIM3_Init+0x94>)
 8007f4c:	f7fb f99e 	bl	800328c <HAL_TIM_Base_Init>
 8007f50:	4603      	mov	r3, r0
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d001      	beq.n	8007f5a <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8007f56:	f000 f883 	bl	8008060 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8007f5a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007f5e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8007f60:	f107 0308 	add.w	r3, r7, #8
 8007f64:	4619      	mov	r1, r3
 8007f66:	480d      	ldr	r0, [pc, #52]	; (8007f9c <MX_TIM3_Init+0x94>)
 8007f68:	f7fb fb58 	bl	800361c <HAL_TIM_ConfigClockSource>
 8007f6c:	4603      	mov	r3, r0
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d001      	beq.n	8007f76 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8007f72:	f000 f875 	bl	8008060 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8007f76:	2300      	movs	r3, #0
 8007f78:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8007f7a:	2300      	movs	r3, #0
 8007f7c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8007f7e:	463b      	mov	r3, r7
 8007f80:	4619      	mov	r1, r3
 8007f82:	4806      	ldr	r0, [pc, #24]	; (8007f9c <MX_TIM3_Init+0x94>)
 8007f84:	f7fb fd7e 	bl	8003a84 <HAL_TIMEx_MasterConfigSynchronization>
 8007f88:	4603      	mov	r3, r0
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d001      	beq.n	8007f92 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8007f8e:	f000 f867 	bl	8008060 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8007f92:	bf00      	nop
 8007f94:	3718      	adds	r7, #24
 8007f96:	46bd      	mov	sp, r7
 8007f98:	bd80      	pop	{r7, pc}
 8007f9a:	bf00      	nop
 8007f9c:	20000548 	.word	0x20000548
 8007fa0:	40000400 	.word	0x40000400

08007fa4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8007fa4:	b580      	push	{r7, lr}
 8007fa6:	b08a      	sub	sp, #40	; 0x28
 8007fa8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007faa:	f107 0314 	add.w	r3, r7, #20
 8007fae:	2200      	movs	r2, #0
 8007fb0:	601a      	str	r2, [r3, #0]
 8007fb2:	605a      	str	r2, [r3, #4]
 8007fb4:	609a      	str	r2, [r3, #8]
 8007fb6:	60da      	str	r2, [r3, #12]
 8007fb8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8007fba:	2300      	movs	r3, #0
 8007fbc:	613b      	str	r3, [r7, #16]
 8007fbe:	4b26      	ldr	r3, [pc, #152]	; (8008058 <MX_GPIO_Init+0xb4>)
 8007fc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007fc2:	4a25      	ldr	r2, [pc, #148]	; (8008058 <MX_GPIO_Init+0xb4>)
 8007fc4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007fc8:	6313      	str	r3, [r2, #48]	; 0x30
 8007fca:	4b23      	ldr	r3, [pc, #140]	; (8008058 <MX_GPIO_Init+0xb4>)
 8007fcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007fce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007fd2:	613b      	str	r3, [r7, #16]
 8007fd4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8007fd6:	2300      	movs	r3, #0
 8007fd8:	60fb      	str	r3, [r7, #12]
 8007fda:	4b1f      	ldr	r3, [pc, #124]	; (8008058 <MX_GPIO_Init+0xb4>)
 8007fdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007fde:	4a1e      	ldr	r2, [pc, #120]	; (8008058 <MX_GPIO_Init+0xb4>)
 8007fe0:	f043 0304 	orr.w	r3, r3, #4
 8007fe4:	6313      	str	r3, [r2, #48]	; 0x30
 8007fe6:	4b1c      	ldr	r3, [pc, #112]	; (8008058 <MX_GPIO_Init+0xb4>)
 8007fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007fea:	f003 0304 	and.w	r3, r3, #4
 8007fee:	60fb      	str	r3, [r7, #12]
 8007ff0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8007ff2:	2300      	movs	r3, #0
 8007ff4:	60bb      	str	r3, [r7, #8]
 8007ff6:	4b18      	ldr	r3, [pc, #96]	; (8008058 <MX_GPIO_Init+0xb4>)
 8007ff8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ffa:	4a17      	ldr	r2, [pc, #92]	; (8008058 <MX_GPIO_Init+0xb4>)
 8007ffc:	f043 0301 	orr.w	r3, r3, #1
 8008000:	6313      	str	r3, [r2, #48]	; 0x30
 8008002:	4b15      	ldr	r3, [pc, #84]	; (8008058 <MX_GPIO_Init+0xb4>)
 8008004:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008006:	f003 0301 	and.w	r3, r3, #1
 800800a:	60bb      	str	r3, [r7, #8]
 800800c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800800e:	2300      	movs	r3, #0
 8008010:	607b      	str	r3, [r7, #4]
 8008012:	4b11      	ldr	r3, [pc, #68]	; (8008058 <MX_GPIO_Init+0xb4>)
 8008014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008016:	4a10      	ldr	r2, [pc, #64]	; (8008058 <MX_GPIO_Init+0xb4>)
 8008018:	f043 0302 	orr.w	r3, r3, #2
 800801c:	6313      	str	r3, [r2, #48]	; 0x30
 800801e:	4b0e      	ldr	r3, [pc, #56]	; (8008058 <MX_GPIO_Init+0xb4>)
 8008020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008022:	f003 0302 	and.w	r3, r3, #2
 8008026:	607b      	str	r3, [r7, #4]
 8008028:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD_RED_GPIO_Port, LD_RED_Pin, GPIO_PIN_RESET);
 800802a:	2200      	movs	r2, #0
 800802c:	2102      	movs	r1, #2
 800802e:	480b      	ldr	r0, [pc, #44]	; (800805c <MX_GPIO_Init+0xb8>)
 8008030:	f7f8 fdec 	bl	8000c0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD_RED_Pin */
  GPIO_InitStruct.Pin = LD_RED_Pin;
 8008034:	2302      	movs	r3, #2
 8008036:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008038:	2301      	movs	r3, #1
 800803a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800803c:	2300      	movs	r3, #0
 800803e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008040:	2300      	movs	r3, #0
 8008042:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD_RED_GPIO_Port, &GPIO_InitStruct);
 8008044:	f107 0314 	add.w	r3, r7, #20
 8008048:	4619      	mov	r1, r3
 800804a:	4804      	ldr	r0, [pc, #16]	; (800805c <MX_GPIO_Init+0xb8>)
 800804c:	f7f8 fc42 	bl	80008d4 <HAL_GPIO_Init>

}
 8008050:	bf00      	nop
 8008052:	3728      	adds	r7, #40	; 0x28
 8008054:	46bd      	mov	sp, r7
 8008056:	bd80      	pop	{r7, pc}
 8008058:	40023800 	.word	0x40023800
 800805c:	40020800 	.word	0x40020800

08008060 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8008060:	b480      	push	{r7}
 8008062:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8008064:	b672      	cpsid	i
}
 8008066:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8008068:	e7fe      	b.n	8008068 <Error_Handler+0x8>
	...

0800806c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800806c:	b480      	push	{r7}
 800806e:	b083      	sub	sp, #12
 8008070:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008072:	2300      	movs	r3, #0
 8008074:	607b      	str	r3, [r7, #4]
 8008076:	4b10      	ldr	r3, [pc, #64]	; (80080b8 <HAL_MspInit+0x4c>)
 8008078:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800807a:	4a0f      	ldr	r2, [pc, #60]	; (80080b8 <HAL_MspInit+0x4c>)
 800807c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008080:	6453      	str	r3, [r2, #68]	; 0x44
 8008082:	4b0d      	ldr	r3, [pc, #52]	; (80080b8 <HAL_MspInit+0x4c>)
 8008084:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008086:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800808a:	607b      	str	r3, [r7, #4]
 800808c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800808e:	2300      	movs	r3, #0
 8008090:	603b      	str	r3, [r7, #0]
 8008092:	4b09      	ldr	r3, [pc, #36]	; (80080b8 <HAL_MspInit+0x4c>)
 8008094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008096:	4a08      	ldr	r2, [pc, #32]	; (80080b8 <HAL_MspInit+0x4c>)
 8008098:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800809c:	6413      	str	r3, [r2, #64]	; 0x40
 800809e:	4b06      	ldr	r3, [pc, #24]	; (80080b8 <HAL_MspInit+0x4c>)
 80080a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80080a6:	603b      	str	r3, [r7, #0]
 80080a8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80080aa:	bf00      	nop
 80080ac:	370c      	adds	r7, #12
 80080ae:	46bd      	mov	sp, r7
 80080b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080b4:	4770      	bx	lr
 80080b6:	bf00      	nop
 80080b8:	40023800 	.word	0x40023800

080080bc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80080bc:	b580      	push	{r7, lr}
 80080be:	b08a      	sub	sp, #40	; 0x28
 80080c0:	af00      	add	r7, sp, #0
 80080c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80080c4:	f107 0314 	add.w	r3, r7, #20
 80080c8:	2200      	movs	r2, #0
 80080ca:	601a      	str	r2, [r3, #0]
 80080cc:	605a      	str	r2, [r3, #4]
 80080ce:	609a      	str	r2, [r3, #8]
 80080d0:	60da      	str	r2, [r3, #12]
 80080d2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	4a19      	ldr	r2, [pc, #100]	; (8008140 <HAL_I2C_MspInit+0x84>)
 80080da:	4293      	cmp	r3, r2
 80080dc:	d12b      	bne.n	8008136 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80080de:	2300      	movs	r3, #0
 80080e0:	613b      	str	r3, [r7, #16]
 80080e2:	4b18      	ldr	r3, [pc, #96]	; (8008144 <HAL_I2C_MspInit+0x88>)
 80080e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080e6:	4a17      	ldr	r2, [pc, #92]	; (8008144 <HAL_I2C_MspInit+0x88>)
 80080e8:	f043 0302 	orr.w	r3, r3, #2
 80080ec:	6313      	str	r3, [r2, #48]	; 0x30
 80080ee:	4b15      	ldr	r3, [pc, #84]	; (8008144 <HAL_I2C_MspInit+0x88>)
 80080f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080f2:	f003 0302 	and.w	r3, r3, #2
 80080f6:	613b      	str	r3, [r7, #16]
 80080f8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80080fa:	23c0      	movs	r3, #192	; 0xc0
 80080fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80080fe:	2312      	movs	r3, #18
 8008100:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008102:	2300      	movs	r3, #0
 8008104:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008106:	2303      	movs	r3, #3
 8008108:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800810a:	2304      	movs	r3, #4
 800810c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800810e:	f107 0314 	add.w	r3, r7, #20
 8008112:	4619      	mov	r1, r3
 8008114:	480c      	ldr	r0, [pc, #48]	; (8008148 <HAL_I2C_MspInit+0x8c>)
 8008116:	f7f8 fbdd 	bl	80008d4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800811a:	2300      	movs	r3, #0
 800811c:	60fb      	str	r3, [r7, #12]
 800811e:	4b09      	ldr	r3, [pc, #36]	; (8008144 <HAL_I2C_MspInit+0x88>)
 8008120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008122:	4a08      	ldr	r2, [pc, #32]	; (8008144 <HAL_I2C_MspInit+0x88>)
 8008124:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008128:	6413      	str	r3, [r2, #64]	; 0x40
 800812a:	4b06      	ldr	r3, [pc, #24]	; (8008144 <HAL_I2C_MspInit+0x88>)
 800812c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800812e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008132:	60fb      	str	r3, [r7, #12]
 8008134:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8008136:	bf00      	nop
 8008138:	3728      	adds	r7, #40	; 0x28
 800813a:	46bd      	mov	sp, r7
 800813c:	bd80      	pop	{r7, pc}
 800813e:	bf00      	nop
 8008140:	40005400 	.word	0x40005400
 8008144:	40023800 	.word	0x40023800
 8008148:	40020400 	.word	0x40020400

0800814c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800814c:	b580      	push	{r7, lr}
 800814e:	b084      	sub	sp, #16
 8008150:	af00      	add	r7, sp, #0
 8008152:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800815c:	d116      	bne.n	800818c <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800815e:	2300      	movs	r3, #0
 8008160:	60fb      	str	r3, [r7, #12]
 8008162:	4b16      	ldr	r3, [pc, #88]	; (80081bc <HAL_TIM_Base_MspInit+0x70>)
 8008164:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008166:	4a15      	ldr	r2, [pc, #84]	; (80081bc <HAL_TIM_Base_MspInit+0x70>)
 8008168:	f043 0301 	orr.w	r3, r3, #1
 800816c:	6413      	str	r3, [r2, #64]	; 0x40
 800816e:	4b13      	ldr	r3, [pc, #76]	; (80081bc <HAL_TIM_Base_MspInit+0x70>)
 8008170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008172:	f003 0301 	and.w	r3, r3, #1
 8008176:	60fb      	str	r3, [r7, #12]
 8008178:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 2, 0);
 800817a:	2200      	movs	r2, #0
 800817c:	2102      	movs	r1, #2
 800817e:	201c      	movs	r0, #28
 8008180:	f7f8 fb71 	bl	8000866 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8008184:	201c      	movs	r0, #28
 8008186:	f7f8 fb8a 	bl	800089e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800818a:	e012      	b.n	80081b2 <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM3)
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	4a0b      	ldr	r2, [pc, #44]	; (80081c0 <HAL_TIM_Base_MspInit+0x74>)
 8008192:	4293      	cmp	r3, r2
 8008194:	d10d      	bne.n	80081b2 <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8008196:	2300      	movs	r3, #0
 8008198:	60bb      	str	r3, [r7, #8]
 800819a:	4b08      	ldr	r3, [pc, #32]	; (80081bc <HAL_TIM_Base_MspInit+0x70>)
 800819c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800819e:	4a07      	ldr	r2, [pc, #28]	; (80081bc <HAL_TIM_Base_MspInit+0x70>)
 80081a0:	f043 0302 	orr.w	r3, r3, #2
 80081a4:	6413      	str	r3, [r2, #64]	; 0x40
 80081a6:	4b05      	ldr	r3, [pc, #20]	; (80081bc <HAL_TIM_Base_MspInit+0x70>)
 80081a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081aa:	f003 0302 	and.w	r3, r3, #2
 80081ae:	60bb      	str	r3, [r7, #8]
 80081b0:	68bb      	ldr	r3, [r7, #8]
}
 80081b2:	bf00      	nop
 80081b4:	3710      	adds	r7, #16
 80081b6:	46bd      	mov	sp, r7
 80081b8:	bd80      	pop	{r7, pc}
 80081ba:	bf00      	nop
 80081bc:	40023800 	.word	0x40023800
 80081c0:	40000400 	.word	0x40000400

080081c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80081c4:	b480      	push	{r7}
 80081c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80081c8:	e7fe      	b.n	80081c8 <NMI_Handler+0x4>

080081ca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80081ca:	b480      	push	{r7}
 80081cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80081ce:	e7fe      	b.n	80081ce <HardFault_Handler+0x4>

080081d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80081d0:	b480      	push	{r7}
 80081d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80081d4:	e7fe      	b.n	80081d4 <MemManage_Handler+0x4>

080081d6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80081d6:	b480      	push	{r7}
 80081d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80081da:	e7fe      	b.n	80081da <BusFault_Handler+0x4>

080081dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80081dc:	b480      	push	{r7}
 80081de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80081e0:	e7fe      	b.n	80081e0 <UsageFault_Handler+0x4>

080081e2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80081e2:	b480      	push	{r7}
 80081e4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80081e6:	bf00      	nop
 80081e8:	46bd      	mov	sp, r7
 80081ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ee:	4770      	bx	lr

080081f0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80081f0:	b480      	push	{r7}
 80081f2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80081f4:	bf00      	nop
 80081f6:	46bd      	mov	sp, r7
 80081f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081fc:	4770      	bx	lr

080081fe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80081fe:	b480      	push	{r7}
 8008200:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8008202:	bf00      	nop
 8008204:	46bd      	mov	sp, r7
 8008206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800820a:	4770      	bx	lr

0800820c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800820c:	b580      	push	{r7, lr}
 800820e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8008210:	f7f8 fa0a 	bl	8000628 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8008214:	bf00      	nop
 8008216:	bd80      	pop	{r7, pc}

08008218 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8008218:	b580      	push	{r7, lr}
 800821a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
	HAL_GPIO_TogglePin(LD_RED_GPIO_Port, LD_RED_Pin);
 800821c:	2102      	movs	r1, #2
 800821e:	4804      	ldr	r0, [pc, #16]	; (8008230 <TIM2_IRQHandler+0x18>)
 8008220:	f7f8 fd0d 	bl	8000c3e <HAL_GPIO_TogglePin>

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8008224:	4803      	ldr	r0, [pc, #12]	; (8008234 <TIM2_IRQHandler+0x1c>)
 8008226:	f7fb f8f1 	bl	800340c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800822a:	bf00      	nop
 800822c:	bd80      	pop	{r7, pc}
 800822e:	bf00      	nop
 8008230:	40020800 	.word	0x40020800
 8008234:	20000500 	.word	0x20000500

08008238 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8008238:	b580      	push	{r7, lr}
 800823a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800823c:	4802      	ldr	r0, [pc, #8]	; (8008248 <OTG_FS_IRQHandler+0x10>)
 800823e:	f7f9 fab4 	bl	80017aa <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8008242:	bf00      	nop
 8008244:	bd80      	pop	{r7, pc}
 8008246:	bf00      	nop
 8008248:	20001870 	.word	0x20001870

0800824c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800824c:	b580      	push	{r7, lr}
 800824e:	b086      	sub	sp, #24
 8008250:	af00      	add	r7, sp, #0
 8008252:	60f8      	str	r0, [r7, #12]
 8008254:	60b9      	str	r1, [r7, #8]
 8008256:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008258:	2300      	movs	r3, #0
 800825a:	617b      	str	r3, [r7, #20]
 800825c:	e00a      	b.n	8008274 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800825e:	f3af 8000 	nop.w
 8008262:	4601      	mov	r1, r0
 8008264:	68bb      	ldr	r3, [r7, #8]
 8008266:	1c5a      	adds	r2, r3, #1
 8008268:	60ba      	str	r2, [r7, #8]
 800826a:	b2ca      	uxtb	r2, r1
 800826c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800826e:	697b      	ldr	r3, [r7, #20]
 8008270:	3301      	adds	r3, #1
 8008272:	617b      	str	r3, [r7, #20]
 8008274:	697a      	ldr	r2, [r7, #20]
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	429a      	cmp	r2, r3
 800827a:	dbf0      	blt.n	800825e <_read+0x12>
	}

return len;
 800827c:	687b      	ldr	r3, [r7, #4]
}
 800827e:	4618      	mov	r0, r3
 8008280:	3718      	adds	r7, #24
 8008282:	46bd      	mov	sp, r7
 8008284:	bd80      	pop	{r7, pc}

08008286 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8008286:	b580      	push	{r7, lr}
 8008288:	b086      	sub	sp, #24
 800828a:	af00      	add	r7, sp, #0
 800828c:	60f8      	str	r0, [r7, #12]
 800828e:	60b9      	str	r1, [r7, #8]
 8008290:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008292:	2300      	movs	r3, #0
 8008294:	617b      	str	r3, [r7, #20]
 8008296:	e009      	b.n	80082ac <_write+0x26>
	{
		__io_putchar(*ptr++);
 8008298:	68bb      	ldr	r3, [r7, #8]
 800829a:	1c5a      	adds	r2, r3, #1
 800829c:	60ba      	str	r2, [r7, #8]
 800829e:	781b      	ldrb	r3, [r3, #0]
 80082a0:	4618      	mov	r0, r3
 80082a2:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80082a6:	697b      	ldr	r3, [r7, #20]
 80082a8:	3301      	adds	r3, #1
 80082aa:	617b      	str	r3, [r7, #20]
 80082ac:	697a      	ldr	r2, [r7, #20]
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	429a      	cmp	r2, r3
 80082b2:	dbf1      	blt.n	8008298 <_write+0x12>
	}
	return len;
 80082b4:	687b      	ldr	r3, [r7, #4]
}
 80082b6:	4618      	mov	r0, r3
 80082b8:	3718      	adds	r7, #24
 80082ba:	46bd      	mov	sp, r7
 80082bc:	bd80      	pop	{r7, pc}

080082be <_close>:

int _close(int file)
{
 80082be:	b480      	push	{r7}
 80082c0:	b083      	sub	sp, #12
 80082c2:	af00      	add	r7, sp, #0
 80082c4:	6078      	str	r0, [r7, #4]
	return -1;
 80082c6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80082ca:	4618      	mov	r0, r3
 80082cc:	370c      	adds	r7, #12
 80082ce:	46bd      	mov	sp, r7
 80082d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082d4:	4770      	bx	lr

080082d6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80082d6:	b480      	push	{r7}
 80082d8:	b083      	sub	sp, #12
 80082da:	af00      	add	r7, sp, #0
 80082dc:	6078      	str	r0, [r7, #4]
 80082de:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80082e0:	683b      	ldr	r3, [r7, #0]
 80082e2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80082e6:	605a      	str	r2, [r3, #4]
	return 0;
 80082e8:	2300      	movs	r3, #0
}
 80082ea:	4618      	mov	r0, r3
 80082ec:	370c      	adds	r7, #12
 80082ee:	46bd      	mov	sp, r7
 80082f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082f4:	4770      	bx	lr

080082f6 <_isatty>:

int _isatty(int file)
{
 80082f6:	b480      	push	{r7}
 80082f8:	b083      	sub	sp, #12
 80082fa:	af00      	add	r7, sp, #0
 80082fc:	6078      	str	r0, [r7, #4]
	return 1;
 80082fe:	2301      	movs	r3, #1
}
 8008300:	4618      	mov	r0, r3
 8008302:	370c      	adds	r7, #12
 8008304:	46bd      	mov	sp, r7
 8008306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800830a:	4770      	bx	lr

0800830c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800830c:	b480      	push	{r7}
 800830e:	b085      	sub	sp, #20
 8008310:	af00      	add	r7, sp, #0
 8008312:	60f8      	str	r0, [r7, #12]
 8008314:	60b9      	str	r1, [r7, #8]
 8008316:	607a      	str	r2, [r7, #4]
	return 0;
 8008318:	2300      	movs	r3, #0
}
 800831a:	4618      	mov	r0, r3
 800831c:	3714      	adds	r7, #20
 800831e:	46bd      	mov	sp, r7
 8008320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008324:	4770      	bx	lr
	...

08008328 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8008328:	b580      	push	{r7, lr}
 800832a:	b086      	sub	sp, #24
 800832c:	af00      	add	r7, sp, #0
 800832e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8008330:	4a14      	ldr	r2, [pc, #80]	; (8008384 <_sbrk+0x5c>)
 8008332:	4b15      	ldr	r3, [pc, #84]	; (8008388 <_sbrk+0x60>)
 8008334:	1ad3      	subs	r3, r2, r3
 8008336:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8008338:	697b      	ldr	r3, [r7, #20]
 800833a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800833c:	4b13      	ldr	r3, [pc, #76]	; (800838c <_sbrk+0x64>)
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	2b00      	cmp	r3, #0
 8008342:	d102      	bne.n	800834a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8008344:	4b11      	ldr	r3, [pc, #68]	; (800838c <_sbrk+0x64>)
 8008346:	4a12      	ldr	r2, [pc, #72]	; (8008390 <_sbrk+0x68>)
 8008348:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800834a:	4b10      	ldr	r3, [pc, #64]	; (800838c <_sbrk+0x64>)
 800834c:	681a      	ldr	r2, [r3, #0]
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	4413      	add	r3, r2
 8008352:	693a      	ldr	r2, [r7, #16]
 8008354:	429a      	cmp	r2, r3
 8008356:	d207      	bcs.n	8008368 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8008358:	f000 fdae 	bl	8008eb8 <__errno>
 800835c:	4603      	mov	r3, r0
 800835e:	220c      	movs	r2, #12
 8008360:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8008362:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008366:	e009      	b.n	800837c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8008368:	4b08      	ldr	r3, [pc, #32]	; (800838c <_sbrk+0x64>)
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800836e:	4b07      	ldr	r3, [pc, #28]	; (800838c <_sbrk+0x64>)
 8008370:	681a      	ldr	r2, [r3, #0]
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	4413      	add	r3, r2
 8008376:	4a05      	ldr	r2, [pc, #20]	; (800838c <_sbrk+0x64>)
 8008378:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800837a:	68fb      	ldr	r3, [r7, #12]
}
 800837c:	4618      	mov	r0, r3
 800837e:	3718      	adds	r7, #24
 8008380:	46bd      	mov	sp, r7
 8008382:	bd80      	pop	{r7, pc}
 8008384:	20020000 	.word	0x20020000
 8008388:	00000600 	.word	0x00000600
 800838c:	20000590 	.word	0x20000590
 8008390:	200021b0 	.word	0x200021b0

08008394 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8008394:	b480      	push	{r7}
 8008396:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8008398:	4b06      	ldr	r3, [pc, #24]	; (80083b4 <SystemInit+0x20>)
 800839a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800839e:	4a05      	ldr	r2, [pc, #20]	; (80083b4 <SystemInit+0x20>)
 80083a0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80083a4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80083a8:	bf00      	nop
 80083aa:	46bd      	mov	sp, r7
 80083ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083b0:	4770      	bx	lr
 80083b2:	bf00      	nop
 80083b4:	e000ed00 	.word	0xe000ed00

080083b8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80083b8:	b580      	push	{r7, lr}
 80083ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80083bc:	2200      	movs	r2, #0
 80083be:	4912      	ldr	r1, [pc, #72]	; (8008408 <MX_USB_DEVICE_Init+0x50>)
 80083c0:	4812      	ldr	r0, [pc, #72]	; (800840c <MX_USB_DEVICE_Init+0x54>)
 80083c2:	f7fd fd13 	bl	8005dec <USBD_Init>
 80083c6:	4603      	mov	r3, r0
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d001      	beq.n	80083d0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80083cc:	f7ff fe48 	bl	8008060 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80083d0:	490f      	ldr	r1, [pc, #60]	; (8008410 <MX_USB_DEVICE_Init+0x58>)
 80083d2:	480e      	ldr	r0, [pc, #56]	; (800840c <MX_USB_DEVICE_Init+0x54>)
 80083d4:	f7fd fd48 	bl	8005e68 <USBD_RegisterClass>
 80083d8:	4603      	mov	r3, r0
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d001      	beq.n	80083e2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80083de:	f7ff fe3f 	bl	8008060 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80083e2:	490c      	ldr	r1, [pc, #48]	; (8008414 <MX_USB_DEVICE_Init+0x5c>)
 80083e4:	4809      	ldr	r0, [pc, #36]	; (800840c <MX_USB_DEVICE_Init+0x54>)
 80083e6:	f7fd fc2b 	bl	8005c40 <USBD_CDC_RegisterInterface>
 80083ea:	4603      	mov	r3, r0
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d001      	beq.n	80083f4 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80083f0:	f7ff fe36 	bl	8008060 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80083f4:	4805      	ldr	r0, [pc, #20]	; (800840c <MX_USB_DEVICE_Init+0x54>)
 80083f6:	f7fd fd7b 	bl	8005ef0 <USBD_Start>
 80083fa:	4603      	mov	r3, r0
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d001      	beq.n	8008404 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8008400:	f7ff fe2e 	bl	8008060 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008404:	bf00      	nop
 8008406:	bd80      	pop	{r7, pc}
 8008408:	20000174 	.word	0x20000174
 800840c:	20000594 	.word	0x20000594
 8008410:	20000014 	.word	0x20000014
 8008414:	20000160 	.word	0x20000160

08008418 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8008418:	b580      	push	{r7, lr}
 800841a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800841c:	2200      	movs	r2, #0
 800841e:	4905      	ldr	r1, [pc, #20]	; (8008434 <CDC_Init_FS+0x1c>)
 8008420:	4805      	ldr	r0, [pc, #20]	; (8008438 <CDC_Init_FS+0x20>)
 8008422:	f7fd fc27 	bl	8005c74 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8008426:	4905      	ldr	r1, [pc, #20]	; (800843c <CDC_Init_FS+0x24>)
 8008428:	4803      	ldr	r0, [pc, #12]	; (8008438 <CDC_Init_FS+0x20>)
 800842a:	f7fd fc45 	bl	8005cb8 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800842e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008430:	4618      	mov	r0, r3
 8008432:	bd80      	pop	{r7, pc}
 8008434:	20001070 	.word	0x20001070
 8008438:	20000594 	.word	0x20000594
 800843c:	20000870 	.word	0x20000870

08008440 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8008440:	b480      	push	{r7}
 8008442:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008444:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8008446:	4618      	mov	r0, r3
 8008448:	46bd      	mov	sp, r7
 800844a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800844e:	4770      	bx	lr

08008450 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008450:	b480      	push	{r7}
 8008452:	b083      	sub	sp, #12
 8008454:	af00      	add	r7, sp, #0
 8008456:	4603      	mov	r3, r0
 8008458:	6039      	str	r1, [r7, #0]
 800845a:	71fb      	strb	r3, [r7, #7]
 800845c:	4613      	mov	r3, r2
 800845e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8008460:	79fb      	ldrb	r3, [r7, #7]
 8008462:	2b23      	cmp	r3, #35	; 0x23
 8008464:	d84a      	bhi.n	80084fc <CDC_Control_FS+0xac>
 8008466:	a201      	add	r2, pc, #4	; (adr r2, 800846c <CDC_Control_FS+0x1c>)
 8008468:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800846c:	080084fd 	.word	0x080084fd
 8008470:	080084fd 	.word	0x080084fd
 8008474:	080084fd 	.word	0x080084fd
 8008478:	080084fd 	.word	0x080084fd
 800847c:	080084fd 	.word	0x080084fd
 8008480:	080084fd 	.word	0x080084fd
 8008484:	080084fd 	.word	0x080084fd
 8008488:	080084fd 	.word	0x080084fd
 800848c:	080084fd 	.word	0x080084fd
 8008490:	080084fd 	.word	0x080084fd
 8008494:	080084fd 	.word	0x080084fd
 8008498:	080084fd 	.word	0x080084fd
 800849c:	080084fd 	.word	0x080084fd
 80084a0:	080084fd 	.word	0x080084fd
 80084a4:	080084fd 	.word	0x080084fd
 80084a8:	080084fd 	.word	0x080084fd
 80084ac:	080084fd 	.word	0x080084fd
 80084b0:	080084fd 	.word	0x080084fd
 80084b4:	080084fd 	.word	0x080084fd
 80084b8:	080084fd 	.word	0x080084fd
 80084bc:	080084fd 	.word	0x080084fd
 80084c0:	080084fd 	.word	0x080084fd
 80084c4:	080084fd 	.word	0x080084fd
 80084c8:	080084fd 	.word	0x080084fd
 80084cc:	080084fd 	.word	0x080084fd
 80084d0:	080084fd 	.word	0x080084fd
 80084d4:	080084fd 	.word	0x080084fd
 80084d8:	080084fd 	.word	0x080084fd
 80084dc:	080084fd 	.word	0x080084fd
 80084e0:	080084fd 	.word	0x080084fd
 80084e4:	080084fd 	.word	0x080084fd
 80084e8:	080084fd 	.word	0x080084fd
 80084ec:	080084fd 	.word	0x080084fd
 80084f0:	080084fd 	.word	0x080084fd
 80084f4:	080084fd 	.word	0x080084fd
 80084f8:	080084fd 	.word	0x080084fd
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80084fc:	bf00      	nop
  }

  return (USBD_OK);
 80084fe:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008500:	4618      	mov	r0, r3
 8008502:	370c      	adds	r7, #12
 8008504:	46bd      	mov	sp, r7
 8008506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800850a:	4770      	bx	lr

0800850c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800850c:	b580      	push	{r7, lr}
 800850e:	b082      	sub	sp, #8
 8008510:	af00      	add	r7, sp, #0
 8008512:	6078      	str	r0, [r7, #4]
 8008514:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8008516:	6879      	ldr	r1, [r7, #4]
 8008518:	4812      	ldr	r0, [pc, #72]	; (8008564 <CDC_Receive_FS+0x58>)
 800851a:	f7fd fbcd 	bl	8005cb8 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800851e:	4811      	ldr	r0, [pc, #68]	; (8008564 <CDC_Receive_FS+0x58>)
 8008520:	f7fd fc2e 	bl	8005d80 <USBD_CDC_ReceivePacket>

#ifdef superUserMode

  for(CMD_Len = 0; CMD_Len < *Len ; CMD_Len ++)
 8008524:	4b10      	ldr	r3, [pc, #64]	; (8008568 <CDC_Receive_FS+0x5c>)
 8008526:	2200      	movs	r2, #0
 8008528:	701a      	strb	r2, [r3, #0]
 800852a:	e00f      	b.n	800854c <CDC_Receive_FS+0x40>
  {
	  CMD_Buffer[CMD_Len] = Buf[CMD_Len];
 800852c:	4b0e      	ldr	r3, [pc, #56]	; (8008568 <CDC_Receive_FS+0x5c>)
 800852e:	781b      	ldrb	r3, [r3, #0]
 8008530:	461a      	mov	r2, r3
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	4413      	add	r3, r2
 8008536:	4a0c      	ldr	r2, [pc, #48]	; (8008568 <CDC_Receive_FS+0x5c>)
 8008538:	7812      	ldrb	r2, [r2, #0]
 800853a:	7819      	ldrb	r1, [r3, #0]
 800853c:	4b0b      	ldr	r3, [pc, #44]	; (800856c <CDC_Receive_FS+0x60>)
 800853e:	5499      	strb	r1, [r3, r2]
  for(CMD_Len = 0; CMD_Len < *Len ; CMD_Len ++)
 8008540:	4b09      	ldr	r3, [pc, #36]	; (8008568 <CDC_Receive_FS+0x5c>)
 8008542:	781b      	ldrb	r3, [r3, #0]
 8008544:	3301      	adds	r3, #1
 8008546:	b2da      	uxtb	r2, r3
 8008548:	4b07      	ldr	r3, [pc, #28]	; (8008568 <CDC_Receive_FS+0x5c>)
 800854a:	701a      	strb	r2, [r3, #0]
 800854c:	4b06      	ldr	r3, [pc, #24]	; (8008568 <CDC_Receive_FS+0x5c>)
 800854e:	781b      	ldrb	r3, [r3, #0]
 8008550:	461a      	mov	r2, r3
 8008552:	683b      	ldr	r3, [r7, #0]
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	429a      	cmp	r2, r3
 8008558:	d3e8      	bcc.n	800852c <CDC_Receive_FS+0x20>
  }

#endif  //superUserMode

  return (USBD_OK);
 800855a:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800855c:	4618      	mov	r0, r3
 800855e:	3708      	adds	r7, #8
 8008560:	46bd      	mov	sp, r7
 8008562:	bd80      	pop	{r7, pc}
 8008564:	20000594 	.word	0x20000594
 8008568:	200004a8 	.word	0x200004a8
 800856c:	200003a8 	.word	0x200003a8

08008570 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8008570:	b580      	push	{r7, lr}
 8008572:	b086      	sub	sp, #24
 8008574:	af00      	add	r7, sp, #0
 8008576:	6078      	str	r0, [r7, #4]
 8008578:	460b      	mov	r3, r1
 800857a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800857c:	2300      	movs	r3, #0
 800857e:	74fb      	strb	r3, [r7, #19]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8008580:	4b13      	ldr	r3, [pc, #76]	; (80085d0 <CDC_Transmit_FS+0x60>)
 8008582:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008586:	60fb      	str	r3, [r7, #12]
  if (hcdc->TxState == USBD_BUSY)
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800858e:	2b01      	cmp	r3, #1
 8008590:	d10d      	bne.n	80085ae <CDC_Transmit_FS+0x3e>
  {
	  uint32_t delay = 10000;
 8008592:	f242 7310 	movw	r3, #10000	; 0x2710
 8008596:	617b      	str	r3, [r7, #20]
	  while(delay--);
 8008598:	bf00      	nop
 800859a:	697b      	ldr	r3, [r7, #20]
 800859c:	1e5a      	subs	r2, r3, #1
 800859e:	617a      	str	r2, [r7, #20]
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d1fa      	bne.n	800859a <CDC_Transmit_FS+0x2a>
	  CDC_Transmit_FS(Buf, Len);
 80085a4:	887b      	ldrh	r3, [r7, #2]
 80085a6:	4619      	mov	r1, r3
 80085a8:	6878      	ldr	r0, [r7, #4]
 80085aa:	f7ff ffe1 	bl	8008570 <CDC_Transmit_FS>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80085ae:	887b      	ldrh	r3, [r7, #2]
 80085b0:	461a      	mov	r2, r3
 80085b2:	6879      	ldr	r1, [r7, #4]
 80085b4:	4806      	ldr	r0, [pc, #24]	; (80085d0 <CDC_Transmit_FS+0x60>)
 80085b6:	f7fd fb5d 	bl	8005c74 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80085ba:	4805      	ldr	r0, [pc, #20]	; (80085d0 <CDC_Transmit_FS+0x60>)
 80085bc:	f7fd fb9a 	bl	8005cf4 <USBD_CDC_TransmitPacket>
 80085c0:	4603      	mov	r3, r0
 80085c2:	74fb      	strb	r3, [r7, #19]
  /* USER CODE END 7 */
  return result;
 80085c4:	7cfb      	ldrb	r3, [r7, #19]
}
 80085c6:	4618      	mov	r0, r3
 80085c8:	3718      	adds	r7, #24
 80085ca:	46bd      	mov	sp, r7
 80085cc:	bd80      	pop	{r7, pc}
 80085ce:	bf00      	nop
 80085d0:	20000594 	.word	0x20000594

080085d4 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80085d4:	b480      	push	{r7}
 80085d6:	b087      	sub	sp, #28
 80085d8:	af00      	add	r7, sp, #0
 80085da:	60f8      	str	r0, [r7, #12]
 80085dc:	60b9      	str	r1, [r7, #8]
 80085de:	4613      	mov	r3, r2
 80085e0:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80085e2:	2300      	movs	r3, #0
 80085e4:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80085e6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80085ea:	4618      	mov	r0, r3
 80085ec:	371c      	adds	r7, #28
 80085ee:	46bd      	mov	sp, r7
 80085f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085f4:	4770      	bx	lr
	...

080085f8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80085f8:	b580      	push	{r7, lr}
 80085fa:	b08a      	sub	sp, #40	; 0x28
 80085fc:	af00      	add	r7, sp, #0
 80085fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008600:	f107 0314 	add.w	r3, r7, #20
 8008604:	2200      	movs	r2, #0
 8008606:	601a      	str	r2, [r3, #0]
 8008608:	605a      	str	r2, [r3, #4]
 800860a:	609a      	str	r2, [r3, #8]
 800860c:	60da      	str	r2, [r3, #12]
 800860e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008618:	d14b      	bne.n	80086b2 <HAL_PCD_MspInit+0xba>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800861a:	2300      	movs	r3, #0
 800861c:	613b      	str	r3, [r7, #16]
 800861e:	4b27      	ldr	r3, [pc, #156]	; (80086bc <HAL_PCD_MspInit+0xc4>)
 8008620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008622:	4a26      	ldr	r2, [pc, #152]	; (80086bc <HAL_PCD_MspInit+0xc4>)
 8008624:	f043 0301 	orr.w	r3, r3, #1
 8008628:	6313      	str	r3, [r2, #48]	; 0x30
 800862a:	4b24      	ldr	r3, [pc, #144]	; (80086bc <HAL_PCD_MspInit+0xc4>)
 800862c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800862e:	f003 0301 	and.w	r3, r3, #1
 8008632:	613b      	str	r3, [r7, #16]
 8008634:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8008636:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800863a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800863c:	2302      	movs	r3, #2
 800863e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008640:	2300      	movs	r3, #0
 8008642:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008644:	2303      	movs	r3, #3
 8008646:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008648:	230a      	movs	r3, #10
 800864a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800864c:	f107 0314 	add.w	r3, r7, #20
 8008650:	4619      	mov	r1, r3
 8008652:	481b      	ldr	r0, [pc, #108]	; (80086c0 <HAL_PCD_MspInit+0xc8>)
 8008654:	f7f8 f93e 	bl	80008d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8008658:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800865c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800865e:	2302      	movs	r3, #2
 8008660:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8008662:	2301      	movs	r3, #1
 8008664:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008666:	2303      	movs	r3, #3
 8008668:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800866a:	230a      	movs	r3, #10
 800866c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800866e:	f107 0314 	add.w	r3, r7, #20
 8008672:	4619      	mov	r1, r3
 8008674:	4812      	ldr	r0, [pc, #72]	; (80086c0 <HAL_PCD_MspInit+0xc8>)
 8008676:	f7f8 f92d 	bl	80008d4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800867a:	4b10      	ldr	r3, [pc, #64]	; (80086bc <HAL_PCD_MspInit+0xc4>)
 800867c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800867e:	4a0f      	ldr	r2, [pc, #60]	; (80086bc <HAL_PCD_MspInit+0xc4>)
 8008680:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008684:	6353      	str	r3, [r2, #52]	; 0x34
 8008686:	2300      	movs	r3, #0
 8008688:	60fb      	str	r3, [r7, #12]
 800868a:	4b0c      	ldr	r3, [pc, #48]	; (80086bc <HAL_PCD_MspInit+0xc4>)
 800868c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800868e:	4a0b      	ldr	r2, [pc, #44]	; (80086bc <HAL_PCD_MspInit+0xc4>)
 8008690:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008694:	6453      	str	r3, [r2, #68]	; 0x44
 8008696:	4b09      	ldr	r3, [pc, #36]	; (80086bc <HAL_PCD_MspInit+0xc4>)
 8008698:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800869a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800869e:	60fb      	str	r3, [r7, #12]
 80086a0:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 3, 0);
 80086a2:	2200      	movs	r2, #0
 80086a4:	2103      	movs	r1, #3
 80086a6:	2043      	movs	r0, #67	; 0x43
 80086a8:	f7f8 f8dd 	bl	8000866 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80086ac:	2043      	movs	r0, #67	; 0x43
 80086ae:	f7f8 f8f6 	bl	800089e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80086b2:	bf00      	nop
 80086b4:	3728      	adds	r7, #40	; 0x28
 80086b6:	46bd      	mov	sp, r7
 80086b8:	bd80      	pop	{r7, pc}
 80086ba:	bf00      	nop
 80086bc:	40023800 	.word	0x40023800
 80086c0:	40020000 	.word	0x40020000

080086c4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80086c4:	b580      	push	{r7, lr}
 80086c6:	b082      	sub	sp, #8
 80086c8:	af00      	add	r7, sp, #0
 80086ca:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80086d8:	4619      	mov	r1, r3
 80086da:	4610      	mov	r0, r2
 80086dc:	f7fd fc55 	bl	8005f8a <USBD_LL_SetupStage>
}
 80086e0:	bf00      	nop
 80086e2:	3708      	adds	r7, #8
 80086e4:	46bd      	mov	sp, r7
 80086e6:	bd80      	pop	{r7, pc}

080086e8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80086e8:	b580      	push	{r7, lr}
 80086ea:	b082      	sub	sp, #8
 80086ec:	af00      	add	r7, sp, #0
 80086ee:	6078      	str	r0, [r7, #4]
 80086f0:	460b      	mov	r3, r1
 80086f2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 80086fa:	78fa      	ldrb	r2, [r7, #3]
 80086fc:	6879      	ldr	r1, [r7, #4]
 80086fe:	4613      	mov	r3, r2
 8008700:	00db      	lsls	r3, r3, #3
 8008702:	4413      	add	r3, r2
 8008704:	009b      	lsls	r3, r3, #2
 8008706:	440b      	add	r3, r1
 8008708:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800870c:	681a      	ldr	r2, [r3, #0]
 800870e:	78fb      	ldrb	r3, [r7, #3]
 8008710:	4619      	mov	r1, r3
 8008712:	f7fd fc8f 	bl	8006034 <USBD_LL_DataOutStage>
}
 8008716:	bf00      	nop
 8008718:	3708      	adds	r7, #8
 800871a:	46bd      	mov	sp, r7
 800871c:	bd80      	pop	{r7, pc}

0800871e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800871e:	b580      	push	{r7, lr}
 8008720:	b082      	sub	sp, #8
 8008722:	af00      	add	r7, sp, #0
 8008724:	6078      	str	r0, [r7, #4]
 8008726:	460b      	mov	r3, r1
 8008728:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8008730:	78fa      	ldrb	r2, [r7, #3]
 8008732:	6879      	ldr	r1, [r7, #4]
 8008734:	4613      	mov	r3, r2
 8008736:	00db      	lsls	r3, r3, #3
 8008738:	4413      	add	r3, r2
 800873a:	009b      	lsls	r3, r3, #2
 800873c:	440b      	add	r3, r1
 800873e:	334c      	adds	r3, #76	; 0x4c
 8008740:	681a      	ldr	r2, [r3, #0]
 8008742:	78fb      	ldrb	r3, [r7, #3]
 8008744:	4619      	mov	r1, r3
 8008746:	f7fd fd28 	bl	800619a <USBD_LL_DataInStage>
}
 800874a:	bf00      	nop
 800874c:	3708      	adds	r7, #8
 800874e:	46bd      	mov	sp, r7
 8008750:	bd80      	pop	{r7, pc}

08008752 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008752:	b580      	push	{r7, lr}
 8008754:	b082      	sub	sp, #8
 8008756:	af00      	add	r7, sp, #0
 8008758:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008760:	4618      	mov	r0, r3
 8008762:	f7fd fe5c 	bl	800641e <USBD_LL_SOF>
}
 8008766:	bf00      	nop
 8008768:	3708      	adds	r7, #8
 800876a:	46bd      	mov	sp, r7
 800876c:	bd80      	pop	{r7, pc}

0800876e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800876e:	b580      	push	{r7, lr}
 8008770:	b084      	sub	sp, #16
 8008772:	af00      	add	r7, sp, #0
 8008774:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008776:	2301      	movs	r3, #1
 8008778:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	68db      	ldr	r3, [r3, #12]
 800877e:	2b00      	cmp	r3, #0
 8008780:	d102      	bne.n	8008788 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8008782:	2300      	movs	r3, #0
 8008784:	73fb      	strb	r3, [r7, #15]
 8008786:	e008      	b.n	800879a <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	68db      	ldr	r3, [r3, #12]
 800878c:	2b02      	cmp	r3, #2
 800878e:	d102      	bne.n	8008796 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8008790:	2301      	movs	r3, #1
 8008792:	73fb      	strb	r3, [r7, #15]
 8008794:	e001      	b.n	800879a <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8008796:	f7ff fc63 	bl	8008060 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80087a0:	7bfa      	ldrb	r2, [r7, #15]
 80087a2:	4611      	mov	r1, r2
 80087a4:	4618      	mov	r0, r3
 80087a6:	f7fd fdfc 	bl	80063a2 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80087b0:	4618      	mov	r0, r3
 80087b2:	f7fd fda4 	bl	80062fe <USBD_LL_Reset>
}
 80087b6:	bf00      	nop
 80087b8:	3710      	adds	r7, #16
 80087ba:	46bd      	mov	sp, r7
 80087bc:	bd80      	pop	{r7, pc}
	...

080087c0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80087c0:	b580      	push	{r7, lr}
 80087c2:	b082      	sub	sp, #8
 80087c4:	af00      	add	r7, sp, #0
 80087c6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80087ce:	4618      	mov	r0, r3
 80087d0:	f7fd fdf7 	bl	80063c2 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	687a      	ldr	r2, [r7, #4]
 80087e0:	6812      	ldr	r2, [r2, #0]
 80087e2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80087e6:	f043 0301 	orr.w	r3, r3, #1
 80087ea:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	6a1b      	ldr	r3, [r3, #32]
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	d005      	beq.n	8008800 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80087f4:	4b04      	ldr	r3, [pc, #16]	; (8008808 <HAL_PCD_SuspendCallback+0x48>)
 80087f6:	691b      	ldr	r3, [r3, #16]
 80087f8:	4a03      	ldr	r2, [pc, #12]	; (8008808 <HAL_PCD_SuspendCallback+0x48>)
 80087fa:	f043 0306 	orr.w	r3, r3, #6
 80087fe:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008800:	bf00      	nop
 8008802:	3708      	adds	r7, #8
 8008804:	46bd      	mov	sp, r7
 8008806:	bd80      	pop	{r7, pc}
 8008808:	e000ed00 	.word	0xe000ed00

0800880c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800880c:	b580      	push	{r7, lr}
 800880e:	b082      	sub	sp, #8
 8008810:	af00      	add	r7, sp, #0
 8008812:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800881a:	4618      	mov	r0, r3
 800881c:	f7fd fde7 	bl	80063ee <USBD_LL_Resume>
}
 8008820:	bf00      	nop
 8008822:	3708      	adds	r7, #8
 8008824:	46bd      	mov	sp, r7
 8008826:	bd80      	pop	{r7, pc}

08008828 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008828:	b580      	push	{r7, lr}
 800882a:	b082      	sub	sp, #8
 800882c:	af00      	add	r7, sp, #0
 800882e:	6078      	str	r0, [r7, #4]
 8008830:	460b      	mov	r3, r1
 8008832:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800883a:	78fa      	ldrb	r2, [r7, #3]
 800883c:	4611      	mov	r1, r2
 800883e:	4618      	mov	r0, r3
 8008840:	f7fd fe3f 	bl	80064c2 <USBD_LL_IsoOUTIncomplete>
}
 8008844:	bf00      	nop
 8008846:	3708      	adds	r7, #8
 8008848:	46bd      	mov	sp, r7
 800884a:	bd80      	pop	{r7, pc}

0800884c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800884c:	b580      	push	{r7, lr}
 800884e:	b082      	sub	sp, #8
 8008850:	af00      	add	r7, sp, #0
 8008852:	6078      	str	r0, [r7, #4]
 8008854:	460b      	mov	r3, r1
 8008856:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800885e:	78fa      	ldrb	r2, [r7, #3]
 8008860:	4611      	mov	r1, r2
 8008862:	4618      	mov	r0, r3
 8008864:	f7fd fdfb 	bl	800645e <USBD_LL_IsoINIncomplete>
}
 8008868:	bf00      	nop
 800886a:	3708      	adds	r7, #8
 800886c:	46bd      	mov	sp, r7
 800886e:	bd80      	pop	{r7, pc}

08008870 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008870:	b580      	push	{r7, lr}
 8008872:	b082      	sub	sp, #8
 8008874:	af00      	add	r7, sp, #0
 8008876:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800887e:	4618      	mov	r0, r3
 8008880:	f7fd fe51 	bl	8006526 <USBD_LL_DevConnected>
}
 8008884:	bf00      	nop
 8008886:	3708      	adds	r7, #8
 8008888:	46bd      	mov	sp, r7
 800888a:	bd80      	pop	{r7, pc}

0800888c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800888c:	b580      	push	{r7, lr}
 800888e:	b082      	sub	sp, #8
 8008890:	af00      	add	r7, sp, #0
 8008892:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800889a:	4618      	mov	r0, r3
 800889c:	f7fd fe4e 	bl	800653c <USBD_LL_DevDisconnected>
}
 80088a0:	bf00      	nop
 80088a2:	3708      	adds	r7, #8
 80088a4:	46bd      	mov	sp, r7
 80088a6:	bd80      	pop	{r7, pc}

080088a8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80088a8:	b580      	push	{r7, lr}
 80088aa:	b082      	sub	sp, #8
 80088ac:	af00      	add	r7, sp, #0
 80088ae:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	781b      	ldrb	r3, [r3, #0]
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	d13c      	bne.n	8008932 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80088b8:	4a20      	ldr	r2, [pc, #128]	; (800893c <USBD_LL_Init+0x94>)
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	4a1e      	ldr	r2, [pc, #120]	; (800893c <USBD_LL_Init+0x94>)
 80088c4:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80088c8:	4b1c      	ldr	r3, [pc, #112]	; (800893c <USBD_LL_Init+0x94>)
 80088ca:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80088ce:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80088d0:	4b1a      	ldr	r3, [pc, #104]	; (800893c <USBD_LL_Init+0x94>)
 80088d2:	2204      	movs	r2, #4
 80088d4:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80088d6:	4b19      	ldr	r3, [pc, #100]	; (800893c <USBD_LL_Init+0x94>)
 80088d8:	2202      	movs	r2, #2
 80088da:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80088dc:	4b17      	ldr	r3, [pc, #92]	; (800893c <USBD_LL_Init+0x94>)
 80088de:	2200      	movs	r2, #0
 80088e0:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80088e2:	4b16      	ldr	r3, [pc, #88]	; (800893c <USBD_LL_Init+0x94>)
 80088e4:	2202      	movs	r2, #2
 80088e6:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80088e8:	4b14      	ldr	r3, [pc, #80]	; (800893c <USBD_LL_Init+0x94>)
 80088ea:	2201      	movs	r2, #1
 80088ec:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80088ee:	4b13      	ldr	r3, [pc, #76]	; (800893c <USBD_LL_Init+0x94>)
 80088f0:	2200      	movs	r2, #0
 80088f2:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80088f4:	4b11      	ldr	r3, [pc, #68]	; (800893c <USBD_LL_Init+0x94>)
 80088f6:	2200      	movs	r2, #0
 80088f8:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80088fa:	4b10      	ldr	r3, [pc, #64]	; (800893c <USBD_LL_Init+0x94>)
 80088fc:	2200      	movs	r2, #0
 80088fe:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8008900:	4b0e      	ldr	r3, [pc, #56]	; (800893c <USBD_LL_Init+0x94>)
 8008902:	2200      	movs	r2, #0
 8008904:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8008906:	480d      	ldr	r0, [pc, #52]	; (800893c <USBD_LL_Init+0x94>)
 8008908:	f7f8 fdff 	bl	800150a <HAL_PCD_Init>
 800890c:	4603      	mov	r3, r0
 800890e:	2b00      	cmp	r3, #0
 8008910:	d001      	beq.n	8008916 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8008912:	f7ff fba5 	bl	8008060 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8008916:	2180      	movs	r1, #128	; 0x80
 8008918:	4808      	ldr	r0, [pc, #32]	; (800893c <USBD_LL_Init+0x94>)
 800891a:	f7fa f856 	bl	80029ca <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800891e:	2240      	movs	r2, #64	; 0x40
 8008920:	2100      	movs	r1, #0
 8008922:	4806      	ldr	r0, [pc, #24]	; (800893c <USBD_LL_Init+0x94>)
 8008924:	f7fa f80a 	bl	800293c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8008928:	2280      	movs	r2, #128	; 0x80
 800892a:	2101      	movs	r1, #1
 800892c:	4803      	ldr	r0, [pc, #12]	; (800893c <USBD_LL_Init+0x94>)
 800892e:	f7fa f805 	bl	800293c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8008932:	2300      	movs	r3, #0
}
 8008934:	4618      	mov	r0, r3
 8008936:	3708      	adds	r7, #8
 8008938:	46bd      	mov	sp, r7
 800893a:	bd80      	pop	{r7, pc}
 800893c:	20001870 	.word	0x20001870

08008940 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008940:	b580      	push	{r7, lr}
 8008942:	b084      	sub	sp, #16
 8008944:	af00      	add	r7, sp, #0
 8008946:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008948:	2300      	movs	r3, #0
 800894a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800894c:	2300      	movs	r3, #0
 800894e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008956:	4618      	mov	r0, r3
 8008958:	f7f8 fef4 	bl	8001744 <HAL_PCD_Start>
 800895c:	4603      	mov	r3, r0
 800895e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008960:	7bfb      	ldrb	r3, [r7, #15]
 8008962:	4618      	mov	r0, r3
 8008964:	f000 f942 	bl	8008bec <USBD_Get_USB_Status>
 8008968:	4603      	mov	r3, r0
 800896a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800896c:	7bbb      	ldrb	r3, [r7, #14]
}
 800896e:	4618      	mov	r0, r3
 8008970:	3710      	adds	r7, #16
 8008972:	46bd      	mov	sp, r7
 8008974:	bd80      	pop	{r7, pc}

08008976 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008976:	b580      	push	{r7, lr}
 8008978:	b084      	sub	sp, #16
 800897a:	af00      	add	r7, sp, #0
 800897c:	6078      	str	r0, [r7, #4]
 800897e:	4608      	mov	r0, r1
 8008980:	4611      	mov	r1, r2
 8008982:	461a      	mov	r2, r3
 8008984:	4603      	mov	r3, r0
 8008986:	70fb      	strb	r3, [r7, #3]
 8008988:	460b      	mov	r3, r1
 800898a:	70bb      	strb	r3, [r7, #2]
 800898c:	4613      	mov	r3, r2
 800898e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008990:	2300      	movs	r3, #0
 8008992:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008994:	2300      	movs	r3, #0
 8008996:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800899e:	78bb      	ldrb	r3, [r7, #2]
 80089a0:	883a      	ldrh	r2, [r7, #0]
 80089a2:	78f9      	ldrb	r1, [r7, #3]
 80089a4:	f7f9 fbc5 	bl	8002132 <HAL_PCD_EP_Open>
 80089a8:	4603      	mov	r3, r0
 80089aa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80089ac:	7bfb      	ldrb	r3, [r7, #15]
 80089ae:	4618      	mov	r0, r3
 80089b0:	f000 f91c 	bl	8008bec <USBD_Get_USB_Status>
 80089b4:	4603      	mov	r3, r0
 80089b6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80089b8:	7bbb      	ldrb	r3, [r7, #14]
}
 80089ba:	4618      	mov	r0, r3
 80089bc:	3710      	adds	r7, #16
 80089be:	46bd      	mov	sp, r7
 80089c0:	bd80      	pop	{r7, pc}

080089c2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80089c2:	b580      	push	{r7, lr}
 80089c4:	b084      	sub	sp, #16
 80089c6:	af00      	add	r7, sp, #0
 80089c8:	6078      	str	r0, [r7, #4]
 80089ca:	460b      	mov	r3, r1
 80089cc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80089ce:	2300      	movs	r3, #0
 80089d0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80089d2:	2300      	movs	r3, #0
 80089d4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80089dc:	78fa      	ldrb	r2, [r7, #3]
 80089de:	4611      	mov	r1, r2
 80089e0:	4618      	mov	r0, r3
 80089e2:	f7f9 fc0e 	bl	8002202 <HAL_PCD_EP_Close>
 80089e6:	4603      	mov	r3, r0
 80089e8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80089ea:	7bfb      	ldrb	r3, [r7, #15]
 80089ec:	4618      	mov	r0, r3
 80089ee:	f000 f8fd 	bl	8008bec <USBD_Get_USB_Status>
 80089f2:	4603      	mov	r3, r0
 80089f4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80089f6:	7bbb      	ldrb	r3, [r7, #14]
}
 80089f8:	4618      	mov	r0, r3
 80089fa:	3710      	adds	r7, #16
 80089fc:	46bd      	mov	sp, r7
 80089fe:	bd80      	pop	{r7, pc}

08008a00 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008a00:	b580      	push	{r7, lr}
 8008a02:	b084      	sub	sp, #16
 8008a04:	af00      	add	r7, sp, #0
 8008a06:	6078      	str	r0, [r7, #4]
 8008a08:	460b      	mov	r3, r1
 8008a0a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008a0c:	2300      	movs	r3, #0
 8008a0e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008a10:	2300      	movs	r3, #0
 8008a12:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008a1a:	78fa      	ldrb	r2, [r7, #3]
 8008a1c:	4611      	mov	r1, r2
 8008a1e:	4618      	mov	r0, r3
 8008a20:	f7f9 fce6 	bl	80023f0 <HAL_PCD_EP_SetStall>
 8008a24:	4603      	mov	r3, r0
 8008a26:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008a28:	7bfb      	ldrb	r3, [r7, #15]
 8008a2a:	4618      	mov	r0, r3
 8008a2c:	f000 f8de 	bl	8008bec <USBD_Get_USB_Status>
 8008a30:	4603      	mov	r3, r0
 8008a32:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008a34:	7bbb      	ldrb	r3, [r7, #14]
}
 8008a36:	4618      	mov	r0, r3
 8008a38:	3710      	adds	r7, #16
 8008a3a:	46bd      	mov	sp, r7
 8008a3c:	bd80      	pop	{r7, pc}

08008a3e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008a3e:	b580      	push	{r7, lr}
 8008a40:	b084      	sub	sp, #16
 8008a42:	af00      	add	r7, sp, #0
 8008a44:	6078      	str	r0, [r7, #4]
 8008a46:	460b      	mov	r3, r1
 8008a48:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008a4a:	2300      	movs	r3, #0
 8008a4c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008a4e:	2300      	movs	r3, #0
 8008a50:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008a58:	78fa      	ldrb	r2, [r7, #3]
 8008a5a:	4611      	mov	r1, r2
 8008a5c:	4618      	mov	r0, r3
 8008a5e:	f7f9 fd2b 	bl	80024b8 <HAL_PCD_EP_ClrStall>
 8008a62:	4603      	mov	r3, r0
 8008a64:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008a66:	7bfb      	ldrb	r3, [r7, #15]
 8008a68:	4618      	mov	r0, r3
 8008a6a:	f000 f8bf 	bl	8008bec <USBD_Get_USB_Status>
 8008a6e:	4603      	mov	r3, r0
 8008a70:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008a72:	7bbb      	ldrb	r3, [r7, #14]
}
 8008a74:	4618      	mov	r0, r3
 8008a76:	3710      	adds	r7, #16
 8008a78:	46bd      	mov	sp, r7
 8008a7a:	bd80      	pop	{r7, pc}

08008a7c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008a7c:	b480      	push	{r7}
 8008a7e:	b085      	sub	sp, #20
 8008a80:	af00      	add	r7, sp, #0
 8008a82:	6078      	str	r0, [r7, #4]
 8008a84:	460b      	mov	r3, r1
 8008a86:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008a8e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008a90:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	da0b      	bge.n	8008ab0 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008a98:	78fb      	ldrb	r3, [r7, #3]
 8008a9a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008a9e:	68f9      	ldr	r1, [r7, #12]
 8008aa0:	4613      	mov	r3, r2
 8008aa2:	00db      	lsls	r3, r3, #3
 8008aa4:	4413      	add	r3, r2
 8008aa6:	009b      	lsls	r3, r3, #2
 8008aa8:	440b      	add	r3, r1
 8008aaa:	333e      	adds	r3, #62	; 0x3e
 8008aac:	781b      	ldrb	r3, [r3, #0]
 8008aae:	e00b      	b.n	8008ac8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008ab0:	78fb      	ldrb	r3, [r7, #3]
 8008ab2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008ab6:	68f9      	ldr	r1, [r7, #12]
 8008ab8:	4613      	mov	r3, r2
 8008aba:	00db      	lsls	r3, r3, #3
 8008abc:	4413      	add	r3, r2
 8008abe:	009b      	lsls	r3, r3, #2
 8008ac0:	440b      	add	r3, r1
 8008ac2:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8008ac6:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008ac8:	4618      	mov	r0, r3
 8008aca:	3714      	adds	r7, #20
 8008acc:	46bd      	mov	sp, r7
 8008ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ad2:	4770      	bx	lr

08008ad4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008ad4:	b580      	push	{r7, lr}
 8008ad6:	b084      	sub	sp, #16
 8008ad8:	af00      	add	r7, sp, #0
 8008ada:	6078      	str	r0, [r7, #4]
 8008adc:	460b      	mov	r3, r1
 8008ade:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008ae0:	2300      	movs	r3, #0
 8008ae2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008ae4:	2300      	movs	r3, #0
 8008ae6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008aee:	78fa      	ldrb	r2, [r7, #3]
 8008af0:	4611      	mov	r1, r2
 8008af2:	4618      	mov	r0, r3
 8008af4:	f7f9 faf8 	bl	80020e8 <HAL_PCD_SetAddress>
 8008af8:	4603      	mov	r3, r0
 8008afa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008afc:	7bfb      	ldrb	r3, [r7, #15]
 8008afe:	4618      	mov	r0, r3
 8008b00:	f000 f874 	bl	8008bec <USBD_Get_USB_Status>
 8008b04:	4603      	mov	r3, r0
 8008b06:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008b08:	7bbb      	ldrb	r3, [r7, #14]
}
 8008b0a:	4618      	mov	r0, r3
 8008b0c:	3710      	adds	r7, #16
 8008b0e:	46bd      	mov	sp, r7
 8008b10:	bd80      	pop	{r7, pc}

08008b12 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008b12:	b580      	push	{r7, lr}
 8008b14:	b086      	sub	sp, #24
 8008b16:	af00      	add	r7, sp, #0
 8008b18:	60f8      	str	r0, [r7, #12]
 8008b1a:	607a      	str	r2, [r7, #4]
 8008b1c:	603b      	str	r3, [r7, #0]
 8008b1e:	460b      	mov	r3, r1
 8008b20:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008b22:	2300      	movs	r3, #0
 8008b24:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008b26:	2300      	movs	r3, #0
 8008b28:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8008b30:	7af9      	ldrb	r1, [r7, #11]
 8008b32:	683b      	ldr	r3, [r7, #0]
 8008b34:	687a      	ldr	r2, [r7, #4]
 8008b36:	f7f9 fc11 	bl	800235c <HAL_PCD_EP_Transmit>
 8008b3a:	4603      	mov	r3, r0
 8008b3c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008b3e:	7dfb      	ldrb	r3, [r7, #23]
 8008b40:	4618      	mov	r0, r3
 8008b42:	f000 f853 	bl	8008bec <USBD_Get_USB_Status>
 8008b46:	4603      	mov	r3, r0
 8008b48:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008b4a:	7dbb      	ldrb	r3, [r7, #22]
}
 8008b4c:	4618      	mov	r0, r3
 8008b4e:	3718      	adds	r7, #24
 8008b50:	46bd      	mov	sp, r7
 8008b52:	bd80      	pop	{r7, pc}

08008b54 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008b54:	b580      	push	{r7, lr}
 8008b56:	b086      	sub	sp, #24
 8008b58:	af00      	add	r7, sp, #0
 8008b5a:	60f8      	str	r0, [r7, #12]
 8008b5c:	607a      	str	r2, [r7, #4]
 8008b5e:	603b      	str	r3, [r7, #0]
 8008b60:	460b      	mov	r3, r1
 8008b62:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008b64:	2300      	movs	r3, #0
 8008b66:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008b68:	2300      	movs	r3, #0
 8008b6a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8008b72:	7af9      	ldrb	r1, [r7, #11]
 8008b74:	683b      	ldr	r3, [r7, #0]
 8008b76:	687a      	ldr	r2, [r7, #4]
 8008b78:	f7f9 fb8d 	bl	8002296 <HAL_PCD_EP_Receive>
 8008b7c:	4603      	mov	r3, r0
 8008b7e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008b80:	7dfb      	ldrb	r3, [r7, #23]
 8008b82:	4618      	mov	r0, r3
 8008b84:	f000 f832 	bl	8008bec <USBD_Get_USB_Status>
 8008b88:	4603      	mov	r3, r0
 8008b8a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008b8c:	7dbb      	ldrb	r3, [r7, #22]
}
 8008b8e:	4618      	mov	r0, r3
 8008b90:	3718      	adds	r7, #24
 8008b92:	46bd      	mov	sp, r7
 8008b94:	bd80      	pop	{r7, pc}

08008b96 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008b96:	b580      	push	{r7, lr}
 8008b98:	b082      	sub	sp, #8
 8008b9a:	af00      	add	r7, sp, #0
 8008b9c:	6078      	str	r0, [r7, #4]
 8008b9e:	460b      	mov	r3, r1
 8008ba0:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008ba8:	78fa      	ldrb	r2, [r7, #3]
 8008baa:	4611      	mov	r1, r2
 8008bac:	4618      	mov	r0, r3
 8008bae:	f7f9 fbbd 	bl	800232c <HAL_PCD_EP_GetRxCount>
 8008bb2:	4603      	mov	r3, r0
}
 8008bb4:	4618      	mov	r0, r3
 8008bb6:	3708      	adds	r7, #8
 8008bb8:	46bd      	mov	sp, r7
 8008bba:	bd80      	pop	{r7, pc}

08008bbc <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008bbc:	b480      	push	{r7}
 8008bbe:	b083      	sub	sp, #12
 8008bc0:	af00      	add	r7, sp, #0
 8008bc2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008bc4:	4b03      	ldr	r3, [pc, #12]	; (8008bd4 <USBD_static_malloc+0x18>)
}
 8008bc6:	4618      	mov	r0, r3
 8008bc8:	370c      	adds	r7, #12
 8008bca:	46bd      	mov	sp, r7
 8008bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bd0:	4770      	bx	lr
 8008bd2:	bf00      	nop
 8008bd4:	20001d7c 	.word	0x20001d7c

08008bd8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008bd8:	b480      	push	{r7}
 8008bda:	b083      	sub	sp, #12
 8008bdc:	af00      	add	r7, sp, #0
 8008bde:	6078      	str	r0, [r7, #4]

}
 8008be0:	bf00      	nop
 8008be2:	370c      	adds	r7, #12
 8008be4:	46bd      	mov	sp, r7
 8008be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bea:	4770      	bx	lr

08008bec <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008bec:	b480      	push	{r7}
 8008bee:	b085      	sub	sp, #20
 8008bf0:	af00      	add	r7, sp, #0
 8008bf2:	4603      	mov	r3, r0
 8008bf4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008bf6:	2300      	movs	r3, #0
 8008bf8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008bfa:	79fb      	ldrb	r3, [r7, #7]
 8008bfc:	2b03      	cmp	r3, #3
 8008bfe:	d817      	bhi.n	8008c30 <USBD_Get_USB_Status+0x44>
 8008c00:	a201      	add	r2, pc, #4	; (adr r2, 8008c08 <USBD_Get_USB_Status+0x1c>)
 8008c02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c06:	bf00      	nop
 8008c08:	08008c19 	.word	0x08008c19
 8008c0c:	08008c1f 	.word	0x08008c1f
 8008c10:	08008c25 	.word	0x08008c25
 8008c14:	08008c2b 	.word	0x08008c2b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008c18:	2300      	movs	r3, #0
 8008c1a:	73fb      	strb	r3, [r7, #15]
    break;
 8008c1c:	e00b      	b.n	8008c36 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008c1e:	2303      	movs	r3, #3
 8008c20:	73fb      	strb	r3, [r7, #15]
    break;
 8008c22:	e008      	b.n	8008c36 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008c24:	2301      	movs	r3, #1
 8008c26:	73fb      	strb	r3, [r7, #15]
    break;
 8008c28:	e005      	b.n	8008c36 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008c2a:	2303      	movs	r3, #3
 8008c2c:	73fb      	strb	r3, [r7, #15]
    break;
 8008c2e:	e002      	b.n	8008c36 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008c30:	2303      	movs	r3, #3
 8008c32:	73fb      	strb	r3, [r7, #15]
    break;
 8008c34:	bf00      	nop
  }
  return usb_status;
 8008c36:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c38:	4618      	mov	r0, r3
 8008c3a:	3714      	adds	r7, #20
 8008c3c:	46bd      	mov	sp, r7
 8008c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c42:	4770      	bx	lr

08008c44 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008c44:	b480      	push	{r7}
 8008c46:	b083      	sub	sp, #12
 8008c48:	af00      	add	r7, sp, #0
 8008c4a:	4603      	mov	r3, r0
 8008c4c:	6039      	str	r1, [r7, #0]
 8008c4e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008c50:	683b      	ldr	r3, [r7, #0]
 8008c52:	2212      	movs	r2, #18
 8008c54:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8008c56:	4b03      	ldr	r3, [pc, #12]	; (8008c64 <USBD_FS_DeviceDescriptor+0x20>)
}
 8008c58:	4618      	mov	r0, r3
 8008c5a:	370c      	adds	r7, #12
 8008c5c:	46bd      	mov	sp, r7
 8008c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c62:	4770      	bx	lr
 8008c64:	20000190 	.word	0x20000190

08008c68 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008c68:	b480      	push	{r7}
 8008c6a:	b083      	sub	sp, #12
 8008c6c:	af00      	add	r7, sp, #0
 8008c6e:	4603      	mov	r3, r0
 8008c70:	6039      	str	r1, [r7, #0]
 8008c72:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008c74:	683b      	ldr	r3, [r7, #0]
 8008c76:	2204      	movs	r2, #4
 8008c78:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008c7a:	4b03      	ldr	r3, [pc, #12]	; (8008c88 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008c7c:	4618      	mov	r0, r3
 8008c7e:	370c      	adds	r7, #12
 8008c80:	46bd      	mov	sp, r7
 8008c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c86:	4770      	bx	lr
 8008c88:	200001a4 	.word	0x200001a4

08008c8c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008c8c:	b580      	push	{r7, lr}
 8008c8e:	b082      	sub	sp, #8
 8008c90:	af00      	add	r7, sp, #0
 8008c92:	4603      	mov	r3, r0
 8008c94:	6039      	str	r1, [r7, #0]
 8008c96:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008c98:	79fb      	ldrb	r3, [r7, #7]
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	d105      	bne.n	8008caa <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008c9e:	683a      	ldr	r2, [r7, #0]
 8008ca0:	4907      	ldr	r1, [pc, #28]	; (8008cc0 <USBD_FS_ProductStrDescriptor+0x34>)
 8008ca2:	4808      	ldr	r0, [pc, #32]	; (8008cc4 <USBD_FS_ProductStrDescriptor+0x38>)
 8008ca4:	f7fe fad0 	bl	8007248 <USBD_GetString>
 8008ca8:	e004      	b.n	8008cb4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008caa:	683a      	ldr	r2, [r7, #0]
 8008cac:	4904      	ldr	r1, [pc, #16]	; (8008cc0 <USBD_FS_ProductStrDescriptor+0x34>)
 8008cae:	4805      	ldr	r0, [pc, #20]	; (8008cc4 <USBD_FS_ProductStrDescriptor+0x38>)
 8008cb0:	f7fe faca 	bl	8007248 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008cb4:	4b02      	ldr	r3, [pc, #8]	; (8008cc0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8008cb6:	4618      	mov	r0, r3
 8008cb8:	3708      	adds	r7, #8
 8008cba:	46bd      	mov	sp, r7
 8008cbc:	bd80      	pop	{r7, pc}
 8008cbe:	bf00      	nop
 8008cc0:	20001f9c 	.word	0x20001f9c
 8008cc4:	0800a428 	.word	0x0800a428

08008cc8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008cc8:	b580      	push	{r7, lr}
 8008cca:	b082      	sub	sp, #8
 8008ccc:	af00      	add	r7, sp, #0
 8008cce:	4603      	mov	r3, r0
 8008cd0:	6039      	str	r1, [r7, #0]
 8008cd2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008cd4:	683a      	ldr	r2, [r7, #0]
 8008cd6:	4904      	ldr	r1, [pc, #16]	; (8008ce8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008cd8:	4804      	ldr	r0, [pc, #16]	; (8008cec <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8008cda:	f7fe fab5 	bl	8007248 <USBD_GetString>
  return USBD_StrDesc;
 8008cde:	4b02      	ldr	r3, [pc, #8]	; (8008ce8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008ce0:	4618      	mov	r0, r3
 8008ce2:	3708      	adds	r7, #8
 8008ce4:	46bd      	mov	sp, r7
 8008ce6:	bd80      	pop	{r7, pc}
 8008ce8:	20001f9c 	.word	0x20001f9c
 8008cec:	0800a440 	.word	0x0800a440

08008cf0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008cf0:	b580      	push	{r7, lr}
 8008cf2:	b082      	sub	sp, #8
 8008cf4:	af00      	add	r7, sp, #0
 8008cf6:	4603      	mov	r3, r0
 8008cf8:	6039      	str	r1, [r7, #0]
 8008cfa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008cfc:	683b      	ldr	r3, [r7, #0]
 8008cfe:	221a      	movs	r2, #26
 8008d00:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008d02:	f000 f843 	bl	8008d8c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8008d06:	4b02      	ldr	r3, [pc, #8]	; (8008d10 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008d08:	4618      	mov	r0, r3
 8008d0a:	3708      	adds	r7, #8
 8008d0c:	46bd      	mov	sp, r7
 8008d0e:	bd80      	pop	{r7, pc}
 8008d10:	200001a8 	.word	0x200001a8

08008d14 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008d14:	b580      	push	{r7, lr}
 8008d16:	b082      	sub	sp, #8
 8008d18:	af00      	add	r7, sp, #0
 8008d1a:	4603      	mov	r3, r0
 8008d1c:	6039      	str	r1, [r7, #0]
 8008d1e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008d20:	79fb      	ldrb	r3, [r7, #7]
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	d105      	bne.n	8008d32 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008d26:	683a      	ldr	r2, [r7, #0]
 8008d28:	4907      	ldr	r1, [pc, #28]	; (8008d48 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008d2a:	4808      	ldr	r0, [pc, #32]	; (8008d4c <USBD_FS_ConfigStrDescriptor+0x38>)
 8008d2c:	f7fe fa8c 	bl	8007248 <USBD_GetString>
 8008d30:	e004      	b.n	8008d3c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008d32:	683a      	ldr	r2, [r7, #0]
 8008d34:	4904      	ldr	r1, [pc, #16]	; (8008d48 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008d36:	4805      	ldr	r0, [pc, #20]	; (8008d4c <USBD_FS_ConfigStrDescriptor+0x38>)
 8008d38:	f7fe fa86 	bl	8007248 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008d3c:	4b02      	ldr	r3, [pc, #8]	; (8008d48 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8008d3e:	4618      	mov	r0, r3
 8008d40:	3708      	adds	r7, #8
 8008d42:	46bd      	mov	sp, r7
 8008d44:	bd80      	pop	{r7, pc}
 8008d46:	bf00      	nop
 8008d48:	20001f9c 	.word	0x20001f9c
 8008d4c:	0800a454 	.word	0x0800a454

08008d50 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008d50:	b580      	push	{r7, lr}
 8008d52:	b082      	sub	sp, #8
 8008d54:	af00      	add	r7, sp, #0
 8008d56:	4603      	mov	r3, r0
 8008d58:	6039      	str	r1, [r7, #0]
 8008d5a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008d5c:	79fb      	ldrb	r3, [r7, #7]
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	d105      	bne.n	8008d6e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008d62:	683a      	ldr	r2, [r7, #0]
 8008d64:	4907      	ldr	r1, [pc, #28]	; (8008d84 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008d66:	4808      	ldr	r0, [pc, #32]	; (8008d88 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008d68:	f7fe fa6e 	bl	8007248 <USBD_GetString>
 8008d6c:	e004      	b.n	8008d78 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008d6e:	683a      	ldr	r2, [r7, #0]
 8008d70:	4904      	ldr	r1, [pc, #16]	; (8008d84 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008d72:	4805      	ldr	r0, [pc, #20]	; (8008d88 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008d74:	f7fe fa68 	bl	8007248 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008d78:	4b02      	ldr	r3, [pc, #8]	; (8008d84 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8008d7a:	4618      	mov	r0, r3
 8008d7c:	3708      	adds	r7, #8
 8008d7e:	46bd      	mov	sp, r7
 8008d80:	bd80      	pop	{r7, pc}
 8008d82:	bf00      	nop
 8008d84:	20001f9c 	.word	0x20001f9c
 8008d88:	0800a460 	.word	0x0800a460

08008d8c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008d8c:	b580      	push	{r7, lr}
 8008d8e:	b084      	sub	sp, #16
 8008d90:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008d92:	4b0f      	ldr	r3, [pc, #60]	; (8008dd0 <Get_SerialNum+0x44>)
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008d98:	4b0e      	ldr	r3, [pc, #56]	; (8008dd4 <Get_SerialNum+0x48>)
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008d9e:	4b0e      	ldr	r3, [pc, #56]	; (8008dd8 <Get_SerialNum+0x4c>)
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008da4:	68fa      	ldr	r2, [r7, #12]
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	4413      	add	r3, r2
 8008daa:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d009      	beq.n	8008dc6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008db2:	2208      	movs	r2, #8
 8008db4:	4909      	ldr	r1, [pc, #36]	; (8008ddc <Get_SerialNum+0x50>)
 8008db6:	68f8      	ldr	r0, [r7, #12]
 8008db8:	f000 f814 	bl	8008de4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008dbc:	2204      	movs	r2, #4
 8008dbe:	4908      	ldr	r1, [pc, #32]	; (8008de0 <Get_SerialNum+0x54>)
 8008dc0:	68b8      	ldr	r0, [r7, #8]
 8008dc2:	f000 f80f 	bl	8008de4 <IntToUnicode>
  }
}
 8008dc6:	bf00      	nop
 8008dc8:	3710      	adds	r7, #16
 8008dca:	46bd      	mov	sp, r7
 8008dcc:	bd80      	pop	{r7, pc}
 8008dce:	bf00      	nop
 8008dd0:	1fff7a10 	.word	0x1fff7a10
 8008dd4:	1fff7a14 	.word	0x1fff7a14
 8008dd8:	1fff7a18 	.word	0x1fff7a18
 8008ddc:	200001aa 	.word	0x200001aa
 8008de0:	200001ba 	.word	0x200001ba

08008de4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008de4:	b480      	push	{r7}
 8008de6:	b087      	sub	sp, #28
 8008de8:	af00      	add	r7, sp, #0
 8008dea:	60f8      	str	r0, [r7, #12]
 8008dec:	60b9      	str	r1, [r7, #8]
 8008dee:	4613      	mov	r3, r2
 8008df0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008df2:	2300      	movs	r3, #0
 8008df4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008df6:	2300      	movs	r3, #0
 8008df8:	75fb      	strb	r3, [r7, #23]
 8008dfa:	e027      	b.n	8008e4c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	0f1b      	lsrs	r3, r3, #28
 8008e00:	2b09      	cmp	r3, #9
 8008e02:	d80b      	bhi.n	8008e1c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	0f1b      	lsrs	r3, r3, #28
 8008e08:	b2da      	uxtb	r2, r3
 8008e0a:	7dfb      	ldrb	r3, [r7, #23]
 8008e0c:	005b      	lsls	r3, r3, #1
 8008e0e:	4619      	mov	r1, r3
 8008e10:	68bb      	ldr	r3, [r7, #8]
 8008e12:	440b      	add	r3, r1
 8008e14:	3230      	adds	r2, #48	; 0x30
 8008e16:	b2d2      	uxtb	r2, r2
 8008e18:	701a      	strb	r2, [r3, #0]
 8008e1a:	e00a      	b.n	8008e32 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	0f1b      	lsrs	r3, r3, #28
 8008e20:	b2da      	uxtb	r2, r3
 8008e22:	7dfb      	ldrb	r3, [r7, #23]
 8008e24:	005b      	lsls	r3, r3, #1
 8008e26:	4619      	mov	r1, r3
 8008e28:	68bb      	ldr	r3, [r7, #8]
 8008e2a:	440b      	add	r3, r1
 8008e2c:	3237      	adds	r2, #55	; 0x37
 8008e2e:	b2d2      	uxtb	r2, r2
 8008e30:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008e32:	68fb      	ldr	r3, [r7, #12]
 8008e34:	011b      	lsls	r3, r3, #4
 8008e36:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008e38:	7dfb      	ldrb	r3, [r7, #23]
 8008e3a:	005b      	lsls	r3, r3, #1
 8008e3c:	3301      	adds	r3, #1
 8008e3e:	68ba      	ldr	r2, [r7, #8]
 8008e40:	4413      	add	r3, r2
 8008e42:	2200      	movs	r2, #0
 8008e44:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008e46:	7dfb      	ldrb	r3, [r7, #23]
 8008e48:	3301      	adds	r3, #1
 8008e4a:	75fb      	strb	r3, [r7, #23]
 8008e4c:	7dfa      	ldrb	r2, [r7, #23]
 8008e4e:	79fb      	ldrb	r3, [r7, #7]
 8008e50:	429a      	cmp	r2, r3
 8008e52:	d3d3      	bcc.n	8008dfc <IntToUnicode+0x18>
  }
}
 8008e54:	bf00      	nop
 8008e56:	bf00      	nop
 8008e58:	371c      	adds	r7, #28
 8008e5a:	46bd      	mov	sp, r7
 8008e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e60:	4770      	bx	lr
	...

08008e64 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack     /* set stack pointer */
 8008e64:	f8df d034 	ldr.w	sp, [pc, #52]	; 8008e9c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8008e68:	480d      	ldr	r0, [pc, #52]	; (8008ea0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8008e6a:	490e      	ldr	r1, [pc, #56]	; (8008ea4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8008e6c:	4a0e      	ldr	r2, [pc, #56]	; (8008ea8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8008e6e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8008e70:	e002      	b.n	8008e78 <LoopCopyDataInit>

08008e72 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8008e72:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8008e74:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8008e76:	3304      	adds	r3, #4

08008e78 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8008e78:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8008e7a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8008e7c:	d3f9      	bcc.n	8008e72 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8008e7e:	4a0b      	ldr	r2, [pc, #44]	; (8008eac <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8008e80:	4c0b      	ldr	r4, [pc, #44]	; (8008eb0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8008e82:	2300      	movs	r3, #0
  b LoopFillZerobss
 8008e84:	e001      	b.n	8008e8a <LoopFillZerobss>

08008e86 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8008e86:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8008e88:	3204      	adds	r2, #4

08008e8a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8008e8a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8008e8c:	d3fb      	bcc.n	8008e86 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8008e8e:	f7ff fa81 	bl	8008394 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8008e92:	f000 f817 	bl	8008ec4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8008e96:	f7fe fdf9 	bl	8007a8c <main>
  bx  lr    
 8008e9a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8008e9c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8008ea0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8008ea4:	20000228 	.word	0x20000228
  ldr r2, =_sidata
 8008ea8:	0800a530 	.word	0x0800a530
  ldr r2, =_sbss
 8008eac:	20000228 	.word	0x20000228
  ldr r4, =_ebss
 8008eb0:	200021ac 	.word	0x200021ac

08008eb4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8008eb4:	e7fe      	b.n	8008eb4 <ADC_IRQHandler>
	...

08008eb8 <__errno>:
 8008eb8:	4b01      	ldr	r3, [pc, #4]	; (8008ec0 <__errno+0x8>)
 8008eba:	6818      	ldr	r0, [r3, #0]
 8008ebc:	4770      	bx	lr
 8008ebe:	bf00      	nop
 8008ec0:	200001c4 	.word	0x200001c4

08008ec4 <__libc_init_array>:
 8008ec4:	b570      	push	{r4, r5, r6, lr}
 8008ec6:	4d0d      	ldr	r5, [pc, #52]	; (8008efc <__libc_init_array+0x38>)
 8008ec8:	4c0d      	ldr	r4, [pc, #52]	; (8008f00 <__libc_init_array+0x3c>)
 8008eca:	1b64      	subs	r4, r4, r5
 8008ecc:	10a4      	asrs	r4, r4, #2
 8008ece:	2600      	movs	r6, #0
 8008ed0:	42a6      	cmp	r6, r4
 8008ed2:	d109      	bne.n	8008ee8 <__libc_init_array+0x24>
 8008ed4:	4d0b      	ldr	r5, [pc, #44]	; (8008f04 <__libc_init_array+0x40>)
 8008ed6:	4c0c      	ldr	r4, [pc, #48]	; (8008f08 <__libc_init_array+0x44>)
 8008ed8:	f001 f9e8 	bl	800a2ac <_init>
 8008edc:	1b64      	subs	r4, r4, r5
 8008ede:	10a4      	asrs	r4, r4, #2
 8008ee0:	2600      	movs	r6, #0
 8008ee2:	42a6      	cmp	r6, r4
 8008ee4:	d105      	bne.n	8008ef2 <__libc_init_array+0x2e>
 8008ee6:	bd70      	pop	{r4, r5, r6, pc}
 8008ee8:	f855 3b04 	ldr.w	r3, [r5], #4
 8008eec:	4798      	blx	r3
 8008eee:	3601      	adds	r6, #1
 8008ef0:	e7ee      	b.n	8008ed0 <__libc_init_array+0xc>
 8008ef2:	f855 3b04 	ldr.w	r3, [r5], #4
 8008ef6:	4798      	blx	r3
 8008ef8:	3601      	adds	r6, #1
 8008efa:	e7f2      	b.n	8008ee2 <__libc_init_array+0x1e>
 8008efc:	0800a528 	.word	0x0800a528
 8008f00:	0800a528 	.word	0x0800a528
 8008f04:	0800a528 	.word	0x0800a528
 8008f08:	0800a52c 	.word	0x0800a52c

08008f0c <memcpy>:
 8008f0c:	440a      	add	r2, r1
 8008f0e:	4291      	cmp	r1, r2
 8008f10:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8008f14:	d100      	bne.n	8008f18 <memcpy+0xc>
 8008f16:	4770      	bx	lr
 8008f18:	b510      	push	{r4, lr}
 8008f1a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008f1e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008f22:	4291      	cmp	r1, r2
 8008f24:	d1f9      	bne.n	8008f1a <memcpy+0xe>
 8008f26:	bd10      	pop	{r4, pc}

08008f28 <memset>:
 8008f28:	4402      	add	r2, r0
 8008f2a:	4603      	mov	r3, r0
 8008f2c:	4293      	cmp	r3, r2
 8008f2e:	d100      	bne.n	8008f32 <memset+0xa>
 8008f30:	4770      	bx	lr
 8008f32:	f803 1b01 	strb.w	r1, [r3], #1
 8008f36:	e7f9      	b.n	8008f2c <memset+0x4>

08008f38 <iprintf>:
 8008f38:	b40f      	push	{r0, r1, r2, r3}
 8008f3a:	4b0a      	ldr	r3, [pc, #40]	; (8008f64 <iprintf+0x2c>)
 8008f3c:	b513      	push	{r0, r1, r4, lr}
 8008f3e:	681c      	ldr	r4, [r3, #0]
 8008f40:	b124      	cbz	r4, 8008f4c <iprintf+0x14>
 8008f42:	69a3      	ldr	r3, [r4, #24]
 8008f44:	b913      	cbnz	r3, 8008f4c <iprintf+0x14>
 8008f46:	4620      	mov	r0, r4
 8008f48:	f000 f89c 	bl	8009084 <__sinit>
 8008f4c:	ab05      	add	r3, sp, #20
 8008f4e:	9a04      	ldr	r2, [sp, #16]
 8008f50:	68a1      	ldr	r1, [r4, #8]
 8008f52:	9301      	str	r3, [sp, #4]
 8008f54:	4620      	mov	r0, r4
 8008f56:	f000 fb4f 	bl	80095f8 <_vfiprintf_r>
 8008f5a:	b002      	add	sp, #8
 8008f5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008f60:	b004      	add	sp, #16
 8008f62:	4770      	bx	lr
 8008f64:	200001c4 	.word	0x200001c4

08008f68 <putchar>:
 8008f68:	4b09      	ldr	r3, [pc, #36]	; (8008f90 <putchar+0x28>)
 8008f6a:	b513      	push	{r0, r1, r4, lr}
 8008f6c:	681c      	ldr	r4, [r3, #0]
 8008f6e:	4601      	mov	r1, r0
 8008f70:	b134      	cbz	r4, 8008f80 <putchar+0x18>
 8008f72:	69a3      	ldr	r3, [r4, #24]
 8008f74:	b923      	cbnz	r3, 8008f80 <putchar+0x18>
 8008f76:	9001      	str	r0, [sp, #4]
 8008f78:	4620      	mov	r0, r4
 8008f7a:	f000 f883 	bl	8009084 <__sinit>
 8008f7e:	9901      	ldr	r1, [sp, #4]
 8008f80:	68a2      	ldr	r2, [r4, #8]
 8008f82:	4620      	mov	r0, r4
 8008f84:	b002      	add	sp, #8
 8008f86:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008f8a:	f000 bdf9 	b.w	8009b80 <_putc_r>
 8008f8e:	bf00      	nop
 8008f90:	200001c4 	.word	0x200001c4

08008f94 <siprintf>:
 8008f94:	b40e      	push	{r1, r2, r3}
 8008f96:	b500      	push	{lr}
 8008f98:	b09c      	sub	sp, #112	; 0x70
 8008f9a:	ab1d      	add	r3, sp, #116	; 0x74
 8008f9c:	9002      	str	r0, [sp, #8]
 8008f9e:	9006      	str	r0, [sp, #24]
 8008fa0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008fa4:	4809      	ldr	r0, [pc, #36]	; (8008fcc <siprintf+0x38>)
 8008fa6:	9107      	str	r1, [sp, #28]
 8008fa8:	9104      	str	r1, [sp, #16]
 8008faa:	4909      	ldr	r1, [pc, #36]	; (8008fd0 <siprintf+0x3c>)
 8008fac:	f853 2b04 	ldr.w	r2, [r3], #4
 8008fb0:	9105      	str	r1, [sp, #20]
 8008fb2:	6800      	ldr	r0, [r0, #0]
 8008fb4:	9301      	str	r3, [sp, #4]
 8008fb6:	a902      	add	r1, sp, #8
 8008fb8:	f000 f9f4 	bl	80093a4 <_svfiprintf_r>
 8008fbc:	9b02      	ldr	r3, [sp, #8]
 8008fbe:	2200      	movs	r2, #0
 8008fc0:	701a      	strb	r2, [r3, #0]
 8008fc2:	b01c      	add	sp, #112	; 0x70
 8008fc4:	f85d eb04 	ldr.w	lr, [sp], #4
 8008fc8:	b003      	add	sp, #12
 8008fca:	4770      	bx	lr
 8008fcc:	200001c4 	.word	0x200001c4
 8008fd0:	ffff0208 	.word	0xffff0208

08008fd4 <std>:
 8008fd4:	2300      	movs	r3, #0
 8008fd6:	b510      	push	{r4, lr}
 8008fd8:	4604      	mov	r4, r0
 8008fda:	e9c0 3300 	strd	r3, r3, [r0]
 8008fde:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008fe2:	6083      	str	r3, [r0, #8]
 8008fe4:	8181      	strh	r1, [r0, #12]
 8008fe6:	6643      	str	r3, [r0, #100]	; 0x64
 8008fe8:	81c2      	strh	r2, [r0, #14]
 8008fea:	6183      	str	r3, [r0, #24]
 8008fec:	4619      	mov	r1, r3
 8008fee:	2208      	movs	r2, #8
 8008ff0:	305c      	adds	r0, #92	; 0x5c
 8008ff2:	f7ff ff99 	bl	8008f28 <memset>
 8008ff6:	4b05      	ldr	r3, [pc, #20]	; (800900c <std+0x38>)
 8008ff8:	6263      	str	r3, [r4, #36]	; 0x24
 8008ffa:	4b05      	ldr	r3, [pc, #20]	; (8009010 <std+0x3c>)
 8008ffc:	62a3      	str	r3, [r4, #40]	; 0x28
 8008ffe:	4b05      	ldr	r3, [pc, #20]	; (8009014 <std+0x40>)
 8009000:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009002:	4b05      	ldr	r3, [pc, #20]	; (8009018 <std+0x44>)
 8009004:	6224      	str	r4, [r4, #32]
 8009006:	6323      	str	r3, [r4, #48]	; 0x30
 8009008:	bd10      	pop	{r4, pc}
 800900a:	bf00      	nop
 800900c:	08009c31 	.word	0x08009c31
 8009010:	08009c53 	.word	0x08009c53
 8009014:	08009c8b 	.word	0x08009c8b
 8009018:	08009caf 	.word	0x08009caf

0800901c <_cleanup_r>:
 800901c:	4901      	ldr	r1, [pc, #4]	; (8009024 <_cleanup_r+0x8>)
 800901e:	f000 b8af 	b.w	8009180 <_fwalk_reent>
 8009022:	bf00      	nop
 8009024:	08009f89 	.word	0x08009f89

08009028 <__sfmoreglue>:
 8009028:	b570      	push	{r4, r5, r6, lr}
 800902a:	2268      	movs	r2, #104	; 0x68
 800902c:	1e4d      	subs	r5, r1, #1
 800902e:	4355      	muls	r5, r2
 8009030:	460e      	mov	r6, r1
 8009032:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009036:	f000 f8e5 	bl	8009204 <_malloc_r>
 800903a:	4604      	mov	r4, r0
 800903c:	b140      	cbz	r0, 8009050 <__sfmoreglue+0x28>
 800903e:	2100      	movs	r1, #0
 8009040:	e9c0 1600 	strd	r1, r6, [r0]
 8009044:	300c      	adds	r0, #12
 8009046:	60a0      	str	r0, [r4, #8]
 8009048:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800904c:	f7ff ff6c 	bl	8008f28 <memset>
 8009050:	4620      	mov	r0, r4
 8009052:	bd70      	pop	{r4, r5, r6, pc}

08009054 <__sfp_lock_acquire>:
 8009054:	4801      	ldr	r0, [pc, #4]	; (800905c <__sfp_lock_acquire+0x8>)
 8009056:	f000 b8b3 	b.w	80091c0 <__retarget_lock_acquire_recursive>
 800905a:	bf00      	nop
 800905c:	2000219d 	.word	0x2000219d

08009060 <__sfp_lock_release>:
 8009060:	4801      	ldr	r0, [pc, #4]	; (8009068 <__sfp_lock_release+0x8>)
 8009062:	f000 b8ae 	b.w	80091c2 <__retarget_lock_release_recursive>
 8009066:	bf00      	nop
 8009068:	2000219d 	.word	0x2000219d

0800906c <__sinit_lock_acquire>:
 800906c:	4801      	ldr	r0, [pc, #4]	; (8009074 <__sinit_lock_acquire+0x8>)
 800906e:	f000 b8a7 	b.w	80091c0 <__retarget_lock_acquire_recursive>
 8009072:	bf00      	nop
 8009074:	2000219e 	.word	0x2000219e

08009078 <__sinit_lock_release>:
 8009078:	4801      	ldr	r0, [pc, #4]	; (8009080 <__sinit_lock_release+0x8>)
 800907a:	f000 b8a2 	b.w	80091c2 <__retarget_lock_release_recursive>
 800907e:	bf00      	nop
 8009080:	2000219e 	.word	0x2000219e

08009084 <__sinit>:
 8009084:	b510      	push	{r4, lr}
 8009086:	4604      	mov	r4, r0
 8009088:	f7ff fff0 	bl	800906c <__sinit_lock_acquire>
 800908c:	69a3      	ldr	r3, [r4, #24]
 800908e:	b11b      	cbz	r3, 8009098 <__sinit+0x14>
 8009090:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009094:	f7ff bff0 	b.w	8009078 <__sinit_lock_release>
 8009098:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800909c:	6523      	str	r3, [r4, #80]	; 0x50
 800909e:	4b13      	ldr	r3, [pc, #76]	; (80090ec <__sinit+0x68>)
 80090a0:	4a13      	ldr	r2, [pc, #76]	; (80090f0 <__sinit+0x6c>)
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	62a2      	str	r2, [r4, #40]	; 0x28
 80090a6:	42a3      	cmp	r3, r4
 80090a8:	bf04      	itt	eq
 80090aa:	2301      	moveq	r3, #1
 80090ac:	61a3      	streq	r3, [r4, #24]
 80090ae:	4620      	mov	r0, r4
 80090b0:	f000 f820 	bl	80090f4 <__sfp>
 80090b4:	6060      	str	r0, [r4, #4]
 80090b6:	4620      	mov	r0, r4
 80090b8:	f000 f81c 	bl	80090f4 <__sfp>
 80090bc:	60a0      	str	r0, [r4, #8]
 80090be:	4620      	mov	r0, r4
 80090c0:	f000 f818 	bl	80090f4 <__sfp>
 80090c4:	2200      	movs	r2, #0
 80090c6:	60e0      	str	r0, [r4, #12]
 80090c8:	2104      	movs	r1, #4
 80090ca:	6860      	ldr	r0, [r4, #4]
 80090cc:	f7ff ff82 	bl	8008fd4 <std>
 80090d0:	68a0      	ldr	r0, [r4, #8]
 80090d2:	2201      	movs	r2, #1
 80090d4:	2109      	movs	r1, #9
 80090d6:	f7ff ff7d 	bl	8008fd4 <std>
 80090da:	68e0      	ldr	r0, [r4, #12]
 80090dc:	2202      	movs	r2, #2
 80090de:	2112      	movs	r1, #18
 80090e0:	f7ff ff78 	bl	8008fd4 <std>
 80090e4:	2301      	movs	r3, #1
 80090e6:	61a3      	str	r3, [r4, #24]
 80090e8:	e7d2      	b.n	8009090 <__sinit+0xc>
 80090ea:	bf00      	nop
 80090ec:	0800a488 	.word	0x0800a488
 80090f0:	0800901d 	.word	0x0800901d

080090f4 <__sfp>:
 80090f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80090f6:	4607      	mov	r7, r0
 80090f8:	f7ff ffac 	bl	8009054 <__sfp_lock_acquire>
 80090fc:	4b1e      	ldr	r3, [pc, #120]	; (8009178 <__sfp+0x84>)
 80090fe:	681e      	ldr	r6, [r3, #0]
 8009100:	69b3      	ldr	r3, [r6, #24]
 8009102:	b913      	cbnz	r3, 800910a <__sfp+0x16>
 8009104:	4630      	mov	r0, r6
 8009106:	f7ff ffbd 	bl	8009084 <__sinit>
 800910a:	3648      	adds	r6, #72	; 0x48
 800910c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009110:	3b01      	subs	r3, #1
 8009112:	d503      	bpl.n	800911c <__sfp+0x28>
 8009114:	6833      	ldr	r3, [r6, #0]
 8009116:	b30b      	cbz	r3, 800915c <__sfp+0x68>
 8009118:	6836      	ldr	r6, [r6, #0]
 800911a:	e7f7      	b.n	800910c <__sfp+0x18>
 800911c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009120:	b9d5      	cbnz	r5, 8009158 <__sfp+0x64>
 8009122:	4b16      	ldr	r3, [pc, #88]	; (800917c <__sfp+0x88>)
 8009124:	60e3      	str	r3, [r4, #12]
 8009126:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800912a:	6665      	str	r5, [r4, #100]	; 0x64
 800912c:	f000 f847 	bl	80091be <__retarget_lock_init_recursive>
 8009130:	f7ff ff96 	bl	8009060 <__sfp_lock_release>
 8009134:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009138:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800913c:	6025      	str	r5, [r4, #0]
 800913e:	61a5      	str	r5, [r4, #24]
 8009140:	2208      	movs	r2, #8
 8009142:	4629      	mov	r1, r5
 8009144:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009148:	f7ff feee 	bl	8008f28 <memset>
 800914c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009150:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009154:	4620      	mov	r0, r4
 8009156:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009158:	3468      	adds	r4, #104	; 0x68
 800915a:	e7d9      	b.n	8009110 <__sfp+0x1c>
 800915c:	2104      	movs	r1, #4
 800915e:	4638      	mov	r0, r7
 8009160:	f7ff ff62 	bl	8009028 <__sfmoreglue>
 8009164:	4604      	mov	r4, r0
 8009166:	6030      	str	r0, [r6, #0]
 8009168:	2800      	cmp	r0, #0
 800916a:	d1d5      	bne.n	8009118 <__sfp+0x24>
 800916c:	f7ff ff78 	bl	8009060 <__sfp_lock_release>
 8009170:	230c      	movs	r3, #12
 8009172:	603b      	str	r3, [r7, #0]
 8009174:	e7ee      	b.n	8009154 <__sfp+0x60>
 8009176:	bf00      	nop
 8009178:	0800a488 	.word	0x0800a488
 800917c:	ffff0001 	.word	0xffff0001

08009180 <_fwalk_reent>:
 8009180:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009184:	4606      	mov	r6, r0
 8009186:	4688      	mov	r8, r1
 8009188:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800918c:	2700      	movs	r7, #0
 800918e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009192:	f1b9 0901 	subs.w	r9, r9, #1
 8009196:	d505      	bpl.n	80091a4 <_fwalk_reent+0x24>
 8009198:	6824      	ldr	r4, [r4, #0]
 800919a:	2c00      	cmp	r4, #0
 800919c:	d1f7      	bne.n	800918e <_fwalk_reent+0xe>
 800919e:	4638      	mov	r0, r7
 80091a0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80091a4:	89ab      	ldrh	r3, [r5, #12]
 80091a6:	2b01      	cmp	r3, #1
 80091a8:	d907      	bls.n	80091ba <_fwalk_reent+0x3a>
 80091aa:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80091ae:	3301      	adds	r3, #1
 80091b0:	d003      	beq.n	80091ba <_fwalk_reent+0x3a>
 80091b2:	4629      	mov	r1, r5
 80091b4:	4630      	mov	r0, r6
 80091b6:	47c0      	blx	r8
 80091b8:	4307      	orrs	r7, r0
 80091ba:	3568      	adds	r5, #104	; 0x68
 80091bc:	e7e9      	b.n	8009192 <_fwalk_reent+0x12>

080091be <__retarget_lock_init_recursive>:
 80091be:	4770      	bx	lr

080091c0 <__retarget_lock_acquire_recursive>:
 80091c0:	4770      	bx	lr

080091c2 <__retarget_lock_release_recursive>:
 80091c2:	4770      	bx	lr

080091c4 <sbrk_aligned>:
 80091c4:	b570      	push	{r4, r5, r6, lr}
 80091c6:	4e0e      	ldr	r6, [pc, #56]	; (8009200 <sbrk_aligned+0x3c>)
 80091c8:	460c      	mov	r4, r1
 80091ca:	6831      	ldr	r1, [r6, #0]
 80091cc:	4605      	mov	r5, r0
 80091ce:	b911      	cbnz	r1, 80091d6 <sbrk_aligned+0x12>
 80091d0:	f000 fd1e 	bl	8009c10 <_sbrk_r>
 80091d4:	6030      	str	r0, [r6, #0]
 80091d6:	4621      	mov	r1, r4
 80091d8:	4628      	mov	r0, r5
 80091da:	f000 fd19 	bl	8009c10 <_sbrk_r>
 80091de:	1c43      	adds	r3, r0, #1
 80091e0:	d00a      	beq.n	80091f8 <sbrk_aligned+0x34>
 80091e2:	1cc4      	adds	r4, r0, #3
 80091e4:	f024 0403 	bic.w	r4, r4, #3
 80091e8:	42a0      	cmp	r0, r4
 80091ea:	d007      	beq.n	80091fc <sbrk_aligned+0x38>
 80091ec:	1a21      	subs	r1, r4, r0
 80091ee:	4628      	mov	r0, r5
 80091f0:	f000 fd0e 	bl	8009c10 <_sbrk_r>
 80091f4:	3001      	adds	r0, #1
 80091f6:	d101      	bne.n	80091fc <sbrk_aligned+0x38>
 80091f8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80091fc:	4620      	mov	r0, r4
 80091fe:	bd70      	pop	{r4, r5, r6, pc}
 8009200:	200021a4 	.word	0x200021a4

08009204 <_malloc_r>:
 8009204:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009208:	1ccd      	adds	r5, r1, #3
 800920a:	f025 0503 	bic.w	r5, r5, #3
 800920e:	3508      	adds	r5, #8
 8009210:	2d0c      	cmp	r5, #12
 8009212:	bf38      	it	cc
 8009214:	250c      	movcc	r5, #12
 8009216:	2d00      	cmp	r5, #0
 8009218:	4607      	mov	r7, r0
 800921a:	db01      	blt.n	8009220 <_malloc_r+0x1c>
 800921c:	42a9      	cmp	r1, r5
 800921e:	d905      	bls.n	800922c <_malloc_r+0x28>
 8009220:	230c      	movs	r3, #12
 8009222:	603b      	str	r3, [r7, #0]
 8009224:	2600      	movs	r6, #0
 8009226:	4630      	mov	r0, r6
 8009228:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800922c:	4e2e      	ldr	r6, [pc, #184]	; (80092e8 <_malloc_r+0xe4>)
 800922e:	f000 ff79 	bl	800a124 <__malloc_lock>
 8009232:	6833      	ldr	r3, [r6, #0]
 8009234:	461c      	mov	r4, r3
 8009236:	bb34      	cbnz	r4, 8009286 <_malloc_r+0x82>
 8009238:	4629      	mov	r1, r5
 800923a:	4638      	mov	r0, r7
 800923c:	f7ff ffc2 	bl	80091c4 <sbrk_aligned>
 8009240:	1c43      	adds	r3, r0, #1
 8009242:	4604      	mov	r4, r0
 8009244:	d14d      	bne.n	80092e2 <_malloc_r+0xde>
 8009246:	6834      	ldr	r4, [r6, #0]
 8009248:	4626      	mov	r6, r4
 800924a:	2e00      	cmp	r6, #0
 800924c:	d140      	bne.n	80092d0 <_malloc_r+0xcc>
 800924e:	6823      	ldr	r3, [r4, #0]
 8009250:	4631      	mov	r1, r6
 8009252:	4638      	mov	r0, r7
 8009254:	eb04 0803 	add.w	r8, r4, r3
 8009258:	f000 fcda 	bl	8009c10 <_sbrk_r>
 800925c:	4580      	cmp	r8, r0
 800925e:	d13a      	bne.n	80092d6 <_malloc_r+0xd2>
 8009260:	6821      	ldr	r1, [r4, #0]
 8009262:	3503      	adds	r5, #3
 8009264:	1a6d      	subs	r5, r5, r1
 8009266:	f025 0503 	bic.w	r5, r5, #3
 800926a:	3508      	adds	r5, #8
 800926c:	2d0c      	cmp	r5, #12
 800926e:	bf38      	it	cc
 8009270:	250c      	movcc	r5, #12
 8009272:	4629      	mov	r1, r5
 8009274:	4638      	mov	r0, r7
 8009276:	f7ff ffa5 	bl	80091c4 <sbrk_aligned>
 800927a:	3001      	adds	r0, #1
 800927c:	d02b      	beq.n	80092d6 <_malloc_r+0xd2>
 800927e:	6823      	ldr	r3, [r4, #0]
 8009280:	442b      	add	r3, r5
 8009282:	6023      	str	r3, [r4, #0]
 8009284:	e00e      	b.n	80092a4 <_malloc_r+0xa0>
 8009286:	6822      	ldr	r2, [r4, #0]
 8009288:	1b52      	subs	r2, r2, r5
 800928a:	d41e      	bmi.n	80092ca <_malloc_r+0xc6>
 800928c:	2a0b      	cmp	r2, #11
 800928e:	d916      	bls.n	80092be <_malloc_r+0xba>
 8009290:	1961      	adds	r1, r4, r5
 8009292:	42a3      	cmp	r3, r4
 8009294:	6025      	str	r5, [r4, #0]
 8009296:	bf18      	it	ne
 8009298:	6059      	strne	r1, [r3, #4]
 800929a:	6863      	ldr	r3, [r4, #4]
 800929c:	bf08      	it	eq
 800929e:	6031      	streq	r1, [r6, #0]
 80092a0:	5162      	str	r2, [r4, r5]
 80092a2:	604b      	str	r3, [r1, #4]
 80092a4:	4638      	mov	r0, r7
 80092a6:	f104 060b 	add.w	r6, r4, #11
 80092aa:	f000 ff41 	bl	800a130 <__malloc_unlock>
 80092ae:	f026 0607 	bic.w	r6, r6, #7
 80092b2:	1d23      	adds	r3, r4, #4
 80092b4:	1af2      	subs	r2, r6, r3
 80092b6:	d0b6      	beq.n	8009226 <_malloc_r+0x22>
 80092b8:	1b9b      	subs	r3, r3, r6
 80092ba:	50a3      	str	r3, [r4, r2]
 80092bc:	e7b3      	b.n	8009226 <_malloc_r+0x22>
 80092be:	6862      	ldr	r2, [r4, #4]
 80092c0:	42a3      	cmp	r3, r4
 80092c2:	bf0c      	ite	eq
 80092c4:	6032      	streq	r2, [r6, #0]
 80092c6:	605a      	strne	r2, [r3, #4]
 80092c8:	e7ec      	b.n	80092a4 <_malloc_r+0xa0>
 80092ca:	4623      	mov	r3, r4
 80092cc:	6864      	ldr	r4, [r4, #4]
 80092ce:	e7b2      	b.n	8009236 <_malloc_r+0x32>
 80092d0:	4634      	mov	r4, r6
 80092d2:	6876      	ldr	r6, [r6, #4]
 80092d4:	e7b9      	b.n	800924a <_malloc_r+0x46>
 80092d6:	230c      	movs	r3, #12
 80092d8:	603b      	str	r3, [r7, #0]
 80092da:	4638      	mov	r0, r7
 80092dc:	f000 ff28 	bl	800a130 <__malloc_unlock>
 80092e0:	e7a1      	b.n	8009226 <_malloc_r+0x22>
 80092e2:	6025      	str	r5, [r4, #0]
 80092e4:	e7de      	b.n	80092a4 <_malloc_r+0xa0>
 80092e6:	bf00      	nop
 80092e8:	200021a0 	.word	0x200021a0

080092ec <__ssputs_r>:
 80092ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80092f0:	688e      	ldr	r6, [r1, #8]
 80092f2:	429e      	cmp	r6, r3
 80092f4:	4682      	mov	sl, r0
 80092f6:	460c      	mov	r4, r1
 80092f8:	4690      	mov	r8, r2
 80092fa:	461f      	mov	r7, r3
 80092fc:	d838      	bhi.n	8009370 <__ssputs_r+0x84>
 80092fe:	898a      	ldrh	r2, [r1, #12]
 8009300:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009304:	d032      	beq.n	800936c <__ssputs_r+0x80>
 8009306:	6825      	ldr	r5, [r4, #0]
 8009308:	6909      	ldr	r1, [r1, #16]
 800930a:	eba5 0901 	sub.w	r9, r5, r1
 800930e:	6965      	ldr	r5, [r4, #20]
 8009310:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009314:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009318:	3301      	adds	r3, #1
 800931a:	444b      	add	r3, r9
 800931c:	106d      	asrs	r5, r5, #1
 800931e:	429d      	cmp	r5, r3
 8009320:	bf38      	it	cc
 8009322:	461d      	movcc	r5, r3
 8009324:	0553      	lsls	r3, r2, #21
 8009326:	d531      	bpl.n	800938c <__ssputs_r+0xa0>
 8009328:	4629      	mov	r1, r5
 800932a:	f7ff ff6b 	bl	8009204 <_malloc_r>
 800932e:	4606      	mov	r6, r0
 8009330:	b950      	cbnz	r0, 8009348 <__ssputs_r+0x5c>
 8009332:	230c      	movs	r3, #12
 8009334:	f8ca 3000 	str.w	r3, [sl]
 8009338:	89a3      	ldrh	r3, [r4, #12]
 800933a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800933e:	81a3      	strh	r3, [r4, #12]
 8009340:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009344:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009348:	6921      	ldr	r1, [r4, #16]
 800934a:	464a      	mov	r2, r9
 800934c:	f7ff fdde 	bl	8008f0c <memcpy>
 8009350:	89a3      	ldrh	r3, [r4, #12]
 8009352:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009356:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800935a:	81a3      	strh	r3, [r4, #12]
 800935c:	6126      	str	r6, [r4, #16]
 800935e:	6165      	str	r5, [r4, #20]
 8009360:	444e      	add	r6, r9
 8009362:	eba5 0509 	sub.w	r5, r5, r9
 8009366:	6026      	str	r6, [r4, #0]
 8009368:	60a5      	str	r5, [r4, #8]
 800936a:	463e      	mov	r6, r7
 800936c:	42be      	cmp	r6, r7
 800936e:	d900      	bls.n	8009372 <__ssputs_r+0x86>
 8009370:	463e      	mov	r6, r7
 8009372:	6820      	ldr	r0, [r4, #0]
 8009374:	4632      	mov	r2, r6
 8009376:	4641      	mov	r1, r8
 8009378:	f000 feba 	bl	800a0f0 <memmove>
 800937c:	68a3      	ldr	r3, [r4, #8]
 800937e:	1b9b      	subs	r3, r3, r6
 8009380:	60a3      	str	r3, [r4, #8]
 8009382:	6823      	ldr	r3, [r4, #0]
 8009384:	4433      	add	r3, r6
 8009386:	6023      	str	r3, [r4, #0]
 8009388:	2000      	movs	r0, #0
 800938a:	e7db      	b.n	8009344 <__ssputs_r+0x58>
 800938c:	462a      	mov	r2, r5
 800938e:	f000 ff21 	bl	800a1d4 <_realloc_r>
 8009392:	4606      	mov	r6, r0
 8009394:	2800      	cmp	r0, #0
 8009396:	d1e1      	bne.n	800935c <__ssputs_r+0x70>
 8009398:	6921      	ldr	r1, [r4, #16]
 800939a:	4650      	mov	r0, sl
 800939c:	f000 fece 	bl	800a13c <_free_r>
 80093a0:	e7c7      	b.n	8009332 <__ssputs_r+0x46>
	...

080093a4 <_svfiprintf_r>:
 80093a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80093a8:	4698      	mov	r8, r3
 80093aa:	898b      	ldrh	r3, [r1, #12]
 80093ac:	061b      	lsls	r3, r3, #24
 80093ae:	b09d      	sub	sp, #116	; 0x74
 80093b0:	4607      	mov	r7, r0
 80093b2:	460d      	mov	r5, r1
 80093b4:	4614      	mov	r4, r2
 80093b6:	d50e      	bpl.n	80093d6 <_svfiprintf_r+0x32>
 80093b8:	690b      	ldr	r3, [r1, #16]
 80093ba:	b963      	cbnz	r3, 80093d6 <_svfiprintf_r+0x32>
 80093bc:	2140      	movs	r1, #64	; 0x40
 80093be:	f7ff ff21 	bl	8009204 <_malloc_r>
 80093c2:	6028      	str	r0, [r5, #0]
 80093c4:	6128      	str	r0, [r5, #16]
 80093c6:	b920      	cbnz	r0, 80093d2 <_svfiprintf_r+0x2e>
 80093c8:	230c      	movs	r3, #12
 80093ca:	603b      	str	r3, [r7, #0]
 80093cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80093d0:	e0d1      	b.n	8009576 <_svfiprintf_r+0x1d2>
 80093d2:	2340      	movs	r3, #64	; 0x40
 80093d4:	616b      	str	r3, [r5, #20]
 80093d6:	2300      	movs	r3, #0
 80093d8:	9309      	str	r3, [sp, #36]	; 0x24
 80093da:	2320      	movs	r3, #32
 80093dc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80093e0:	f8cd 800c 	str.w	r8, [sp, #12]
 80093e4:	2330      	movs	r3, #48	; 0x30
 80093e6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8009590 <_svfiprintf_r+0x1ec>
 80093ea:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80093ee:	f04f 0901 	mov.w	r9, #1
 80093f2:	4623      	mov	r3, r4
 80093f4:	469a      	mov	sl, r3
 80093f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80093fa:	b10a      	cbz	r2, 8009400 <_svfiprintf_r+0x5c>
 80093fc:	2a25      	cmp	r2, #37	; 0x25
 80093fe:	d1f9      	bne.n	80093f4 <_svfiprintf_r+0x50>
 8009400:	ebba 0b04 	subs.w	fp, sl, r4
 8009404:	d00b      	beq.n	800941e <_svfiprintf_r+0x7a>
 8009406:	465b      	mov	r3, fp
 8009408:	4622      	mov	r2, r4
 800940a:	4629      	mov	r1, r5
 800940c:	4638      	mov	r0, r7
 800940e:	f7ff ff6d 	bl	80092ec <__ssputs_r>
 8009412:	3001      	adds	r0, #1
 8009414:	f000 80aa 	beq.w	800956c <_svfiprintf_r+0x1c8>
 8009418:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800941a:	445a      	add	r2, fp
 800941c:	9209      	str	r2, [sp, #36]	; 0x24
 800941e:	f89a 3000 	ldrb.w	r3, [sl]
 8009422:	2b00      	cmp	r3, #0
 8009424:	f000 80a2 	beq.w	800956c <_svfiprintf_r+0x1c8>
 8009428:	2300      	movs	r3, #0
 800942a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800942e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009432:	f10a 0a01 	add.w	sl, sl, #1
 8009436:	9304      	str	r3, [sp, #16]
 8009438:	9307      	str	r3, [sp, #28]
 800943a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800943e:	931a      	str	r3, [sp, #104]	; 0x68
 8009440:	4654      	mov	r4, sl
 8009442:	2205      	movs	r2, #5
 8009444:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009448:	4851      	ldr	r0, [pc, #324]	; (8009590 <_svfiprintf_r+0x1ec>)
 800944a:	f7f6 fec9 	bl	80001e0 <memchr>
 800944e:	9a04      	ldr	r2, [sp, #16]
 8009450:	b9d8      	cbnz	r0, 800948a <_svfiprintf_r+0xe6>
 8009452:	06d0      	lsls	r0, r2, #27
 8009454:	bf44      	itt	mi
 8009456:	2320      	movmi	r3, #32
 8009458:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800945c:	0711      	lsls	r1, r2, #28
 800945e:	bf44      	itt	mi
 8009460:	232b      	movmi	r3, #43	; 0x2b
 8009462:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009466:	f89a 3000 	ldrb.w	r3, [sl]
 800946a:	2b2a      	cmp	r3, #42	; 0x2a
 800946c:	d015      	beq.n	800949a <_svfiprintf_r+0xf6>
 800946e:	9a07      	ldr	r2, [sp, #28]
 8009470:	4654      	mov	r4, sl
 8009472:	2000      	movs	r0, #0
 8009474:	f04f 0c0a 	mov.w	ip, #10
 8009478:	4621      	mov	r1, r4
 800947a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800947e:	3b30      	subs	r3, #48	; 0x30
 8009480:	2b09      	cmp	r3, #9
 8009482:	d94e      	bls.n	8009522 <_svfiprintf_r+0x17e>
 8009484:	b1b0      	cbz	r0, 80094b4 <_svfiprintf_r+0x110>
 8009486:	9207      	str	r2, [sp, #28]
 8009488:	e014      	b.n	80094b4 <_svfiprintf_r+0x110>
 800948a:	eba0 0308 	sub.w	r3, r0, r8
 800948e:	fa09 f303 	lsl.w	r3, r9, r3
 8009492:	4313      	orrs	r3, r2
 8009494:	9304      	str	r3, [sp, #16]
 8009496:	46a2      	mov	sl, r4
 8009498:	e7d2      	b.n	8009440 <_svfiprintf_r+0x9c>
 800949a:	9b03      	ldr	r3, [sp, #12]
 800949c:	1d19      	adds	r1, r3, #4
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	9103      	str	r1, [sp, #12]
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	bfbb      	ittet	lt
 80094a6:	425b      	neglt	r3, r3
 80094a8:	f042 0202 	orrlt.w	r2, r2, #2
 80094ac:	9307      	strge	r3, [sp, #28]
 80094ae:	9307      	strlt	r3, [sp, #28]
 80094b0:	bfb8      	it	lt
 80094b2:	9204      	strlt	r2, [sp, #16]
 80094b4:	7823      	ldrb	r3, [r4, #0]
 80094b6:	2b2e      	cmp	r3, #46	; 0x2e
 80094b8:	d10c      	bne.n	80094d4 <_svfiprintf_r+0x130>
 80094ba:	7863      	ldrb	r3, [r4, #1]
 80094bc:	2b2a      	cmp	r3, #42	; 0x2a
 80094be:	d135      	bne.n	800952c <_svfiprintf_r+0x188>
 80094c0:	9b03      	ldr	r3, [sp, #12]
 80094c2:	1d1a      	adds	r2, r3, #4
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	9203      	str	r2, [sp, #12]
 80094c8:	2b00      	cmp	r3, #0
 80094ca:	bfb8      	it	lt
 80094cc:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80094d0:	3402      	adds	r4, #2
 80094d2:	9305      	str	r3, [sp, #20]
 80094d4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80095a0 <_svfiprintf_r+0x1fc>
 80094d8:	7821      	ldrb	r1, [r4, #0]
 80094da:	2203      	movs	r2, #3
 80094dc:	4650      	mov	r0, sl
 80094de:	f7f6 fe7f 	bl	80001e0 <memchr>
 80094e2:	b140      	cbz	r0, 80094f6 <_svfiprintf_r+0x152>
 80094e4:	2340      	movs	r3, #64	; 0x40
 80094e6:	eba0 000a 	sub.w	r0, r0, sl
 80094ea:	fa03 f000 	lsl.w	r0, r3, r0
 80094ee:	9b04      	ldr	r3, [sp, #16]
 80094f0:	4303      	orrs	r3, r0
 80094f2:	3401      	adds	r4, #1
 80094f4:	9304      	str	r3, [sp, #16]
 80094f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80094fa:	4826      	ldr	r0, [pc, #152]	; (8009594 <_svfiprintf_r+0x1f0>)
 80094fc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009500:	2206      	movs	r2, #6
 8009502:	f7f6 fe6d 	bl	80001e0 <memchr>
 8009506:	2800      	cmp	r0, #0
 8009508:	d038      	beq.n	800957c <_svfiprintf_r+0x1d8>
 800950a:	4b23      	ldr	r3, [pc, #140]	; (8009598 <_svfiprintf_r+0x1f4>)
 800950c:	bb1b      	cbnz	r3, 8009556 <_svfiprintf_r+0x1b2>
 800950e:	9b03      	ldr	r3, [sp, #12]
 8009510:	3307      	adds	r3, #7
 8009512:	f023 0307 	bic.w	r3, r3, #7
 8009516:	3308      	adds	r3, #8
 8009518:	9303      	str	r3, [sp, #12]
 800951a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800951c:	4433      	add	r3, r6
 800951e:	9309      	str	r3, [sp, #36]	; 0x24
 8009520:	e767      	b.n	80093f2 <_svfiprintf_r+0x4e>
 8009522:	fb0c 3202 	mla	r2, ip, r2, r3
 8009526:	460c      	mov	r4, r1
 8009528:	2001      	movs	r0, #1
 800952a:	e7a5      	b.n	8009478 <_svfiprintf_r+0xd4>
 800952c:	2300      	movs	r3, #0
 800952e:	3401      	adds	r4, #1
 8009530:	9305      	str	r3, [sp, #20]
 8009532:	4619      	mov	r1, r3
 8009534:	f04f 0c0a 	mov.w	ip, #10
 8009538:	4620      	mov	r0, r4
 800953a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800953e:	3a30      	subs	r2, #48	; 0x30
 8009540:	2a09      	cmp	r2, #9
 8009542:	d903      	bls.n	800954c <_svfiprintf_r+0x1a8>
 8009544:	2b00      	cmp	r3, #0
 8009546:	d0c5      	beq.n	80094d4 <_svfiprintf_r+0x130>
 8009548:	9105      	str	r1, [sp, #20]
 800954a:	e7c3      	b.n	80094d4 <_svfiprintf_r+0x130>
 800954c:	fb0c 2101 	mla	r1, ip, r1, r2
 8009550:	4604      	mov	r4, r0
 8009552:	2301      	movs	r3, #1
 8009554:	e7f0      	b.n	8009538 <_svfiprintf_r+0x194>
 8009556:	ab03      	add	r3, sp, #12
 8009558:	9300      	str	r3, [sp, #0]
 800955a:	462a      	mov	r2, r5
 800955c:	4b0f      	ldr	r3, [pc, #60]	; (800959c <_svfiprintf_r+0x1f8>)
 800955e:	a904      	add	r1, sp, #16
 8009560:	4638      	mov	r0, r7
 8009562:	f3af 8000 	nop.w
 8009566:	1c42      	adds	r2, r0, #1
 8009568:	4606      	mov	r6, r0
 800956a:	d1d6      	bne.n	800951a <_svfiprintf_r+0x176>
 800956c:	89ab      	ldrh	r3, [r5, #12]
 800956e:	065b      	lsls	r3, r3, #25
 8009570:	f53f af2c 	bmi.w	80093cc <_svfiprintf_r+0x28>
 8009574:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009576:	b01d      	add	sp, #116	; 0x74
 8009578:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800957c:	ab03      	add	r3, sp, #12
 800957e:	9300      	str	r3, [sp, #0]
 8009580:	462a      	mov	r2, r5
 8009582:	4b06      	ldr	r3, [pc, #24]	; (800959c <_svfiprintf_r+0x1f8>)
 8009584:	a904      	add	r1, sp, #16
 8009586:	4638      	mov	r0, r7
 8009588:	f000 f9d4 	bl	8009934 <_printf_i>
 800958c:	e7eb      	b.n	8009566 <_svfiprintf_r+0x1c2>
 800958e:	bf00      	nop
 8009590:	0800a4ec 	.word	0x0800a4ec
 8009594:	0800a4f6 	.word	0x0800a4f6
 8009598:	00000000 	.word	0x00000000
 800959c:	080092ed 	.word	0x080092ed
 80095a0:	0800a4f2 	.word	0x0800a4f2

080095a4 <__sfputc_r>:
 80095a4:	6893      	ldr	r3, [r2, #8]
 80095a6:	3b01      	subs	r3, #1
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	b410      	push	{r4}
 80095ac:	6093      	str	r3, [r2, #8]
 80095ae:	da08      	bge.n	80095c2 <__sfputc_r+0x1e>
 80095b0:	6994      	ldr	r4, [r2, #24]
 80095b2:	42a3      	cmp	r3, r4
 80095b4:	db01      	blt.n	80095ba <__sfputc_r+0x16>
 80095b6:	290a      	cmp	r1, #10
 80095b8:	d103      	bne.n	80095c2 <__sfputc_r+0x1e>
 80095ba:	f85d 4b04 	ldr.w	r4, [sp], #4
 80095be:	f000 bb7b 	b.w	8009cb8 <__swbuf_r>
 80095c2:	6813      	ldr	r3, [r2, #0]
 80095c4:	1c58      	adds	r0, r3, #1
 80095c6:	6010      	str	r0, [r2, #0]
 80095c8:	7019      	strb	r1, [r3, #0]
 80095ca:	4608      	mov	r0, r1
 80095cc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80095d0:	4770      	bx	lr

080095d2 <__sfputs_r>:
 80095d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80095d4:	4606      	mov	r6, r0
 80095d6:	460f      	mov	r7, r1
 80095d8:	4614      	mov	r4, r2
 80095da:	18d5      	adds	r5, r2, r3
 80095dc:	42ac      	cmp	r4, r5
 80095de:	d101      	bne.n	80095e4 <__sfputs_r+0x12>
 80095e0:	2000      	movs	r0, #0
 80095e2:	e007      	b.n	80095f4 <__sfputs_r+0x22>
 80095e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80095e8:	463a      	mov	r2, r7
 80095ea:	4630      	mov	r0, r6
 80095ec:	f7ff ffda 	bl	80095a4 <__sfputc_r>
 80095f0:	1c43      	adds	r3, r0, #1
 80095f2:	d1f3      	bne.n	80095dc <__sfputs_r+0xa>
 80095f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080095f8 <_vfiprintf_r>:
 80095f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80095fc:	460d      	mov	r5, r1
 80095fe:	b09d      	sub	sp, #116	; 0x74
 8009600:	4614      	mov	r4, r2
 8009602:	4698      	mov	r8, r3
 8009604:	4606      	mov	r6, r0
 8009606:	b118      	cbz	r0, 8009610 <_vfiprintf_r+0x18>
 8009608:	6983      	ldr	r3, [r0, #24]
 800960a:	b90b      	cbnz	r3, 8009610 <_vfiprintf_r+0x18>
 800960c:	f7ff fd3a 	bl	8009084 <__sinit>
 8009610:	4b89      	ldr	r3, [pc, #548]	; (8009838 <_vfiprintf_r+0x240>)
 8009612:	429d      	cmp	r5, r3
 8009614:	d11b      	bne.n	800964e <_vfiprintf_r+0x56>
 8009616:	6875      	ldr	r5, [r6, #4]
 8009618:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800961a:	07d9      	lsls	r1, r3, #31
 800961c:	d405      	bmi.n	800962a <_vfiprintf_r+0x32>
 800961e:	89ab      	ldrh	r3, [r5, #12]
 8009620:	059a      	lsls	r2, r3, #22
 8009622:	d402      	bmi.n	800962a <_vfiprintf_r+0x32>
 8009624:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009626:	f7ff fdcb 	bl	80091c0 <__retarget_lock_acquire_recursive>
 800962a:	89ab      	ldrh	r3, [r5, #12]
 800962c:	071b      	lsls	r3, r3, #28
 800962e:	d501      	bpl.n	8009634 <_vfiprintf_r+0x3c>
 8009630:	692b      	ldr	r3, [r5, #16]
 8009632:	b9eb      	cbnz	r3, 8009670 <_vfiprintf_r+0x78>
 8009634:	4629      	mov	r1, r5
 8009636:	4630      	mov	r0, r6
 8009638:	f000 fba2 	bl	8009d80 <__swsetup_r>
 800963c:	b1c0      	cbz	r0, 8009670 <_vfiprintf_r+0x78>
 800963e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009640:	07dc      	lsls	r4, r3, #31
 8009642:	d50e      	bpl.n	8009662 <_vfiprintf_r+0x6a>
 8009644:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009648:	b01d      	add	sp, #116	; 0x74
 800964a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800964e:	4b7b      	ldr	r3, [pc, #492]	; (800983c <_vfiprintf_r+0x244>)
 8009650:	429d      	cmp	r5, r3
 8009652:	d101      	bne.n	8009658 <_vfiprintf_r+0x60>
 8009654:	68b5      	ldr	r5, [r6, #8]
 8009656:	e7df      	b.n	8009618 <_vfiprintf_r+0x20>
 8009658:	4b79      	ldr	r3, [pc, #484]	; (8009840 <_vfiprintf_r+0x248>)
 800965a:	429d      	cmp	r5, r3
 800965c:	bf08      	it	eq
 800965e:	68f5      	ldreq	r5, [r6, #12]
 8009660:	e7da      	b.n	8009618 <_vfiprintf_r+0x20>
 8009662:	89ab      	ldrh	r3, [r5, #12]
 8009664:	0598      	lsls	r0, r3, #22
 8009666:	d4ed      	bmi.n	8009644 <_vfiprintf_r+0x4c>
 8009668:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800966a:	f7ff fdaa 	bl	80091c2 <__retarget_lock_release_recursive>
 800966e:	e7e9      	b.n	8009644 <_vfiprintf_r+0x4c>
 8009670:	2300      	movs	r3, #0
 8009672:	9309      	str	r3, [sp, #36]	; 0x24
 8009674:	2320      	movs	r3, #32
 8009676:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800967a:	f8cd 800c 	str.w	r8, [sp, #12]
 800967e:	2330      	movs	r3, #48	; 0x30
 8009680:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009844 <_vfiprintf_r+0x24c>
 8009684:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009688:	f04f 0901 	mov.w	r9, #1
 800968c:	4623      	mov	r3, r4
 800968e:	469a      	mov	sl, r3
 8009690:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009694:	b10a      	cbz	r2, 800969a <_vfiprintf_r+0xa2>
 8009696:	2a25      	cmp	r2, #37	; 0x25
 8009698:	d1f9      	bne.n	800968e <_vfiprintf_r+0x96>
 800969a:	ebba 0b04 	subs.w	fp, sl, r4
 800969e:	d00b      	beq.n	80096b8 <_vfiprintf_r+0xc0>
 80096a0:	465b      	mov	r3, fp
 80096a2:	4622      	mov	r2, r4
 80096a4:	4629      	mov	r1, r5
 80096a6:	4630      	mov	r0, r6
 80096a8:	f7ff ff93 	bl	80095d2 <__sfputs_r>
 80096ac:	3001      	adds	r0, #1
 80096ae:	f000 80aa 	beq.w	8009806 <_vfiprintf_r+0x20e>
 80096b2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80096b4:	445a      	add	r2, fp
 80096b6:	9209      	str	r2, [sp, #36]	; 0x24
 80096b8:	f89a 3000 	ldrb.w	r3, [sl]
 80096bc:	2b00      	cmp	r3, #0
 80096be:	f000 80a2 	beq.w	8009806 <_vfiprintf_r+0x20e>
 80096c2:	2300      	movs	r3, #0
 80096c4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80096c8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80096cc:	f10a 0a01 	add.w	sl, sl, #1
 80096d0:	9304      	str	r3, [sp, #16]
 80096d2:	9307      	str	r3, [sp, #28]
 80096d4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80096d8:	931a      	str	r3, [sp, #104]	; 0x68
 80096da:	4654      	mov	r4, sl
 80096dc:	2205      	movs	r2, #5
 80096de:	f814 1b01 	ldrb.w	r1, [r4], #1
 80096e2:	4858      	ldr	r0, [pc, #352]	; (8009844 <_vfiprintf_r+0x24c>)
 80096e4:	f7f6 fd7c 	bl	80001e0 <memchr>
 80096e8:	9a04      	ldr	r2, [sp, #16]
 80096ea:	b9d8      	cbnz	r0, 8009724 <_vfiprintf_r+0x12c>
 80096ec:	06d1      	lsls	r1, r2, #27
 80096ee:	bf44      	itt	mi
 80096f0:	2320      	movmi	r3, #32
 80096f2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80096f6:	0713      	lsls	r3, r2, #28
 80096f8:	bf44      	itt	mi
 80096fa:	232b      	movmi	r3, #43	; 0x2b
 80096fc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009700:	f89a 3000 	ldrb.w	r3, [sl]
 8009704:	2b2a      	cmp	r3, #42	; 0x2a
 8009706:	d015      	beq.n	8009734 <_vfiprintf_r+0x13c>
 8009708:	9a07      	ldr	r2, [sp, #28]
 800970a:	4654      	mov	r4, sl
 800970c:	2000      	movs	r0, #0
 800970e:	f04f 0c0a 	mov.w	ip, #10
 8009712:	4621      	mov	r1, r4
 8009714:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009718:	3b30      	subs	r3, #48	; 0x30
 800971a:	2b09      	cmp	r3, #9
 800971c:	d94e      	bls.n	80097bc <_vfiprintf_r+0x1c4>
 800971e:	b1b0      	cbz	r0, 800974e <_vfiprintf_r+0x156>
 8009720:	9207      	str	r2, [sp, #28]
 8009722:	e014      	b.n	800974e <_vfiprintf_r+0x156>
 8009724:	eba0 0308 	sub.w	r3, r0, r8
 8009728:	fa09 f303 	lsl.w	r3, r9, r3
 800972c:	4313      	orrs	r3, r2
 800972e:	9304      	str	r3, [sp, #16]
 8009730:	46a2      	mov	sl, r4
 8009732:	e7d2      	b.n	80096da <_vfiprintf_r+0xe2>
 8009734:	9b03      	ldr	r3, [sp, #12]
 8009736:	1d19      	adds	r1, r3, #4
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	9103      	str	r1, [sp, #12]
 800973c:	2b00      	cmp	r3, #0
 800973e:	bfbb      	ittet	lt
 8009740:	425b      	neglt	r3, r3
 8009742:	f042 0202 	orrlt.w	r2, r2, #2
 8009746:	9307      	strge	r3, [sp, #28]
 8009748:	9307      	strlt	r3, [sp, #28]
 800974a:	bfb8      	it	lt
 800974c:	9204      	strlt	r2, [sp, #16]
 800974e:	7823      	ldrb	r3, [r4, #0]
 8009750:	2b2e      	cmp	r3, #46	; 0x2e
 8009752:	d10c      	bne.n	800976e <_vfiprintf_r+0x176>
 8009754:	7863      	ldrb	r3, [r4, #1]
 8009756:	2b2a      	cmp	r3, #42	; 0x2a
 8009758:	d135      	bne.n	80097c6 <_vfiprintf_r+0x1ce>
 800975a:	9b03      	ldr	r3, [sp, #12]
 800975c:	1d1a      	adds	r2, r3, #4
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	9203      	str	r2, [sp, #12]
 8009762:	2b00      	cmp	r3, #0
 8009764:	bfb8      	it	lt
 8009766:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800976a:	3402      	adds	r4, #2
 800976c:	9305      	str	r3, [sp, #20]
 800976e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009854 <_vfiprintf_r+0x25c>
 8009772:	7821      	ldrb	r1, [r4, #0]
 8009774:	2203      	movs	r2, #3
 8009776:	4650      	mov	r0, sl
 8009778:	f7f6 fd32 	bl	80001e0 <memchr>
 800977c:	b140      	cbz	r0, 8009790 <_vfiprintf_r+0x198>
 800977e:	2340      	movs	r3, #64	; 0x40
 8009780:	eba0 000a 	sub.w	r0, r0, sl
 8009784:	fa03 f000 	lsl.w	r0, r3, r0
 8009788:	9b04      	ldr	r3, [sp, #16]
 800978a:	4303      	orrs	r3, r0
 800978c:	3401      	adds	r4, #1
 800978e:	9304      	str	r3, [sp, #16]
 8009790:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009794:	482c      	ldr	r0, [pc, #176]	; (8009848 <_vfiprintf_r+0x250>)
 8009796:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800979a:	2206      	movs	r2, #6
 800979c:	f7f6 fd20 	bl	80001e0 <memchr>
 80097a0:	2800      	cmp	r0, #0
 80097a2:	d03f      	beq.n	8009824 <_vfiprintf_r+0x22c>
 80097a4:	4b29      	ldr	r3, [pc, #164]	; (800984c <_vfiprintf_r+0x254>)
 80097a6:	bb1b      	cbnz	r3, 80097f0 <_vfiprintf_r+0x1f8>
 80097a8:	9b03      	ldr	r3, [sp, #12]
 80097aa:	3307      	adds	r3, #7
 80097ac:	f023 0307 	bic.w	r3, r3, #7
 80097b0:	3308      	adds	r3, #8
 80097b2:	9303      	str	r3, [sp, #12]
 80097b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80097b6:	443b      	add	r3, r7
 80097b8:	9309      	str	r3, [sp, #36]	; 0x24
 80097ba:	e767      	b.n	800968c <_vfiprintf_r+0x94>
 80097bc:	fb0c 3202 	mla	r2, ip, r2, r3
 80097c0:	460c      	mov	r4, r1
 80097c2:	2001      	movs	r0, #1
 80097c4:	e7a5      	b.n	8009712 <_vfiprintf_r+0x11a>
 80097c6:	2300      	movs	r3, #0
 80097c8:	3401      	adds	r4, #1
 80097ca:	9305      	str	r3, [sp, #20]
 80097cc:	4619      	mov	r1, r3
 80097ce:	f04f 0c0a 	mov.w	ip, #10
 80097d2:	4620      	mov	r0, r4
 80097d4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80097d8:	3a30      	subs	r2, #48	; 0x30
 80097da:	2a09      	cmp	r2, #9
 80097dc:	d903      	bls.n	80097e6 <_vfiprintf_r+0x1ee>
 80097de:	2b00      	cmp	r3, #0
 80097e0:	d0c5      	beq.n	800976e <_vfiprintf_r+0x176>
 80097e2:	9105      	str	r1, [sp, #20]
 80097e4:	e7c3      	b.n	800976e <_vfiprintf_r+0x176>
 80097e6:	fb0c 2101 	mla	r1, ip, r1, r2
 80097ea:	4604      	mov	r4, r0
 80097ec:	2301      	movs	r3, #1
 80097ee:	e7f0      	b.n	80097d2 <_vfiprintf_r+0x1da>
 80097f0:	ab03      	add	r3, sp, #12
 80097f2:	9300      	str	r3, [sp, #0]
 80097f4:	462a      	mov	r2, r5
 80097f6:	4b16      	ldr	r3, [pc, #88]	; (8009850 <_vfiprintf_r+0x258>)
 80097f8:	a904      	add	r1, sp, #16
 80097fa:	4630      	mov	r0, r6
 80097fc:	f3af 8000 	nop.w
 8009800:	4607      	mov	r7, r0
 8009802:	1c78      	adds	r0, r7, #1
 8009804:	d1d6      	bne.n	80097b4 <_vfiprintf_r+0x1bc>
 8009806:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009808:	07d9      	lsls	r1, r3, #31
 800980a:	d405      	bmi.n	8009818 <_vfiprintf_r+0x220>
 800980c:	89ab      	ldrh	r3, [r5, #12]
 800980e:	059a      	lsls	r2, r3, #22
 8009810:	d402      	bmi.n	8009818 <_vfiprintf_r+0x220>
 8009812:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009814:	f7ff fcd5 	bl	80091c2 <__retarget_lock_release_recursive>
 8009818:	89ab      	ldrh	r3, [r5, #12]
 800981a:	065b      	lsls	r3, r3, #25
 800981c:	f53f af12 	bmi.w	8009644 <_vfiprintf_r+0x4c>
 8009820:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009822:	e711      	b.n	8009648 <_vfiprintf_r+0x50>
 8009824:	ab03      	add	r3, sp, #12
 8009826:	9300      	str	r3, [sp, #0]
 8009828:	462a      	mov	r2, r5
 800982a:	4b09      	ldr	r3, [pc, #36]	; (8009850 <_vfiprintf_r+0x258>)
 800982c:	a904      	add	r1, sp, #16
 800982e:	4630      	mov	r0, r6
 8009830:	f000 f880 	bl	8009934 <_printf_i>
 8009834:	e7e4      	b.n	8009800 <_vfiprintf_r+0x208>
 8009836:	bf00      	nop
 8009838:	0800a4ac 	.word	0x0800a4ac
 800983c:	0800a4cc 	.word	0x0800a4cc
 8009840:	0800a48c 	.word	0x0800a48c
 8009844:	0800a4ec 	.word	0x0800a4ec
 8009848:	0800a4f6 	.word	0x0800a4f6
 800984c:	00000000 	.word	0x00000000
 8009850:	080095d3 	.word	0x080095d3
 8009854:	0800a4f2 	.word	0x0800a4f2

08009858 <_printf_common>:
 8009858:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800985c:	4616      	mov	r6, r2
 800985e:	4699      	mov	r9, r3
 8009860:	688a      	ldr	r2, [r1, #8]
 8009862:	690b      	ldr	r3, [r1, #16]
 8009864:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009868:	4293      	cmp	r3, r2
 800986a:	bfb8      	it	lt
 800986c:	4613      	movlt	r3, r2
 800986e:	6033      	str	r3, [r6, #0]
 8009870:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009874:	4607      	mov	r7, r0
 8009876:	460c      	mov	r4, r1
 8009878:	b10a      	cbz	r2, 800987e <_printf_common+0x26>
 800987a:	3301      	adds	r3, #1
 800987c:	6033      	str	r3, [r6, #0]
 800987e:	6823      	ldr	r3, [r4, #0]
 8009880:	0699      	lsls	r1, r3, #26
 8009882:	bf42      	ittt	mi
 8009884:	6833      	ldrmi	r3, [r6, #0]
 8009886:	3302      	addmi	r3, #2
 8009888:	6033      	strmi	r3, [r6, #0]
 800988a:	6825      	ldr	r5, [r4, #0]
 800988c:	f015 0506 	ands.w	r5, r5, #6
 8009890:	d106      	bne.n	80098a0 <_printf_common+0x48>
 8009892:	f104 0a19 	add.w	sl, r4, #25
 8009896:	68e3      	ldr	r3, [r4, #12]
 8009898:	6832      	ldr	r2, [r6, #0]
 800989a:	1a9b      	subs	r3, r3, r2
 800989c:	42ab      	cmp	r3, r5
 800989e:	dc26      	bgt.n	80098ee <_printf_common+0x96>
 80098a0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80098a4:	1e13      	subs	r3, r2, #0
 80098a6:	6822      	ldr	r2, [r4, #0]
 80098a8:	bf18      	it	ne
 80098aa:	2301      	movne	r3, #1
 80098ac:	0692      	lsls	r2, r2, #26
 80098ae:	d42b      	bmi.n	8009908 <_printf_common+0xb0>
 80098b0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80098b4:	4649      	mov	r1, r9
 80098b6:	4638      	mov	r0, r7
 80098b8:	47c0      	blx	r8
 80098ba:	3001      	adds	r0, #1
 80098bc:	d01e      	beq.n	80098fc <_printf_common+0xa4>
 80098be:	6823      	ldr	r3, [r4, #0]
 80098c0:	68e5      	ldr	r5, [r4, #12]
 80098c2:	6832      	ldr	r2, [r6, #0]
 80098c4:	f003 0306 	and.w	r3, r3, #6
 80098c8:	2b04      	cmp	r3, #4
 80098ca:	bf08      	it	eq
 80098cc:	1aad      	subeq	r5, r5, r2
 80098ce:	68a3      	ldr	r3, [r4, #8]
 80098d0:	6922      	ldr	r2, [r4, #16]
 80098d2:	bf0c      	ite	eq
 80098d4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80098d8:	2500      	movne	r5, #0
 80098da:	4293      	cmp	r3, r2
 80098dc:	bfc4      	itt	gt
 80098de:	1a9b      	subgt	r3, r3, r2
 80098e0:	18ed      	addgt	r5, r5, r3
 80098e2:	2600      	movs	r6, #0
 80098e4:	341a      	adds	r4, #26
 80098e6:	42b5      	cmp	r5, r6
 80098e8:	d11a      	bne.n	8009920 <_printf_common+0xc8>
 80098ea:	2000      	movs	r0, #0
 80098ec:	e008      	b.n	8009900 <_printf_common+0xa8>
 80098ee:	2301      	movs	r3, #1
 80098f0:	4652      	mov	r2, sl
 80098f2:	4649      	mov	r1, r9
 80098f4:	4638      	mov	r0, r7
 80098f6:	47c0      	blx	r8
 80098f8:	3001      	adds	r0, #1
 80098fa:	d103      	bne.n	8009904 <_printf_common+0xac>
 80098fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009900:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009904:	3501      	adds	r5, #1
 8009906:	e7c6      	b.n	8009896 <_printf_common+0x3e>
 8009908:	18e1      	adds	r1, r4, r3
 800990a:	1c5a      	adds	r2, r3, #1
 800990c:	2030      	movs	r0, #48	; 0x30
 800990e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009912:	4422      	add	r2, r4
 8009914:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009918:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800991c:	3302      	adds	r3, #2
 800991e:	e7c7      	b.n	80098b0 <_printf_common+0x58>
 8009920:	2301      	movs	r3, #1
 8009922:	4622      	mov	r2, r4
 8009924:	4649      	mov	r1, r9
 8009926:	4638      	mov	r0, r7
 8009928:	47c0      	blx	r8
 800992a:	3001      	adds	r0, #1
 800992c:	d0e6      	beq.n	80098fc <_printf_common+0xa4>
 800992e:	3601      	adds	r6, #1
 8009930:	e7d9      	b.n	80098e6 <_printf_common+0x8e>
	...

08009934 <_printf_i>:
 8009934:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009938:	7e0f      	ldrb	r7, [r1, #24]
 800993a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800993c:	2f78      	cmp	r7, #120	; 0x78
 800993e:	4691      	mov	r9, r2
 8009940:	4680      	mov	r8, r0
 8009942:	460c      	mov	r4, r1
 8009944:	469a      	mov	sl, r3
 8009946:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800994a:	d807      	bhi.n	800995c <_printf_i+0x28>
 800994c:	2f62      	cmp	r7, #98	; 0x62
 800994e:	d80a      	bhi.n	8009966 <_printf_i+0x32>
 8009950:	2f00      	cmp	r7, #0
 8009952:	f000 80d8 	beq.w	8009b06 <_printf_i+0x1d2>
 8009956:	2f58      	cmp	r7, #88	; 0x58
 8009958:	f000 80a3 	beq.w	8009aa2 <_printf_i+0x16e>
 800995c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009960:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009964:	e03a      	b.n	80099dc <_printf_i+0xa8>
 8009966:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800996a:	2b15      	cmp	r3, #21
 800996c:	d8f6      	bhi.n	800995c <_printf_i+0x28>
 800996e:	a101      	add	r1, pc, #4	; (adr r1, 8009974 <_printf_i+0x40>)
 8009970:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009974:	080099cd 	.word	0x080099cd
 8009978:	080099e1 	.word	0x080099e1
 800997c:	0800995d 	.word	0x0800995d
 8009980:	0800995d 	.word	0x0800995d
 8009984:	0800995d 	.word	0x0800995d
 8009988:	0800995d 	.word	0x0800995d
 800998c:	080099e1 	.word	0x080099e1
 8009990:	0800995d 	.word	0x0800995d
 8009994:	0800995d 	.word	0x0800995d
 8009998:	0800995d 	.word	0x0800995d
 800999c:	0800995d 	.word	0x0800995d
 80099a0:	08009aed 	.word	0x08009aed
 80099a4:	08009a11 	.word	0x08009a11
 80099a8:	08009acf 	.word	0x08009acf
 80099ac:	0800995d 	.word	0x0800995d
 80099b0:	0800995d 	.word	0x0800995d
 80099b4:	08009b0f 	.word	0x08009b0f
 80099b8:	0800995d 	.word	0x0800995d
 80099bc:	08009a11 	.word	0x08009a11
 80099c0:	0800995d 	.word	0x0800995d
 80099c4:	0800995d 	.word	0x0800995d
 80099c8:	08009ad7 	.word	0x08009ad7
 80099cc:	682b      	ldr	r3, [r5, #0]
 80099ce:	1d1a      	adds	r2, r3, #4
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	602a      	str	r2, [r5, #0]
 80099d4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80099d8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80099dc:	2301      	movs	r3, #1
 80099de:	e0a3      	b.n	8009b28 <_printf_i+0x1f4>
 80099e0:	6820      	ldr	r0, [r4, #0]
 80099e2:	6829      	ldr	r1, [r5, #0]
 80099e4:	0606      	lsls	r6, r0, #24
 80099e6:	f101 0304 	add.w	r3, r1, #4
 80099ea:	d50a      	bpl.n	8009a02 <_printf_i+0xce>
 80099ec:	680e      	ldr	r6, [r1, #0]
 80099ee:	602b      	str	r3, [r5, #0]
 80099f0:	2e00      	cmp	r6, #0
 80099f2:	da03      	bge.n	80099fc <_printf_i+0xc8>
 80099f4:	232d      	movs	r3, #45	; 0x2d
 80099f6:	4276      	negs	r6, r6
 80099f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80099fc:	485e      	ldr	r0, [pc, #376]	; (8009b78 <_printf_i+0x244>)
 80099fe:	230a      	movs	r3, #10
 8009a00:	e019      	b.n	8009a36 <_printf_i+0x102>
 8009a02:	680e      	ldr	r6, [r1, #0]
 8009a04:	602b      	str	r3, [r5, #0]
 8009a06:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009a0a:	bf18      	it	ne
 8009a0c:	b236      	sxthne	r6, r6
 8009a0e:	e7ef      	b.n	80099f0 <_printf_i+0xbc>
 8009a10:	682b      	ldr	r3, [r5, #0]
 8009a12:	6820      	ldr	r0, [r4, #0]
 8009a14:	1d19      	adds	r1, r3, #4
 8009a16:	6029      	str	r1, [r5, #0]
 8009a18:	0601      	lsls	r1, r0, #24
 8009a1a:	d501      	bpl.n	8009a20 <_printf_i+0xec>
 8009a1c:	681e      	ldr	r6, [r3, #0]
 8009a1e:	e002      	b.n	8009a26 <_printf_i+0xf2>
 8009a20:	0646      	lsls	r6, r0, #25
 8009a22:	d5fb      	bpl.n	8009a1c <_printf_i+0xe8>
 8009a24:	881e      	ldrh	r6, [r3, #0]
 8009a26:	4854      	ldr	r0, [pc, #336]	; (8009b78 <_printf_i+0x244>)
 8009a28:	2f6f      	cmp	r7, #111	; 0x6f
 8009a2a:	bf0c      	ite	eq
 8009a2c:	2308      	moveq	r3, #8
 8009a2e:	230a      	movne	r3, #10
 8009a30:	2100      	movs	r1, #0
 8009a32:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009a36:	6865      	ldr	r5, [r4, #4]
 8009a38:	60a5      	str	r5, [r4, #8]
 8009a3a:	2d00      	cmp	r5, #0
 8009a3c:	bfa2      	ittt	ge
 8009a3e:	6821      	ldrge	r1, [r4, #0]
 8009a40:	f021 0104 	bicge.w	r1, r1, #4
 8009a44:	6021      	strge	r1, [r4, #0]
 8009a46:	b90e      	cbnz	r6, 8009a4c <_printf_i+0x118>
 8009a48:	2d00      	cmp	r5, #0
 8009a4a:	d04d      	beq.n	8009ae8 <_printf_i+0x1b4>
 8009a4c:	4615      	mov	r5, r2
 8009a4e:	fbb6 f1f3 	udiv	r1, r6, r3
 8009a52:	fb03 6711 	mls	r7, r3, r1, r6
 8009a56:	5dc7      	ldrb	r7, [r0, r7]
 8009a58:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009a5c:	4637      	mov	r7, r6
 8009a5e:	42bb      	cmp	r3, r7
 8009a60:	460e      	mov	r6, r1
 8009a62:	d9f4      	bls.n	8009a4e <_printf_i+0x11a>
 8009a64:	2b08      	cmp	r3, #8
 8009a66:	d10b      	bne.n	8009a80 <_printf_i+0x14c>
 8009a68:	6823      	ldr	r3, [r4, #0]
 8009a6a:	07de      	lsls	r6, r3, #31
 8009a6c:	d508      	bpl.n	8009a80 <_printf_i+0x14c>
 8009a6e:	6923      	ldr	r3, [r4, #16]
 8009a70:	6861      	ldr	r1, [r4, #4]
 8009a72:	4299      	cmp	r1, r3
 8009a74:	bfde      	ittt	le
 8009a76:	2330      	movle	r3, #48	; 0x30
 8009a78:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009a7c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8009a80:	1b52      	subs	r2, r2, r5
 8009a82:	6122      	str	r2, [r4, #16]
 8009a84:	f8cd a000 	str.w	sl, [sp]
 8009a88:	464b      	mov	r3, r9
 8009a8a:	aa03      	add	r2, sp, #12
 8009a8c:	4621      	mov	r1, r4
 8009a8e:	4640      	mov	r0, r8
 8009a90:	f7ff fee2 	bl	8009858 <_printf_common>
 8009a94:	3001      	adds	r0, #1
 8009a96:	d14c      	bne.n	8009b32 <_printf_i+0x1fe>
 8009a98:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009a9c:	b004      	add	sp, #16
 8009a9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009aa2:	4835      	ldr	r0, [pc, #212]	; (8009b78 <_printf_i+0x244>)
 8009aa4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8009aa8:	6829      	ldr	r1, [r5, #0]
 8009aaa:	6823      	ldr	r3, [r4, #0]
 8009aac:	f851 6b04 	ldr.w	r6, [r1], #4
 8009ab0:	6029      	str	r1, [r5, #0]
 8009ab2:	061d      	lsls	r5, r3, #24
 8009ab4:	d514      	bpl.n	8009ae0 <_printf_i+0x1ac>
 8009ab6:	07df      	lsls	r7, r3, #31
 8009ab8:	bf44      	itt	mi
 8009aba:	f043 0320 	orrmi.w	r3, r3, #32
 8009abe:	6023      	strmi	r3, [r4, #0]
 8009ac0:	b91e      	cbnz	r6, 8009aca <_printf_i+0x196>
 8009ac2:	6823      	ldr	r3, [r4, #0]
 8009ac4:	f023 0320 	bic.w	r3, r3, #32
 8009ac8:	6023      	str	r3, [r4, #0]
 8009aca:	2310      	movs	r3, #16
 8009acc:	e7b0      	b.n	8009a30 <_printf_i+0xfc>
 8009ace:	6823      	ldr	r3, [r4, #0]
 8009ad0:	f043 0320 	orr.w	r3, r3, #32
 8009ad4:	6023      	str	r3, [r4, #0]
 8009ad6:	2378      	movs	r3, #120	; 0x78
 8009ad8:	4828      	ldr	r0, [pc, #160]	; (8009b7c <_printf_i+0x248>)
 8009ada:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009ade:	e7e3      	b.n	8009aa8 <_printf_i+0x174>
 8009ae0:	0659      	lsls	r1, r3, #25
 8009ae2:	bf48      	it	mi
 8009ae4:	b2b6      	uxthmi	r6, r6
 8009ae6:	e7e6      	b.n	8009ab6 <_printf_i+0x182>
 8009ae8:	4615      	mov	r5, r2
 8009aea:	e7bb      	b.n	8009a64 <_printf_i+0x130>
 8009aec:	682b      	ldr	r3, [r5, #0]
 8009aee:	6826      	ldr	r6, [r4, #0]
 8009af0:	6961      	ldr	r1, [r4, #20]
 8009af2:	1d18      	adds	r0, r3, #4
 8009af4:	6028      	str	r0, [r5, #0]
 8009af6:	0635      	lsls	r5, r6, #24
 8009af8:	681b      	ldr	r3, [r3, #0]
 8009afa:	d501      	bpl.n	8009b00 <_printf_i+0x1cc>
 8009afc:	6019      	str	r1, [r3, #0]
 8009afe:	e002      	b.n	8009b06 <_printf_i+0x1d2>
 8009b00:	0670      	lsls	r0, r6, #25
 8009b02:	d5fb      	bpl.n	8009afc <_printf_i+0x1c8>
 8009b04:	8019      	strh	r1, [r3, #0]
 8009b06:	2300      	movs	r3, #0
 8009b08:	6123      	str	r3, [r4, #16]
 8009b0a:	4615      	mov	r5, r2
 8009b0c:	e7ba      	b.n	8009a84 <_printf_i+0x150>
 8009b0e:	682b      	ldr	r3, [r5, #0]
 8009b10:	1d1a      	adds	r2, r3, #4
 8009b12:	602a      	str	r2, [r5, #0]
 8009b14:	681d      	ldr	r5, [r3, #0]
 8009b16:	6862      	ldr	r2, [r4, #4]
 8009b18:	2100      	movs	r1, #0
 8009b1a:	4628      	mov	r0, r5
 8009b1c:	f7f6 fb60 	bl	80001e0 <memchr>
 8009b20:	b108      	cbz	r0, 8009b26 <_printf_i+0x1f2>
 8009b22:	1b40      	subs	r0, r0, r5
 8009b24:	6060      	str	r0, [r4, #4]
 8009b26:	6863      	ldr	r3, [r4, #4]
 8009b28:	6123      	str	r3, [r4, #16]
 8009b2a:	2300      	movs	r3, #0
 8009b2c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009b30:	e7a8      	b.n	8009a84 <_printf_i+0x150>
 8009b32:	6923      	ldr	r3, [r4, #16]
 8009b34:	462a      	mov	r2, r5
 8009b36:	4649      	mov	r1, r9
 8009b38:	4640      	mov	r0, r8
 8009b3a:	47d0      	blx	sl
 8009b3c:	3001      	adds	r0, #1
 8009b3e:	d0ab      	beq.n	8009a98 <_printf_i+0x164>
 8009b40:	6823      	ldr	r3, [r4, #0]
 8009b42:	079b      	lsls	r3, r3, #30
 8009b44:	d413      	bmi.n	8009b6e <_printf_i+0x23a>
 8009b46:	68e0      	ldr	r0, [r4, #12]
 8009b48:	9b03      	ldr	r3, [sp, #12]
 8009b4a:	4298      	cmp	r0, r3
 8009b4c:	bfb8      	it	lt
 8009b4e:	4618      	movlt	r0, r3
 8009b50:	e7a4      	b.n	8009a9c <_printf_i+0x168>
 8009b52:	2301      	movs	r3, #1
 8009b54:	4632      	mov	r2, r6
 8009b56:	4649      	mov	r1, r9
 8009b58:	4640      	mov	r0, r8
 8009b5a:	47d0      	blx	sl
 8009b5c:	3001      	adds	r0, #1
 8009b5e:	d09b      	beq.n	8009a98 <_printf_i+0x164>
 8009b60:	3501      	adds	r5, #1
 8009b62:	68e3      	ldr	r3, [r4, #12]
 8009b64:	9903      	ldr	r1, [sp, #12]
 8009b66:	1a5b      	subs	r3, r3, r1
 8009b68:	42ab      	cmp	r3, r5
 8009b6a:	dcf2      	bgt.n	8009b52 <_printf_i+0x21e>
 8009b6c:	e7eb      	b.n	8009b46 <_printf_i+0x212>
 8009b6e:	2500      	movs	r5, #0
 8009b70:	f104 0619 	add.w	r6, r4, #25
 8009b74:	e7f5      	b.n	8009b62 <_printf_i+0x22e>
 8009b76:	bf00      	nop
 8009b78:	0800a4fd 	.word	0x0800a4fd
 8009b7c:	0800a50e 	.word	0x0800a50e

08009b80 <_putc_r>:
 8009b80:	b570      	push	{r4, r5, r6, lr}
 8009b82:	460d      	mov	r5, r1
 8009b84:	4614      	mov	r4, r2
 8009b86:	4606      	mov	r6, r0
 8009b88:	b118      	cbz	r0, 8009b92 <_putc_r+0x12>
 8009b8a:	6983      	ldr	r3, [r0, #24]
 8009b8c:	b90b      	cbnz	r3, 8009b92 <_putc_r+0x12>
 8009b8e:	f7ff fa79 	bl	8009084 <__sinit>
 8009b92:	4b1c      	ldr	r3, [pc, #112]	; (8009c04 <_putc_r+0x84>)
 8009b94:	429c      	cmp	r4, r3
 8009b96:	d124      	bne.n	8009be2 <_putc_r+0x62>
 8009b98:	6874      	ldr	r4, [r6, #4]
 8009b9a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009b9c:	07d8      	lsls	r0, r3, #31
 8009b9e:	d405      	bmi.n	8009bac <_putc_r+0x2c>
 8009ba0:	89a3      	ldrh	r3, [r4, #12]
 8009ba2:	0599      	lsls	r1, r3, #22
 8009ba4:	d402      	bmi.n	8009bac <_putc_r+0x2c>
 8009ba6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009ba8:	f7ff fb0a 	bl	80091c0 <__retarget_lock_acquire_recursive>
 8009bac:	68a3      	ldr	r3, [r4, #8]
 8009bae:	3b01      	subs	r3, #1
 8009bb0:	2b00      	cmp	r3, #0
 8009bb2:	60a3      	str	r3, [r4, #8]
 8009bb4:	da05      	bge.n	8009bc2 <_putc_r+0x42>
 8009bb6:	69a2      	ldr	r2, [r4, #24]
 8009bb8:	4293      	cmp	r3, r2
 8009bba:	db1c      	blt.n	8009bf6 <_putc_r+0x76>
 8009bbc:	b2eb      	uxtb	r3, r5
 8009bbe:	2b0a      	cmp	r3, #10
 8009bc0:	d019      	beq.n	8009bf6 <_putc_r+0x76>
 8009bc2:	6823      	ldr	r3, [r4, #0]
 8009bc4:	1c5a      	adds	r2, r3, #1
 8009bc6:	6022      	str	r2, [r4, #0]
 8009bc8:	701d      	strb	r5, [r3, #0]
 8009bca:	b2ed      	uxtb	r5, r5
 8009bcc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009bce:	07da      	lsls	r2, r3, #31
 8009bd0:	d405      	bmi.n	8009bde <_putc_r+0x5e>
 8009bd2:	89a3      	ldrh	r3, [r4, #12]
 8009bd4:	059b      	lsls	r3, r3, #22
 8009bd6:	d402      	bmi.n	8009bde <_putc_r+0x5e>
 8009bd8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009bda:	f7ff faf2 	bl	80091c2 <__retarget_lock_release_recursive>
 8009bde:	4628      	mov	r0, r5
 8009be0:	bd70      	pop	{r4, r5, r6, pc}
 8009be2:	4b09      	ldr	r3, [pc, #36]	; (8009c08 <_putc_r+0x88>)
 8009be4:	429c      	cmp	r4, r3
 8009be6:	d101      	bne.n	8009bec <_putc_r+0x6c>
 8009be8:	68b4      	ldr	r4, [r6, #8]
 8009bea:	e7d6      	b.n	8009b9a <_putc_r+0x1a>
 8009bec:	4b07      	ldr	r3, [pc, #28]	; (8009c0c <_putc_r+0x8c>)
 8009bee:	429c      	cmp	r4, r3
 8009bf0:	bf08      	it	eq
 8009bf2:	68f4      	ldreq	r4, [r6, #12]
 8009bf4:	e7d1      	b.n	8009b9a <_putc_r+0x1a>
 8009bf6:	4629      	mov	r1, r5
 8009bf8:	4622      	mov	r2, r4
 8009bfa:	4630      	mov	r0, r6
 8009bfc:	f000 f85c 	bl	8009cb8 <__swbuf_r>
 8009c00:	4605      	mov	r5, r0
 8009c02:	e7e3      	b.n	8009bcc <_putc_r+0x4c>
 8009c04:	0800a4ac 	.word	0x0800a4ac
 8009c08:	0800a4cc 	.word	0x0800a4cc
 8009c0c:	0800a48c 	.word	0x0800a48c

08009c10 <_sbrk_r>:
 8009c10:	b538      	push	{r3, r4, r5, lr}
 8009c12:	4d06      	ldr	r5, [pc, #24]	; (8009c2c <_sbrk_r+0x1c>)
 8009c14:	2300      	movs	r3, #0
 8009c16:	4604      	mov	r4, r0
 8009c18:	4608      	mov	r0, r1
 8009c1a:	602b      	str	r3, [r5, #0]
 8009c1c:	f7fe fb84 	bl	8008328 <_sbrk>
 8009c20:	1c43      	adds	r3, r0, #1
 8009c22:	d102      	bne.n	8009c2a <_sbrk_r+0x1a>
 8009c24:	682b      	ldr	r3, [r5, #0]
 8009c26:	b103      	cbz	r3, 8009c2a <_sbrk_r+0x1a>
 8009c28:	6023      	str	r3, [r4, #0]
 8009c2a:	bd38      	pop	{r3, r4, r5, pc}
 8009c2c:	200021a8 	.word	0x200021a8

08009c30 <__sread>:
 8009c30:	b510      	push	{r4, lr}
 8009c32:	460c      	mov	r4, r1
 8009c34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009c38:	f000 fafc 	bl	800a234 <_read_r>
 8009c3c:	2800      	cmp	r0, #0
 8009c3e:	bfab      	itete	ge
 8009c40:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009c42:	89a3      	ldrhlt	r3, [r4, #12]
 8009c44:	181b      	addge	r3, r3, r0
 8009c46:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009c4a:	bfac      	ite	ge
 8009c4c:	6563      	strge	r3, [r4, #84]	; 0x54
 8009c4e:	81a3      	strhlt	r3, [r4, #12]
 8009c50:	bd10      	pop	{r4, pc}

08009c52 <__swrite>:
 8009c52:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009c56:	461f      	mov	r7, r3
 8009c58:	898b      	ldrh	r3, [r1, #12]
 8009c5a:	05db      	lsls	r3, r3, #23
 8009c5c:	4605      	mov	r5, r0
 8009c5e:	460c      	mov	r4, r1
 8009c60:	4616      	mov	r6, r2
 8009c62:	d505      	bpl.n	8009c70 <__swrite+0x1e>
 8009c64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009c68:	2302      	movs	r3, #2
 8009c6a:	2200      	movs	r2, #0
 8009c6c:	f000 f9c8 	bl	800a000 <_lseek_r>
 8009c70:	89a3      	ldrh	r3, [r4, #12]
 8009c72:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009c76:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009c7a:	81a3      	strh	r3, [r4, #12]
 8009c7c:	4632      	mov	r2, r6
 8009c7e:	463b      	mov	r3, r7
 8009c80:	4628      	mov	r0, r5
 8009c82:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009c86:	f000 b869 	b.w	8009d5c <_write_r>

08009c8a <__sseek>:
 8009c8a:	b510      	push	{r4, lr}
 8009c8c:	460c      	mov	r4, r1
 8009c8e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009c92:	f000 f9b5 	bl	800a000 <_lseek_r>
 8009c96:	1c43      	adds	r3, r0, #1
 8009c98:	89a3      	ldrh	r3, [r4, #12]
 8009c9a:	bf15      	itete	ne
 8009c9c:	6560      	strne	r0, [r4, #84]	; 0x54
 8009c9e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009ca2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009ca6:	81a3      	strheq	r3, [r4, #12]
 8009ca8:	bf18      	it	ne
 8009caa:	81a3      	strhne	r3, [r4, #12]
 8009cac:	bd10      	pop	{r4, pc}

08009cae <__sclose>:
 8009cae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009cb2:	f000 b8d3 	b.w	8009e5c <_close_r>
	...

08009cb8 <__swbuf_r>:
 8009cb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009cba:	460e      	mov	r6, r1
 8009cbc:	4614      	mov	r4, r2
 8009cbe:	4605      	mov	r5, r0
 8009cc0:	b118      	cbz	r0, 8009cca <__swbuf_r+0x12>
 8009cc2:	6983      	ldr	r3, [r0, #24]
 8009cc4:	b90b      	cbnz	r3, 8009cca <__swbuf_r+0x12>
 8009cc6:	f7ff f9dd 	bl	8009084 <__sinit>
 8009cca:	4b21      	ldr	r3, [pc, #132]	; (8009d50 <__swbuf_r+0x98>)
 8009ccc:	429c      	cmp	r4, r3
 8009cce:	d12b      	bne.n	8009d28 <__swbuf_r+0x70>
 8009cd0:	686c      	ldr	r4, [r5, #4]
 8009cd2:	69a3      	ldr	r3, [r4, #24]
 8009cd4:	60a3      	str	r3, [r4, #8]
 8009cd6:	89a3      	ldrh	r3, [r4, #12]
 8009cd8:	071a      	lsls	r2, r3, #28
 8009cda:	d52f      	bpl.n	8009d3c <__swbuf_r+0x84>
 8009cdc:	6923      	ldr	r3, [r4, #16]
 8009cde:	b36b      	cbz	r3, 8009d3c <__swbuf_r+0x84>
 8009ce0:	6923      	ldr	r3, [r4, #16]
 8009ce2:	6820      	ldr	r0, [r4, #0]
 8009ce4:	1ac0      	subs	r0, r0, r3
 8009ce6:	6963      	ldr	r3, [r4, #20]
 8009ce8:	b2f6      	uxtb	r6, r6
 8009cea:	4283      	cmp	r3, r0
 8009cec:	4637      	mov	r7, r6
 8009cee:	dc04      	bgt.n	8009cfa <__swbuf_r+0x42>
 8009cf0:	4621      	mov	r1, r4
 8009cf2:	4628      	mov	r0, r5
 8009cf4:	f000 f948 	bl	8009f88 <_fflush_r>
 8009cf8:	bb30      	cbnz	r0, 8009d48 <__swbuf_r+0x90>
 8009cfa:	68a3      	ldr	r3, [r4, #8]
 8009cfc:	3b01      	subs	r3, #1
 8009cfe:	60a3      	str	r3, [r4, #8]
 8009d00:	6823      	ldr	r3, [r4, #0]
 8009d02:	1c5a      	adds	r2, r3, #1
 8009d04:	6022      	str	r2, [r4, #0]
 8009d06:	701e      	strb	r6, [r3, #0]
 8009d08:	6963      	ldr	r3, [r4, #20]
 8009d0a:	3001      	adds	r0, #1
 8009d0c:	4283      	cmp	r3, r0
 8009d0e:	d004      	beq.n	8009d1a <__swbuf_r+0x62>
 8009d10:	89a3      	ldrh	r3, [r4, #12]
 8009d12:	07db      	lsls	r3, r3, #31
 8009d14:	d506      	bpl.n	8009d24 <__swbuf_r+0x6c>
 8009d16:	2e0a      	cmp	r6, #10
 8009d18:	d104      	bne.n	8009d24 <__swbuf_r+0x6c>
 8009d1a:	4621      	mov	r1, r4
 8009d1c:	4628      	mov	r0, r5
 8009d1e:	f000 f933 	bl	8009f88 <_fflush_r>
 8009d22:	b988      	cbnz	r0, 8009d48 <__swbuf_r+0x90>
 8009d24:	4638      	mov	r0, r7
 8009d26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009d28:	4b0a      	ldr	r3, [pc, #40]	; (8009d54 <__swbuf_r+0x9c>)
 8009d2a:	429c      	cmp	r4, r3
 8009d2c:	d101      	bne.n	8009d32 <__swbuf_r+0x7a>
 8009d2e:	68ac      	ldr	r4, [r5, #8]
 8009d30:	e7cf      	b.n	8009cd2 <__swbuf_r+0x1a>
 8009d32:	4b09      	ldr	r3, [pc, #36]	; (8009d58 <__swbuf_r+0xa0>)
 8009d34:	429c      	cmp	r4, r3
 8009d36:	bf08      	it	eq
 8009d38:	68ec      	ldreq	r4, [r5, #12]
 8009d3a:	e7ca      	b.n	8009cd2 <__swbuf_r+0x1a>
 8009d3c:	4621      	mov	r1, r4
 8009d3e:	4628      	mov	r0, r5
 8009d40:	f000 f81e 	bl	8009d80 <__swsetup_r>
 8009d44:	2800      	cmp	r0, #0
 8009d46:	d0cb      	beq.n	8009ce0 <__swbuf_r+0x28>
 8009d48:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8009d4c:	e7ea      	b.n	8009d24 <__swbuf_r+0x6c>
 8009d4e:	bf00      	nop
 8009d50:	0800a4ac 	.word	0x0800a4ac
 8009d54:	0800a4cc 	.word	0x0800a4cc
 8009d58:	0800a48c 	.word	0x0800a48c

08009d5c <_write_r>:
 8009d5c:	b538      	push	{r3, r4, r5, lr}
 8009d5e:	4d07      	ldr	r5, [pc, #28]	; (8009d7c <_write_r+0x20>)
 8009d60:	4604      	mov	r4, r0
 8009d62:	4608      	mov	r0, r1
 8009d64:	4611      	mov	r1, r2
 8009d66:	2200      	movs	r2, #0
 8009d68:	602a      	str	r2, [r5, #0]
 8009d6a:	461a      	mov	r2, r3
 8009d6c:	f7fe fa8b 	bl	8008286 <_write>
 8009d70:	1c43      	adds	r3, r0, #1
 8009d72:	d102      	bne.n	8009d7a <_write_r+0x1e>
 8009d74:	682b      	ldr	r3, [r5, #0]
 8009d76:	b103      	cbz	r3, 8009d7a <_write_r+0x1e>
 8009d78:	6023      	str	r3, [r4, #0]
 8009d7a:	bd38      	pop	{r3, r4, r5, pc}
 8009d7c:	200021a8 	.word	0x200021a8

08009d80 <__swsetup_r>:
 8009d80:	4b32      	ldr	r3, [pc, #200]	; (8009e4c <__swsetup_r+0xcc>)
 8009d82:	b570      	push	{r4, r5, r6, lr}
 8009d84:	681d      	ldr	r5, [r3, #0]
 8009d86:	4606      	mov	r6, r0
 8009d88:	460c      	mov	r4, r1
 8009d8a:	b125      	cbz	r5, 8009d96 <__swsetup_r+0x16>
 8009d8c:	69ab      	ldr	r3, [r5, #24]
 8009d8e:	b913      	cbnz	r3, 8009d96 <__swsetup_r+0x16>
 8009d90:	4628      	mov	r0, r5
 8009d92:	f7ff f977 	bl	8009084 <__sinit>
 8009d96:	4b2e      	ldr	r3, [pc, #184]	; (8009e50 <__swsetup_r+0xd0>)
 8009d98:	429c      	cmp	r4, r3
 8009d9a:	d10f      	bne.n	8009dbc <__swsetup_r+0x3c>
 8009d9c:	686c      	ldr	r4, [r5, #4]
 8009d9e:	89a3      	ldrh	r3, [r4, #12]
 8009da0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009da4:	0719      	lsls	r1, r3, #28
 8009da6:	d42c      	bmi.n	8009e02 <__swsetup_r+0x82>
 8009da8:	06dd      	lsls	r5, r3, #27
 8009daa:	d411      	bmi.n	8009dd0 <__swsetup_r+0x50>
 8009dac:	2309      	movs	r3, #9
 8009dae:	6033      	str	r3, [r6, #0]
 8009db0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009db4:	81a3      	strh	r3, [r4, #12]
 8009db6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009dba:	e03e      	b.n	8009e3a <__swsetup_r+0xba>
 8009dbc:	4b25      	ldr	r3, [pc, #148]	; (8009e54 <__swsetup_r+0xd4>)
 8009dbe:	429c      	cmp	r4, r3
 8009dc0:	d101      	bne.n	8009dc6 <__swsetup_r+0x46>
 8009dc2:	68ac      	ldr	r4, [r5, #8]
 8009dc4:	e7eb      	b.n	8009d9e <__swsetup_r+0x1e>
 8009dc6:	4b24      	ldr	r3, [pc, #144]	; (8009e58 <__swsetup_r+0xd8>)
 8009dc8:	429c      	cmp	r4, r3
 8009dca:	bf08      	it	eq
 8009dcc:	68ec      	ldreq	r4, [r5, #12]
 8009dce:	e7e6      	b.n	8009d9e <__swsetup_r+0x1e>
 8009dd0:	0758      	lsls	r0, r3, #29
 8009dd2:	d512      	bpl.n	8009dfa <__swsetup_r+0x7a>
 8009dd4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009dd6:	b141      	cbz	r1, 8009dea <__swsetup_r+0x6a>
 8009dd8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009ddc:	4299      	cmp	r1, r3
 8009dde:	d002      	beq.n	8009de6 <__swsetup_r+0x66>
 8009de0:	4630      	mov	r0, r6
 8009de2:	f000 f9ab 	bl	800a13c <_free_r>
 8009de6:	2300      	movs	r3, #0
 8009de8:	6363      	str	r3, [r4, #52]	; 0x34
 8009dea:	89a3      	ldrh	r3, [r4, #12]
 8009dec:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009df0:	81a3      	strh	r3, [r4, #12]
 8009df2:	2300      	movs	r3, #0
 8009df4:	6063      	str	r3, [r4, #4]
 8009df6:	6923      	ldr	r3, [r4, #16]
 8009df8:	6023      	str	r3, [r4, #0]
 8009dfa:	89a3      	ldrh	r3, [r4, #12]
 8009dfc:	f043 0308 	orr.w	r3, r3, #8
 8009e00:	81a3      	strh	r3, [r4, #12]
 8009e02:	6923      	ldr	r3, [r4, #16]
 8009e04:	b94b      	cbnz	r3, 8009e1a <__swsetup_r+0x9a>
 8009e06:	89a3      	ldrh	r3, [r4, #12]
 8009e08:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009e0c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009e10:	d003      	beq.n	8009e1a <__swsetup_r+0x9a>
 8009e12:	4621      	mov	r1, r4
 8009e14:	4630      	mov	r0, r6
 8009e16:	f000 f92b 	bl	800a070 <__smakebuf_r>
 8009e1a:	89a0      	ldrh	r0, [r4, #12]
 8009e1c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009e20:	f010 0301 	ands.w	r3, r0, #1
 8009e24:	d00a      	beq.n	8009e3c <__swsetup_r+0xbc>
 8009e26:	2300      	movs	r3, #0
 8009e28:	60a3      	str	r3, [r4, #8]
 8009e2a:	6963      	ldr	r3, [r4, #20]
 8009e2c:	425b      	negs	r3, r3
 8009e2e:	61a3      	str	r3, [r4, #24]
 8009e30:	6923      	ldr	r3, [r4, #16]
 8009e32:	b943      	cbnz	r3, 8009e46 <__swsetup_r+0xc6>
 8009e34:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009e38:	d1ba      	bne.n	8009db0 <__swsetup_r+0x30>
 8009e3a:	bd70      	pop	{r4, r5, r6, pc}
 8009e3c:	0781      	lsls	r1, r0, #30
 8009e3e:	bf58      	it	pl
 8009e40:	6963      	ldrpl	r3, [r4, #20]
 8009e42:	60a3      	str	r3, [r4, #8]
 8009e44:	e7f4      	b.n	8009e30 <__swsetup_r+0xb0>
 8009e46:	2000      	movs	r0, #0
 8009e48:	e7f7      	b.n	8009e3a <__swsetup_r+0xba>
 8009e4a:	bf00      	nop
 8009e4c:	200001c4 	.word	0x200001c4
 8009e50:	0800a4ac 	.word	0x0800a4ac
 8009e54:	0800a4cc 	.word	0x0800a4cc
 8009e58:	0800a48c 	.word	0x0800a48c

08009e5c <_close_r>:
 8009e5c:	b538      	push	{r3, r4, r5, lr}
 8009e5e:	4d06      	ldr	r5, [pc, #24]	; (8009e78 <_close_r+0x1c>)
 8009e60:	2300      	movs	r3, #0
 8009e62:	4604      	mov	r4, r0
 8009e64:	4608      	mov	r0, r1
 8009e66:	602b      	str	r3, [r5, #0]
 8009e68:	f7fe fa29 	bl	80082be <_close>
 8009e6c:	1c43      	adds	r3, r0, #1
 8009e6e:	d102      	bne.n	8009e76 <_close_r+0x1a>
 8009e70:	682b      	ldr	r3, [r5, #0]
 8009e72:	b103      	cbz	r3, 8009e76 <_close_r+0x1a>
 8009e74:	6023      	str	r3, [r4, #0]
 8009e76:	bd38      	pop	{r3, r4, r5, pc}
 8009e78:	200021a8 	.word	0x200021a8

08009e7c <__sflush_r>:
 8009e7c:	898a      	ldrh	r2, [r1, #12]
 8009e7e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009e82:	4605      	mov	r5, r0
 8009e84:	0710      	lsls	r0, r2, #28
 8009e86:	460c      	mov	r4, r1
 8009e88:	d458      	bmi.n	8009f3c <__sflush_r+0xc0>
 8009e8a:	684b      	ldr	r3, [r1, #4]
 8009e8c:	2b00      	cmp	r3, #0
 8009e8e:	dc05      	bgt.n	8009e9c <__sflush_r+0x20>
 8009e90:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	dc02      	bgt.n	8009e9c <__sflush_r+0x20>
 8009e96:	2000      	movs	r0, #0
 8009e98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009e9c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009e9e:	2e00      	cmp	r6, #0
 8009ea0:	d0f9      	beq.n	8009e96 <__sflush_r+0x1a>
 8009ea2:	2300      	movs	r3, #0
 8009ea4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009ea8:	682f      	ldr	r7, [r5, #0]
 8009eaa:	602b      	str	r3, [r5, #0]
 8009eac:	d032      	beq.n	8009f14 <__sflush_r+0x98>
 8009eae:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009eb0:	89a3      	ldrh	r3, [r4, #12]
 8009eb2:	075a      	lsls	r2, r3, #29
 8009eb4:	d505      	bpl.n	8009ec2 <__sflush_r+0x46>
 8009eb6:	6863      	ldr	r3, [r4, #4]
 8009eb8:	1ac0      	subs	r0, r0, r3
 8009eba:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009ebc:	b10b      	cbz	r3, 8009ec2 <__sflush_r+0x46>
 8009ebe:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009ec0:	1ac0      	subs	r0, r0, r3
 8009ec2:	2300      	movs	r3, #0
 8009ec4:	4602      	mov	r2, r0
 8009ec6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009ec8:	6a21      	ldr	r1, [r4, #32]
 8009eca:	4628      	mov	r0, r5
 8009ecc:	47b0      	blx	r6
 8009ece:	1c43      	adds	r3, r0, #1
 8009ed0:	89a3      	ldrh	r3, [r4, #12]
 8009ed2:	d106      	bne.n	8009ee2 <__sflush_r+0x66>
 8009ed4:	6829      	ldr	r1, [r5, #0]
 8009ed6:	291d      	cmp	r1, #29
 8009ed8:	d82c      	bhi.n	8009f34 <__sflush_r+0xb8>
 8009eda:	4a2a      	ldr	r2, [pc, #168]	; (8009f84 <__sflush_r+0x108>)
 8009edc:	40ca      	lsrs	r2, r1
 8009ede:	07d6      	lsls	r6, r2, #31
 8009ee0:	d528      	bpl.n	8009f34 <__sflush_r+0xb8>
 8009ee2:	2200      	movs	r2, #0
 8009ee4:	6062      	str	r2, [r4, #4]
 8009ee6:	04d9      	lsls	r1, r3, #19
 8009ee8:	6922      	ldr	r2, [r4, #16]
 8009eea:	6022      	str	r2, [r4, #0]
 8009eec:	d504      	bpl.n	8009ef8 <__sflush_r+0x7c>
 8009eee:	1c42      	adds	r2, r0, #1
 8009ef0:	d101      	bne.n	8009ef6 <__sflush_r+0x7a>
 8009ef2:	682b      	ldr	r3, [r5, #0]
 8009ef4:	b903      	cbnz	r3, 8009ef8 <__sflush_r+0x7c>
 8009ef6:	6560      	str	r0, [r4, #84]	; 0x54
 8009ef8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009efa:	602f      	str	r7, [r5, #0]
 8009efc:	2900      	cmp	r1, #0
 8009efe:	d0ca      	beq.n	8009e96 <__sflush_r+0x1a>
 8009f00:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009f04:	4299      	cmp	r1, r3
 8009f06:	d002      	beq.n	8009f0e <__sflush_r+0x92>
 8009f08:	4628      	mov	r0, r5
 8009f0a:	f000 f917 	bl	800a13c <_free_r>
 8009f0e:	2000      	movs	r0, #0
 8009f10:	6360      	str	r0, [r4, #52]	; 0x34
 8009f12:	e7c1      	b.n	8009e98 <__sflush_r+0x1c>
 8009f14:	6a21      	ldr	r1, [r4, #32]
 8009f16:	2301      	movs	r3, #1
 8009f18:	4628      	mov	r0, r5
 8009f1a:	47b0      	blx	r6
 8009f1c:	1c41      	adds	r1, r0, #1
 8009f1e:	d1c7      	bne.n	8009eb0 <__sflush_r+0x34>
 8009f20:	682b      	ldr	r3, [r5, #0]
 8009f22:	2b00      	cmp	r3, #0
 8009f24:	d0c4      	beq.n	8009eb0 <__sflush_r+0x34>
 8009f26:	2b1d      	cmp	r3, #29
 8009f28:	d001      	beq.n	8009f2e <__sflush_r+0xb2>
 8009f2a:	2b16      	cmp	r3, #22
 8009f2c:	d101      	bne.n	8009f32 <__sflush_r+0xb6>
 8009f2e:	602f      	str	r7, [r5, #0]
 8009f30:	e7b1      	b.n	8009e96 <__sflush_r+0x1a>
 8009f32:	89a3      	ldrh	r3, [r4, #12]
 8009f34:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009f38:	81a3      	strh	r3, [r4, #12]
 8009f3a:	e7ad      	b.n	8009e98 <__sflush_r+0x1c>
 8009f3c:	690f      	ldr	r7, [r1, #16]
 8009f3e:	2f00      	cmp	r7, #0
 8009f40:	d0a9      	beq.n	8009e96 <__sflush_r+0x1a>
 8009f42:	0793      	lsls	r3, r2, #30
 8009f44:	680e      	ldr	r6, [r1, #0]
 8009f46:	bf08      	it	eq
 8009f48:	694b      	ldreq	r3, [r1, #20]
 8009f4a:	600f      	str	r7, [r1, #0]
 8009f4c:	bf18      	it	ne
 8009f4e:	2300      	movne	r3, #0
 8009f50:	eba6 0807 	sub.w	r8, r6, r7
 8009f54:	608b      	str	r3, [r1, #8]
 8009f56:	f1b8 0f00 	cmp.w	r8, #0
 8009f5a:	dd9c      	ble.n	8009e96 <__sflush_r+0x1a>
 8009f5c:	6a21      	ldr	r1, [r4, #32]
 8009f5e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009f60:	4643      	mov	r3, r8
 8009f62:	463a      	mov	r2, r7
 8009f64:	4628      	mov	r0, r5
 8009f66:	47b0      	blx	r6
 8009f68:	2800      	cmp	r0, #0
 8009f6a:	dc06      	bgt.n	8009f7a <__sflush_r+0xfe>
 8009f6c:	89a3      	ldrh	r3, [r4, #12]
 8009f6e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009f72:	81a3      	strh	r3, [r4, #12]
 8009f74:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009f78:	e78e      	b.n	8009e98 <__sflush_r+0x1c>
 8009f7a:	4407      	add	r7, r0
 8009f7c:	eba8 0800 	sub.w	r8, r8, r0
 8009f80:	e7e9      	b.n	8009f56 <__sflush_r+0xda>
 8009f82:	bf00      	nop
 8009f84:	20400001 	.word	0x20400001

08009f88 <_fflush_r>:
 8009f88:	b538      	push	{r3, r4, r5, lr}
 8009f8a:	690b      	ldr	r3, [r1, #16]
 8009f8c:	4605      	mov	r5, r0
 8009f8e:	460c      	mov	r4, r1
 8009f90:	b913      	cbnz	r3, 8009f98 <_fflush_r+0x10>
 8009f92:	2500      	movs	r5, #0
 8009f94:	4628      	mov	r0, r5
 8009f96:	bd38      	pop	{r3, r4, r5, pc}
 8009f98:	b118      	cbz	r0, 8009fa2 <_fflush_r+0x1a>
 8009f9a:	6983      	ldr	r3, [r0, #24]
 8009f9c:	b90b      	cbnz	r3, 8009fa2 <_fflush_r+0x1a>
 8009f9e:	f7ff f871 	bl	8009084 <__sinit>
 8009fa2:	4b14      	ldr	r3, [pc, #80]	; (8009ff4 <_fflush_r+0x6c>)
 8009fa4:	429c      	cmp	r4, r3
 8009fa6:	d11b      	bne.n	8009fe0 <_fflush_r+0x58>
 8009fa8:	686c      	ldr	r4, [r5, #4]
 8009faa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009fae:	2b00      	cmp	r3, #0
 8009fb0:	d0ef      	beq.n	8009f92 <_fflush_r+0xa>
 8009fb2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009fb4:	07d0      	lsls	r0, r2, #31
 8009fb6:	d404      	bmi.n	8009fc2 <_fflush_r+0x3a>
 8009fb8:	0599      	lsls	r1, r3, #22
 8009fba:	d402      	bmi.n	8009fc2 <_fflush_r+0x3a>
 8009fbc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009fbe:	f7ff f8ff 	bl	80091c0 <__retarget_lock_acquire_recursive>
 8009fc2:	4628      	mov	r0, r5
 8009fc4:	4621      	mov	r1, r4
 8009fc6:	f7ff ff59 	bl	8009e7c <__sflush_r>
 8009fca:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009fcc:	07da      	lsls	r2, r3, #31
 8009fce:	4605      	mov	r5, r0
 8009fd0:	d4e0      	bmi.n	8009f94 <_fflush_r+0xc>
 8009fd2:	89a3      	ldrh	r3, [r4, #12]
 8009fd4:	059b      	lsls	r3, r3, #22
 8009fd6:	d4dd      	bmi.n	8009f94 <_fflush_r+0xc>
 8009fd8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009fda:	f7ff f8f2 	bl	80091c2 <__retarget_lock_release_recursive>
 8009fde:	e7d9      	b.n	8009f94 <_fflush_r+0xc>
 8009fe0:	4b05      	ldr	r3, [pc, #20]	; (8009ff8 <_fflush_r+0x70>)
 8009fe2:	429c      	cmp	r4, r3
 8009fe4:	d101      	bne.n	8009fea <_fflush_r+0x62>
 8009fe6:	68ac      	ldr	r4, [r5, #8]
 8009fe8:	e7df      	b.n	8009faa <_fflush_r+0x22>
 8009fea:	4b04      	ldr	r3, [pc, #16]	; (8009ffc <_fflush_r+0x74>)
 8009fec:	429c      	cmp	r4, r3
 8009fee:	bf08      	it	eq
 8009ff0:	68ec      	ldreq	r4, [r5, #12]
 8009ff2:	e7da      	b.n	8009faa <_fflush_r+0x22>
 8009ff4:	0800a4ac 	.word	0x0800a4ac
 8009ff8:	0800a4cc 	.word	0x0800a4cc
 8009ffc:	0800a48c 	.word	0x0800a48c

0800a000 <_lseek_r>:
 800a000:	b538      	push	{r3, r4, r5, lr}
 800a002:	4d07      	ldr	r5, [pc, #28]	; (800a020 <_lseek_r+0x20>)
 800a004:	4604      	mov	r4, r0
 800a006:	4608      	mov	r0, r1
 800a008:	4611      	mov	r1, r2
 800a00a:	2200      	movs	r2, #0
 800a00c:	602a      	str	r2, [r5, #0]
 800a00e:	461a      	mov	r2, r3
 800a010:	f7fe f97c 	bl	800830c <_lseek>
 800a014:	1c43      	adds	r3, r0, #1
 800a016:	d102      	bne.n	800a01e <_lseek_r+0x1e>
 800a018:	682b      	ldr	r3, [r5, #0]
 800a01a:	b103      	cbz	r3, 800a01e <_lseek_r+0x1e>
 800a01c:	6023      	str	r3, [r4, #0]
 800a01e:	bd38      	pop	{r3, r4, r5, pc}
 800a020:	200021a8 	.word	0x200021a8

0800a024 <__swhatbuf_r>:
 800a024:	b570      	push	{r4, r5, r6, lr}
 800a026:	460e      	mov	r6, r1
 800a028:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a02c:	2900      	cmp	r1, #0
 800a02e:	b096      	sub	sp, #88	; 0x58
 800a030:	4614      	mov	r4, r2
 800a032:	461d      	mov	r5, r3
 800a034:	da08      	bge.n	800a048 <__swhatbuf_r+0x24>
 800a036:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800a03a:	2200      	movs	r2, #0
 800a03c:	602a      	str	r2, [r5, #0]
 800a03e:	061a      	lsls	r2, r3, #24
 800a040:	d410      	bmi.n	800a064 <__swhatbuf_r+0x40>
 800a042:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a046:	e00e      	b.n	800a066 <__swhatbuf_r+0x42>
 800a048:	466a      	mov	r2, sp
 800a04a:	f000 f905 	bl	800a258 <_fstat_r>
 800a04e:	2800      	cmp	r0, #0
 800a050:	dbf1      	blt.n	800a036 <__swhatbuf_r+0x12>
 800a052:	9a01      	ldr	r2, [sp, #4]
 800a054:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a058:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a05c:	425a      	negs	r2, r3
 800a05e:	415a      	adcs	r2, r3
 800a060:	602a      	str	r2, [r5, #0]
 800a062:	e7ee      	b.n	800a042 <__swhatbuf_r+0x1e>
 800a064:	2340      	movs	r3, #64	; 0x40
 800a066:	2000      	movs	r0, #0
 800a068:	6023      	str	r3, [r4, #0]
 800a06a:	b016      	add	sp, #88	; 0x58
 800a06c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800a070 <__smakebuf_r>:
 800a070:	898b      	ldrh	r3, [r1, #12]
 800a072:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a074:	079d      	lsls	r5, r3, #30
 800a076:	4606      	mov	r6, r0
 800a078:	460c      	mov	r4, r1
 800a07a:	d507      	bpl.n	800a08c <__smakebuf_r+0x1c>
 800a07c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a080:	6023      	str	r3, [r4, #0]
 800a082:	6123      	str	r3, [r4, #16]
 800a084:	2301      	movs	r3, #1
 800a086:	6163      	str	r3, [r4, #20]
 800a088:	b002      	add	sp, #8
 800a08a:	bd70      	pop	{r4, r5, r6, pc}
 800a08c:	ab01      	add	r3, sp, #4
 800a08e:	466a      	mov	r2, sp
 800a090:	f7ff ffc8 	bl	800a024 <__swhatbuf_r>
 800a094:	9900      	ldr	r1, [sp, #0]
 800a096:	4605      	mov	r5, r0
 800a098:	4630      	mov	r0, r6
 800a09a:	f7ff f8b3 	bl	8009204 <_malloc_r>
 800a09e:	b948      	cbnz	r0, 800a0b4 <__smakebuf_r+0x44>
 800a0a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a0a4:	059a      	lsls	r2, r3, #22
 800a0a6:	d4ef      	bmi.n	800a088 <__smakebuf_r+0x18>
 800a0a8:	f023 0303 	bic.w	r3, r3, #3
 800a0ac:	f043 0302 	orr.w	r3, r3, #2
 800a0b0:	81a3      	strh	r3, [r4, #12]
 800a0b2:	e7e3      	b.n	800a07c <__smakebuf_r+0xc>
 800a0b4:	4b0d      	ldr	r3, [pc, #52]	; (800a0ec <__smakebuf_r+0x7c>)
 800a0b6:	62b3      	str	r3, [r6, #40]	; 0x28
 800a0b8:	89a3      	ldrh	r3, [r4, #12]
 800a0ba:	6020      	str	r0, [r4, #0]
 800a0bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a0c0:	81a3      	strh	r3, [r4, #12]
 800a0c2:	9b00      	ldr	r3, [sp, #0]
 800a0c4:	6163      	str	r3, [r4, #20]
 800a0c6:	9b01      	ldr	r3, [sp, #4]
 800a0c8:	6120      	str	r0, [r4, #16]
 800a0ca:	b15b      	cbz	r3, 800a0e4 <__smakebuf_r+0x74>
 800a0cc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a0d0:	4630      	mov	r0, r6
 800a0d2:	f000 f8d3 	bl	800a27c <_isatty_r>
 800a0d6:	b128      	cbz	r0, 800a0e4 <__smakebuf_r+0x74>
 800a0d8:	89a3      	ldrh	r3, [r4, #12]
 800a0da:	f023 0303 	bic.w	r3, r3, #3
 800a0de:	f043 0301 	orr.w	r3, r3, #1
 800a0e2:	81a3      	strh	r3, [r4, #12]
 800a0e4:	89a0      	ldrh	r0, [r4, #12]
 800a0e6:	4305      	orrs	r5, r0
 800a0e8:	81a5      	strh	r5, [r4, #12]
 800a0ea:	e7cd      	b.n	800a088 <__smakebuf_r+0x18>
 800a0ec:	0800901d 	.word	0x0800901d

0800a0f0 <memmove>:
 800a0f0:	4288      	cmp	r0, r1
 800a0f2:	b510      	push	{r4, lr}
 800a0f4:	eb01 0402 	add.w	r4, r1, r2
 800a0f8:	d902      	bls.n	800a100 <memmove+0x10>
 800a0fa:	4284      	cmp	r4, r0
 800a0fc:	4623      	mov	r3, r4
 800a0fe:	d807      	bhi.n	800a110 <memmove+0x20>
 800a100:	1e43      	subs	r3, r0, #1
 800a102:	42a1      	cmp	r1, r4
 800a104:	d008      	beq.n	800a118 <memmove+0x28>
 800a106:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a10a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a10e:	e7f8      	b.n	800a102 <memmove+0x12>
 800a110:	4402      	add	r2, r0
 800a112:	4601      	mov	r1, r0
 800a114:	428a      	cmp	r2, r1
 800a116:	d100      	bne.n	800a11a <memmove+0x2a>
 800a118:	bd10      	pop	{r4, pc}
 800a11a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a11e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a122:	e7f7      	b.n	800a114 <memmove+0x24>

0800a124 <__malloc_lock>:
 800a124:	4801      	ldr	r0, [pc, #4]	; (800a12c <__malloc_lock+0x8>)
 800a126:	f7ff b84b 	b.w	80091c0 <__retarget_lock_acquire_recursive>
 800a12a:	bf00      	nop
 800a12c:	2000219c 	.word	0x2000219c

0800a130 <__malloc_unlock>:
 800a130:	4801      	ldr	r0, [pc, #4]	; (800a138 <__malloc_unlock+0x8>)
 800a132:	f7ff b846 	b.w	80091c2 <__retarget_lock_release_recursive>
 800a136:	bf00      	nop
 800a138:	2000219c 	.word	0x2000219c

0800a13c <_free_r>:
 800a13c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a13e:	2900      	cmp	r1, #0
 800a140:	d044      	beq.n	800a1cc <_free_r+0x90>
 800a142:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a146:	9001      	str	r0, [sp, #4]
 800a148:	2b00      	cmp	r3, #0
 800a14a:	f1a1 0404 	sub.w	r4, r1, #4
 800a14e:	bfb8      	it	lt
 800a150:	18e4      	addlt	r4, r4, r3
 800a152:	f7ff ffe7 	bl	800a124 <__malloc_lock>
 800a156:	4a1e      	ldr	r2, [pc, #120]	; (800a1d0 <_free_r+0x94>)
 800a158:	9801      	ldr	r0, [sp, #4]
 800a15a:	6813      	ldr	r3, [r2, #0]
 800a15c:	b933      	cbnz	r3, 800a16c <_free_r+0x30>
 800a15e:	6063      	str	r3, [r4, #4]
 800a160:	6014      	str	r4, [r2, #0]
 800a162:	b003      	add	sp, #12
 800a164:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a168:	f7ff bfe2 	b.w	800a130 <__malloc_unlock>
 800a16c:	42a3      	cmp	r3, r4
 800a16e:	d908      	bls.n	800a182 <_free_r+0x46>
 800a170:	6825      	ldr	r5, [r4, #0]
 800a172:	1961      	adds	r1, r4, r5
 800a174:	428b      	cmp	r3, r1
 800a176:	bf01      	itttt	eq
 800a178:	6819      	ldreq	r1, [r3, #0]
 800a17a:	685b      	ldreq	r3, [r3, #4]
 800a17c:	1949      	addeq	r1, r1, r5
 800a17e:	6021      	streq	r1, [r4, #0]
 800a180:	e7ed      	b.n	800a15e <_free_r+0x22>
 800a182:	461a      	mov	r2, r3
 800a184:	685b      	ldr	r3, [r3, #4]
 800a186:	b10b      	cbz	r3, 800a18c <_free_r+0x50>
 800a188:	42a3      	cmp	r3, r4
 800a18a:	d9fa      	bls.n	800a182 <_free_r+0x46>
 800a18c:	6811      	ldr	r1, [r2, #0]
 800a18e:	1855      	adds	r5, r2, r1
 800a190:	42a5      	cmp	r5, r4
 800a192:	d10b      	bne.n	800a1ac <_free_r+0x70>
 800a194:	6824      	ldr	r4, [r4, #0]
 800a196:	4421      	add	r1, r4
 800a198:	1854      	adds	r4, r2, r1
 800a19a:	42a3      	cmp	r3, r4
 800a19c:	6011      	str	r1, [r2, #0]
 800a19e:	d1e0      	bne.n	800a162 <_free_r+0x26>
 800a1a0:	681c      	ldr	r4, [r3, #0]
 800a1a2:	685b      	ldr	r3, [r3, #4]
 800a1a4:	6053      	str	r3, [r2, #4]
 800a1a6:	4421      	add	r1, r4
 800a1a8:	6011      	str	r1, [r2, #0]
 800a1aa:	e7da      	b.n	800a162 <_free_r+0x26>
 800a1ac:	d902      	bls.n	800a1b4 <_free_r+0x78>
 800a1ae:	230c      	movs	r3, #12
 800a1b0:	6003      	str	r3, [r0, #0]
 800a1b2:	e7d6      	b.n	800a162 <_free_r+0x26>
 800a1b4:	6825      	ldr	r5, [r4, #0]
 800a1b6:	1961      	adds	r1, r4, r5
 800a1b8:	428b      	cmp	r3, r1
 800a1ba:	bf04      	itt	eq
 800a1bc:	6819      	ldreq	r1, [r3, #0]
 800a1be:	685b      	ldreq	r3, [r3, #4]
 800a1c0:	6063      	str	r3, [r4, #4]
 800a1c2:	bf04      	itt	eq
 800a1c4:	1949      	addeq	r1, r1, r5
 800a1c6:	6021      	streq	r1, [r4, #0]
 800a1c8:	6054      	str	r4, [r2, #4]
 800a1ca:	e7ca      	b.n	800a162 <_free_r+0x26>
 800a1cc:	b003      	add	sp, #12
 800a1ce:	bd30      	pop	{r4, r5, pc}
 800a1d0:	200021a0 	.word	0x200021a0

0800a1d4 <_realloc_r>:
 800a1d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a1d8:	4680      	mov	r8, r0
 800a1da:	4614      	mov	r4, r2
 800a1dc:	460e      	mov	r6, r1
 800a1de:	b921      	cbnz	r1, 800a1ea <_realloc_r+0x16>
 800a1e0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a1e4:	4611      	mov	r1, r2
 800a1e6:	f7ff b80d 	b.w	8009204 <_malloc_r>
 800a1ea:	b92a      	cbnz	r2, 800a1f8 <_realloc_r+0x24>
 800a1ec:	f7ff ffa6 	bl	800a13c <_free_r>
 800a1f0:	4625      	mov	r5, r4
 800a1f2:	4628      	mov	r0, r5
 800a1f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a1f8:	f000 f850 	bl	800a29c <_malloc_usable_size_r>
 800a1fc:	4284      	cmp	r4, r0
 800a1fe:	4607      	mov	r7, r0
 800a200:	d802      	bhi.n	800a208 <_realloc_r+0x34>
 800a202:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a206:	d812      	bhi.n	800a22e <_realloc_r+0x5a>
 800a208:	4621      	mov	r1, r4
 800a20a:	4640      	mov	r0, r8
 800a20c:	f7fe fffa 	bl	8009204 <_malloc_r>
 800a210:	4605      	mov	r5, r0
 800a212:	2800      	cmp	r0, #0
 800a214:	d0ed      	beq.n	800a1f2 <_realloc_r+0x1e>
 800a216:	42bc      	cmp	r4, r7
 800a218:	4622      	mov	r2, r4
 800a21a:	4631      	mov	r1, r6
 800a21c:	bf28      	it	cs
 800a21e:	463a      	movcs	r2, r7
 800a220:	f7fe fe74 	bl	8008f0c <memcpy>
 800a224:	4631      	mov	r1, r6
 800a226:	4640      	mov	r0, r8
 800a228:	f7ff ff88 	bl	800a13c <_free_r>
 800a22c:	e7e1      	b.n	800a1f2 <_realloc_r+0x1e>
 800a22e:	4635      	mov	r5, r6
 800a230:	e7df      	b.n	800a1f2 <_realloc_r+0x1e>
	...

0800a234 <_read_r>:
 800a234:	b538      	push	{r3, r4, r5, lr}
 800a236:	4d07      	ldr	r5, [pc, #28]	; (800a254 <_read_r+0x20>)
 800a238:	4604      	mov	r4, r0
 800a23a:	4608      	mov	r0, r1
 800a23c:	4611      	mov	r1, r2
 800a23e:	2200      	movs	r2, #0
 800a240:	602a      	str	r2, [r5, #0]
 800a242:	461a      	mov	r2, r3
 800a244:	f7fe f802 	bl	800824c <_read>
 800a248:	1c43      	adds	r3, r0, #1
 800a24a:	d102      	bne.n	800a252 <_read_r+0x1e>
 800a24c:	682b      	ldr	r3, [r5, #0]
 800a24e:	b103      	cbz	r3, 800a252 <_read_r+0x1e>
 800a250:	6023      	str	r3, [r4, #0]
 800a252:	bd38      	pop	{r3, r4, r5, pc}
 800a254:	200021a8 	.word	0x200021a8

0800a258 <_fstat_r>:
 800a258:	b538      	push	{r3, r4, r5, lr}
 800a25a:	4d07      	ldr	r5, [pc, #28]	; (800a278 <_fstat_r+0x20>)
 800a25c:	2300      	movs	r3, #0
 800a25e:	4604      	mov	r4, r0
 800a260:	4608      	mov	r0, r1
 800a262:	4611      	mov	r1, r2
 800a264:	602b      	str	r3, [r5, #0]
 800a266:	f7fe f836 	bl	80082d6 <_fstat>
 800a26a:	1c43      	adds	r3, r0, #1
 800a26c:	d102      	bne.n	800a274 <_fstat_r+0x1c>
 800a26e:	682b      	ldr	r3, [r5, #0]
 800a270:	b103      	cbz	r3, 800a274 <_fstat_r+0x1c>
 800a272:	6023      	str	r3, [r4, #0]
 800a274:	bd38      	pop	{r3, r4, r5, pc}
 800a276:	bf00      	nop
 800a278:	200021a8 	.word	0x200021a8

0800a27c <_isatty_r>:
 800a27c:	b538      	push	{r3, r4, r5, lr}
 800a27e:	4d06      	ldr	r5, [pc, #24]	; (800a298 <_isatty_r+0x1c>)
 800a280:	2300      	movs	r3, #0
 800a282:	4604      	mov	r4, r0
 800a284:	4608      	mov	r0, r1
 800a286:	602b      	str	r3, [r5, #0]
 800a288:	f7fe f835 	bl	80082f6 <_isatty>
 800a28c:	1c43      	adds	r3, r0, #1
 800a28e:	d102      	bne.n	800a296 <_isatty_r+0x1a>
 800a290:	682b      	ldr	r3, [r5, #0]
 800a292:	b103      	cbz	r3, 800a296 <_isatty_r+0x1a>
 800a294:	6023      	str	r3, [r4, #0]
 800a296:	bd38      	pop	{r3, r4, r5, pc}
 800a298:	200021a8 	.word	0x200021a8

0800a29c <_malloc_usable_size_r>:
 800a29c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a2a0:	1f18      	subs	r0, r3, #4
 800a2a2:	2b00      	cmp	r3, #0
 800a2a4:	bfbc      	itt	lt
 800a2a6:	580b      	ldrlt	r3, [r1, r0]
 800a2a8:	18c0      	addlt	r0, r0, r3
 800a2aa:	4770      	bx	lr

0800a2ac <_init>:
 800a2ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a2ae:	bf00      	nop
 800a2b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a2b2:	bc08      	pop	{r3}
 800a2b4:	469e      	mov	lr, r3
 800a2b6:	4770      	bx	lr

0800a2b8 <_fini>:
 800a2b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a2ba:	bf00      	nop
 800a2bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a2be:	bc08      	pop	{r3}
 800a2c0:	469e      	mov	lr, r3
 800a2c2:	4770      	bx	lr
